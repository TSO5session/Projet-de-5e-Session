///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.40194/W32 for 8051        26/Nov/2014  10:21:14 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  near                                              /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data                                              /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Synchro\Dropbox\Travaux\Automne                /
//                          2014\ProjetSession5\ProgrammeDuFESTO\ProgrammeFES /
//                          TO\CLI2CHard.cpp                                  /
//    Command line       =  "C:\Synchro\Dropbox\Travaux\Automne               /
//                          2014\ProjetSession5\ProgrammeDuFESTO\ProgrammeFES /
//                          TO\CLI2CHard.cpp" -D UPSD3254A --preprocess=cl    /
//                          "C:\Synchro\Dropbox\Travaux\Automne               /
//                          2014\ProjetSession5\ProgrammeDuFESTO\ProgrammeFES /
//                          TO\UPSD\List\" -lC "C:\Synchro\Dropbox\Travaux\Au /
//                          tomne 2014\ProjetSession5\ProgrammeDuFESTO\Progra /
//                          mmeFESTO\UPSD\List\" -lA                          /
//                          "C:\Synchro\Dropbox\Travaux\Automne               /
//                          2014\ProjetSession5\ProgrammeDuFESTO\ProgrammeFES /
//                          TO\UPSD\List\" -o "C:\Synchro\Dropbox\Travaux\Aut /
//                          omne 2014\ProjetSession5\ProgrammeDuFESTO\Program /
//                          meFESTO\UPSD\Obj\" -e --no_cse --no_unroll        /
//                          --no_inline --no_code_motion --no_tbaa --debug    /
//                          --core=plain --dptr=16,1 --data_model=large       /
//                          --code_model=near --calling_convention=xdata_reen /
//                          trant --place_constants=data --nr_virtual_regs 8  /
//                          --dlib_config "C:\Program Files (x86)\IAR         /
//                          Systems\Embedded Workbench                        /
//                          6.0\8051\LIB\DLIB\dl8051Normal.h" -Ol --eec++     /
//    List file          =  C:\Synchro\Dropbox\Travaux\Automne                /
//                          2014\ProjetSession5\ProgrammeDuFESTO\ProgrammeFES /
//                          TO\UPSD\List\CLI2CHard.s51                        /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME CLI2CHard

        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "near"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        EXTERN ?FUNC_ENTER_XDATA
        EXTERN ?FUNC_LEAVE_XDATA
        EXTERN ?V0
        EXTERN __INIT_XDATA_Z

        PUBLIC ??CLI2CHARD
        FUNCTION ??CLI2CHARD,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ??bus_lost_flag
        PUBLIC `??delete ~CLI2CHARD`
        FUNCTION `??delete ~CLI2CHARD`,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        PUBLIC ??dummybyte
        PUBLIC ??i
        PUBLIC ??i2c_master
        PUBLIC ??i2c_rcv_buf
        PUBLIC ??i2c_timeout
        PUBLIC ??i2c_xmit_buf
        PUBLIC ??i2c_xmitr
        PUBLIC ??i2cwait
        PUBLIC `??new CLI2CHARD`
        FUNCTION `??new CLI2CHARD`,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ??slave_nack_flag
        PUBLIC ??ucLitOctet
        FUNCTION ??ucLitOctet,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        PUBLIC ??vDelay
        FUNCTION ??vDelay,0203H
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC ??vEcritOctet
        FUNCTION ??vEcritOctet,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        PUBLIC ??vI2C_WaitInterrupt
        FUNCTION ??vI2C_WaitInterrupt,021203H
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 8, STACK
        PUBLIC ??vInitUpsd
        FUNCTION ??vInitUpsd,0203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 3, STACK
        PUBLIC ??vIntrI2C
        FUNCTION ??vIntrI2C,0233H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 7, STACK
        PUBWEAK `??vIntrI2C??INTVEC 67`
        PUBLIC `?~CLI2CHARD`
        FUNCTION `?~CLI2CHARD`,0203H
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBWEAK S2DAT
        PUBWEAK _A_IEA
        PUBWEAK _A_IPA
        PUBWEAK _A_P3SFS
        PUBWEAK _A_S2CON
        PUBWEAK _A_S2STA
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:16, ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
`?<Name CLI2CHARD 4>` SYMBOL "CLI2CHARD"
??bus_lost_flag     SYMBOL "bus_lost_flag", `?<Name CLI2CHARD 4>`
??dummybyte         SYMBOL "dummybyte", `?<Name CLI2CHARD 4>`
??i                 SYMBOL "i", `?<Name CLI2CHARD 4>`
??i2c_master        SYMBOL "i2c_master", `?<Name CLI2CHARD 4>`
??i2c_rcv_buf       SYMBOL "i2c_rcv_buf", `?<Name CLI2CHARD 4>`
??i2c_timeout       SYMBOL "i2c_timeout", `?<Name CLI2CHARD 4>`
??i2c_xmit_buf      SYMBOL "i2c_xmit_buf", `?<Name CLI2CHARD 4>`
??i2c_xmitr         SYMBOL "i2c_xmitr", `?<Name CLI2CHARD 4>`
??i2cwait           SYMBOL "i2cwait", `?<Name CLI2CHARD 4>`
??slave_nack_flag   SYMBOL "slave_nack_flag", `?<Name CLI2CHARD 4>`

`??vIntrI2C??INTVEC 67` SYMBOL "??INTVEC 67", ??vIntrI2C

        EXTERN `??operator new`
        FUNCTION `??operator new`,010202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN `??operator delete`
        FUNCTION `??operator delete`,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Synchro\Dropbox\Travaux\Automne 2014\ProjetSession5\ProgrammeDuFESTO\ProgrammeFESTO\CLI2CHard.cpp
//    1 // ************************** FICHIER: CLI2CHARD.cpp****************************
//    2 //
//    3 // Fonctions de communication de base en I2C
//    4 //
//    5 // Application realisee avec IAR C++ 8.10
//    6 //
//    7 // AUTEUR : VINCENT CHOUINARD
//    8 // DATE CREATION : 2014/08/9 VERSION: 1.0
//    9 // DATE MODIFICATION: ****-**-**
//   10 //
//   11 // *****************************************************************************
//   12 #include "CLI2CHard.h"               //

        ASEGN SFR_AN:DATA:NOROOT,0a7H
// union <unnamed> volatile __sfr _A_IEA
_A_IEA:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0b7H
// union <unnamed> volatile __sfr _A_IPA
_A_IPA:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0ddH
// union <unnamed> volatile __sfr _A_S2STA
_A_S2STA:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0dcH
// union <unnamed> volatile __sfr _A_S2CON
_A_S2CON:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,093H
// union <unnamed> volatile __sfr _A_P3SFS
_A_P3SFS:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0deH
// unsigned char volatile __sfr S2DAT
S2DAT:
        DATA8
        DS 1
//   13 #include "_DeclarationGenerale.h"    //
//   14 #include "ConversionKeilToIAR.h"     // Conversion KEIL <--> IAR
//   15 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   16 bool CLI2CHARD :: bus_lost_flag;     //
??bus_lost_flag:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   17 bool CLI2CHARD :: i2cwait;           // Pour controler le delais
??i2cwait:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   18 bool CLI2CHARD :: i2c_master;        //
??i2c_master:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   19 bool CLI2CHARD :: i2c_xmitr;         //
??i2c_xmitr:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   20 bool CLI2CHARD :: slave_nack_flag;   //
??slave_nack_flag:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   21 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   22 UI   CLI2CHARD :: i;                 // array pointer
??i:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   23 UC   CLI2CHARD :: i2c_xmit_buf[256]; // message transmission buffer
??i2c_xmit_buf:
        DS 256
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   24 UC   CLI2CHARD :: i2c_rcv_buf [256]; // message reception buffer
??i2c_rcv_buf:
        DS 256
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   25 UC   CLI2CHARD :: dummybyte;
??dummybyte:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   26 UC   CLI2CHARD :: i2c_timeout;       // dummy byte to rcv, timeout cz
??i2c_timeout:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG NEAR_CODE:CODE:NOROOT(0)
// __near_func __xdata_reentrant CLI2CHARD &CLI2CHARD::new CLI2CHARD()
`??new CLI2CHARD`:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function `??new CLI2CHARD`
        CODE
        FUNCALL `??new CLI2CHARD`, `??operator new`
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL `??new CLI2CHARD`, ??CLI2CHARD
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    ?V0 + 0
        CFI V0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    ?V0 + 1
        CFI V1 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
        ; Setup parameters for call to function operator new(unsigned int)
        MOV     R2,#0x2
        MOV     R3,#0x0
        LCALL   `??operator new`
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R0
        ORL     A,R1
        JZ      `??new CLI2CHARD_1`
        ; Setup parameters for call to function CLI2CHARD::CLI2CHARD()
        LCALL   ??CLI2CHARD
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        SJMP    `??new CLI2CHARD_2`
`??new CLI2CHARD_1`:
        MOV     R2,#0x0
        MOV     R3,#0x0
`??new CLI2CHARD_2`:
        POP     ?V0 + 1
        CFI V1 SameValue
        CFI CFA_SP SP+-3
        POP     ?V0 + 0
        CFI V0 SameValue
        CFI CFA_SP SP+-2
        RET
        CFI EndBlock cfiBlock0

        RSEG NEAR_CODE:CODE:NOROOT(0)
// __near_func __xdata_reentrant void CLI2CHARD::delete ~CLI2CHARD(CLI2CHARD *)
`??delete ~CLI2CHARD`:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function `??delete ~CLI2CHARD`
        CODE
        FUNCALL `??delete ~CLI2CHARD`, `?~CLI2CHARD`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL `??delete ~CLI2CHARD`, `??operator delete`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x8
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 8)
        ; Saved register size: 8
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     A,R6
        ORL     A,R7
        JZ      `??delete ~CLI2CHARD_1`
        ; Setup parameters for call to function CLI2CHARD::~CLI2CHARD()
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `?~CLI2CHARD`
        ; Setup parameters for call to function operator delete(void *)
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??operator delete`
`??delete ~CLI2CHARD_1`:
        MOV     R7,#0x1
        LJMP    ?FUNC_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//   27 
//   28 // *****************************************************************************
//   29 //                            LE CONSTRUCTEUR initialisateur
//   30 // *****************************************************************************

        RSEG NEAR_CODE:CODE:NOROOT(0)
//   31 CLI2CHARD :: CLI2CHARD(void)
??CLI2CHARD:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function ??CLI2CHARD
        CODE
//   32 {
        FUNCALL ??CLI2CHARD, ??vInitUpsd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
        MOV     DPL,R2
        MOV     DPH,R3
//   33 vInitUpsd(); // Initialise les SFR du bus I2C du uPSD3254
        ; Setup parameters for call to function CLI2CHARD::vInitUpsd()
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??vInitUpsd
//   34 }
        MOV     R2,DPL
        MOV     R3,DPH
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-3
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-2
        RET
        CFI EndBlock cfiBlock2
//   35 
//   36 // *****************************************************************************
//   37 //                            LE DESTRUCTEUR
//   38 // *****************************************************************************

        RSEG NEAR_CODE:CODE:NOROOT(0)
//   39 CLI2CHARD :: ~CLI2CHARD(void)
`?~CLI2CHARD`:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function `?~CLI2CHARD`
        CODE
//   40 {
        ; Saved register size: 0
        ; Auto size: 0
//   41 
//   42 }
        RET
        CFI EndBlock cfiBlock3
//   43 
//   44 // **********************FONCTION: vInitUpsd()**********************************
//   45 //
//   46 // DESCRIPTION: Initialise les registres du bus I2C hardware du uPSD
//   47 //
//   48 // INCLUDE: "_DeclarationGenerale.h"
//   49 //          "CLI2CHard.h"
//   50 //
//   51 // PROTOTYPE:           void vInitUpsd(void)
//   52 //
//   53 // PROCEDURE D'APPEL:   vInitUpsd()
//   54 //
//   55 // PARAMETRE D'ENTREE:  AUCUN
//   56 //
//   57 // PARAMETRE DE SORTIE: AUCUN
//   58 //
//   59 // EXEMPLE: vInitUpsd() ---> Initialise le bus I2C Hardware
//   60 //
//   61 // Auteur:              Vincent Chouinard
//   62 // Date:                16 septembre 2014   (Version 1.0)
//   63 // Modification:
//   64 // *****************************************************************************

        RSEG NEAR_CODE:CODE:NOROOT(0)
//   65 void CLI2CHARD :: vInitUpsd(void)
??vInitUpsd:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function ??vInitUpsd
        CODE
//   66 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
//   67 P3SFS           |= 0xC0;  // Enable P3.7 for SCL, P3.6 for SDA
        ORL     0x93,#0xc0
//   68 S2CON           |= 0x01;  // Setup I2C-2 for 500KHz (24MHz XTAL)
        ORL     0xdc,#0x1
//   69 i2c_init_flag    = 1;     // set init done flag
        MOV     A,#0x1
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    @DPTR,A
//   70 i2c_timeout_flag = 0;     // clear timeout error flag
        MOV     A,#0x0
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOVX    @DPTR,A
//   71 i2cwait          = 0;     // Petit delais d'attente
        MOV     A,#0x0
        MOV     DPTR,#??i2cwait
        MOVX    @DPTR,A
//   72 IPA             |= 0x02;  // set high priority for EI2C
        ORL     0xb7,#0x2
//   73 IEA             |= 0x02;  // set EI2C I2C Int. Enable bit
        ORL     0xa7,#0x2
//   74 }
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-3
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-2
        RET
        CFI EndBlock cfiBlock4
        REQUIRE _A_P3SFS
        REQUIRE _A_S2CON
        REQUIRE _A_IPA
        REQUIRE _A_IEA
//   75 
//   76 // **********************FONCTION: vI2C_WaitInterrupt()*************************
//   77 //
//   78 // DESCRIPTION: Permet d'attendre qu'un interrupt survient
//   79 //
//   80 // INCLUDE: "_DeclarationGenerale.h"
//   81 //          "CLI2CHard.h"
//   82 //
//   83 // PROTOTYPE:           void vI2C_WaitInterrupt(void)
//   84 //
//   85 // PROCEDURE D'APPEL:   vI2C_WaitInterrupt()
//   86 //
//   87 // PARAMETRE D'ENTREE:  AUCUN
//   88 //
//   89 // PARAMETRE DE SORTIE: AUCUN
//   90 //
//   91 // EXEMPLE: vI2C_WaitInterrupt() ---> Attend un interrupt
//   92 //
//   93 // Auteur:              Vincent Chouinard
//   94 // Date:                16 septembre 2014   (Version 1.0)
//   95 // Modification:
//   96 // *****************************************************************************

        RSEG NEAR_CODE:CODE:NOROOT(0)
//   97 void CLI2CHARD :: vI2C_WaitInterrupt(void)
??vI2C_WaitInterrupt:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function ??vI2C_WaitInterrupt
        CODE
//   98 {
        FUNCALL ??vI2C_WaitInterrupt, ??vDelay
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x8
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 8)
        ; Saved register size: 8
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//   99 i2cwait     = 1;            // Flag d'attente
        MOV     A,#0x1
        MOV     DPTR,#??i2cwait
        MOVX    @DPTR,A
//  100 i2c_timeout = 0;            // Flag de depassement d'attente
        MOV     DPTR,#??i2c_timeout
        MOV     A,#0x0
        MOVX    @DPTR,A
        SJMP    ??vI2C_WaitInterrupt_1
//  101 
//  102 while (i2cwait == 1)        // Wait for int to clear flag
//  103   {                         //
//  104    if(i2c_timeout >= 2 )    // XmS timeout loop
??vI2C_WaitInterrupt_2:
        MOV     DPTR,#??i2c_timeout
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x2
        JC      ??vI2C_WaitInterrupt_3
//  105      {                      //
//  106       i2c_timeout_flag = 1; // set error flag
        MOV     A,#0x1
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    @DPTR,A
//  107       i2cwait          = 0; // Reset le flag d'attente
        MOV     A,#0x0
        MOV     DPTR,#??i2cwait
        MOVX    @DPTR,A
//  108      }                      //
//  109    vDelay(i);               // 1 mS delay (approximatively)
??vI2C_WaitInterrupt_3:
        ; Setup parameters for call to function CLI2CHARD::vDelay(UINT16)
        MOV     DPTR,#??i
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??vDelay
//  110    i2c_timeout++;           // for the timeloop
        MOV     DPTR,#??i2c_timeout
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
//  111   }
??vI2C_WaitInterrupt_1:
        MOV     DPTR,#??i2cwait
        MOVX    A,@DPTR
        JNZ     ??vI2C_WaitInterrupt_2
//  112 }
        MOV     R7,#0x1
        LJMP    ?FUNC_LEAVE_XDATA
        CFI EndBlock cfiBlock5
//  113 
//  114 // **********************FONCTION: vIntrI2C()***********************************
//  115 //
//  116 // DESCRIPTION: Fonction PRAGMA VECTOR d'interruption
//  117 //
//  118 // INCLUDE: "_DeclarationGenerale.h"
//  119 //          "CLI2CHard.h"
//  120 //
//  121 // PROTOTYPE:            #pragma vector = 0x43 __interrupt void CLI2CHARD :: vIntrI2C(void)
//  122 //
//  123 // PROCEDURE D'APPEL:   Purement hardware
//  124 //
//  125 // PARAMETRE D'ENTREE:  AUCUN
//  126 //
//  127 // PARAMETRE DE SORTIE: AUCUN
//  128 //
//  129 // EXEMPLE: Survient lors d'une interruption sur le vecteur 0x43
//  130 //
//  131 // Auteur:              Vincent Chouinard
//  132 // Date:                16 septembre 2014   (Version 1.0)
//  133 // Modification:
//  134 // *****************************************************************************
//  135  #pragma vector = 0x43                       // Lors d'une interruption de type INTERRUPT I2C

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  136 __interrupt void CLI2CHARD :: vIntrI2C(void) // I2C Hardware interrupt
??vIntrI2C:
        CFI Block cfiBlock6 Using cfiCommon1
        CFI Function ??vIntrI2C
        CODE
//  137 {
        PUSH    A
        CFI A Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    PSW
        CFI PSW Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        MOV     A,R0
        CFI R0 A
        PUSH    A
        CFI R0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        MOV     A,R1
        CFI R1 A
        PUSH    A
        CFI R1 Frame(CFA_SP, 6)
        CFI CFA_SP SP+-6
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 7)
        CFI CFA_SP SP+-7
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 8)
        CFI CFA_SP SP+-8
        ; Saved register size: 6
        ; Auto size: 0
//  138 if((S2STA & BLOST) == 1)    // If I2C bus is out of sync
        MOV     A,0xdd
        MOV     R0,A
        MOV     A,0xdd
        MOV     R1,A
        MOV     A,R0
        MOV     C,0xE0 /* A   */.0
        JNC     ??vIntrI2C_1
        MOV     A,R1
        MOV     C,0xE0 /* A   */.2
        JNC     ??vIntrI2C_1
//  139   {
//  140    S2DAT = dummy;           // send dummy byte
        MOV     0xde,#-0x1
//  141    bus_lost_flag    = 1;    // Activate bus loss flag
        MOV     A,#0x1
        MOV     DPTR,#??bus_lost_flag
        MOVX    @DPTR,A
//  142   }
//  143 
//  144 if((S2STA & ACKR)  == 1)    // If bus send nACK
??vIntrI2C_1:
        MOV     A,0xdd
        MOV     R0,A
        MOV     A,0xdd
        MOV     R1,A
        MOV     A,R0
        MOV     C,0xE0 /* A   */.0
        JNC     ??vIntrI2C_2
        MOV     A,R1
        MOV     C,0xE0 /* A   */.1
        JNC     ??vIntrI2C_2
//  145   {
//  146    S2DAT = dummy;           // send dummy byte
        MOV     0xde,#-0x1
//  147    slave_nack_flag  = 1;    // Activate bus loss flag
        MOV     A,#0x1
        MOV     DPTR,#??slave_nack_flag
        MOVX    @DPTR,A
//  148   }
//  149  
//  150 if(i2c_master & i2c_xmitr)  // If master must transmit
??vIntrI2C_2:
        MOV     DPTR,#??i2c_xmitr
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-9
        MOV     DPTR,#??i2c_master
        MOVX    A,@DPTR
        MOV     R0,A
        POP     A
        CFI CFA_SP SP+-8
        ANL     A,R0
        JZ      ??vIntrI2C_3
//  151   {                         // Master transmitter mode
//  152    i2cwait = 0;             // reset wait flag
        MOV     A,#0x0
        MOV     DPTR,#??i2cwait
        MOVX    @DPTR,A
//  153   }
//  154 
//  155 if(i2c_master & ~i2c_xmitr) // If master must receive
??vIntrI2C_3:
        MOV     DPTR,#??i2c_xmitr
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        CPL     C
        CLR     A
        RLC     A
        PUSH    A
        CFI CFA_SP SP+-9
        MOV     DPTR,#??i2c_master
        MOVX    A,@DPTR
        MOV     R0,A
        POP     A
        CFI CFA_SP SP+-8
        ANL     A,R0
        JZ      ??vIntrI2C_4
//  156   {                         // Master receiver mode
//  157    i2cwait = 0;             // reset wait flag
        MOV     A,#0x0
        MOV     DPTR,#??i2cwait
        MOVX    @DPTR,A
//  158   }
//  159 }
??vIntrI2C_4:
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-7
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-6
        POP     A
        CFI R1 A
        CFI CFA_SP SP+-5
        MOV     R1,A
        CFI R1 SameValue
        POP     A
        CFI R0 A
        CFI CFA_SP SP+-4
        MOV     R0,A
        CFI R0 SameValue
        POP     PSW
        CFI PSW SameValue
        CFI CFA_SP SP+-3
        POP     A
        CFI A SameValue
        CFI CFA_SP SP+-2
        RETI
        CFI EndBlock cfiBlock6
        REQUIRE _A_S2STA
        REQUIRE S2DAT
//  160 
//  161 // **********************FONCTION: vEcritOctet()*************************
//  162 //
//  163 // DESCRIPTION: Permet d'attendre qu'un interrupt survient
//  164 //
//  165 // INCLUDE: "_DeclarationGenerale.h"
//  166 //          "CLI2CHard.h"
//  167 //
//  168 // PROTOTYPE:           void vEcritOctet(UC, UC)
//  169 //
//  170 // PROCEDURE D'APPEL:   vEcritOctet(UC ucAdresse, UC ucData)
//  171 //
//  172 // PARAMETRE D'ENTREE:  ucAdresse et ucData
//  173 //
//  174 // PARAMETRE DE SORTIE: AUCUN
//  175 //
//  176 // EXEMPLE: vEcritOctet(0x43, 0x8A) ---> Ecrit 8A sur un chip dont l'adresse est 0x43
//  177 //
//  178 // Auteur:              Vincent Chouinard
//  179 // Date:                16 septembre 2014   (Version 1.0)
//  180 // Modification:
//  181 // *****************************************************************************

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  182 void CLI2CHARD :: vEcritOctet(UC ucAdresse, UC ucData)
??vEcritOctet:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function ??vEcritOctet
        CODE
//  183 {
        FUNCALL ??vEcritOctet, ??vI2C_WaitInterrupt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??vEcritOctet, ??vI2C_WaitInterrupt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x8
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 8)
        ; Saved register size: 8
        ; Auto size: 0
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,R1
        MOV     R6,A
        MOV     A,R4
        MOV     R7,A
//  184 EN1 = 1;                    // Enable I2C.
        ORL     0xdc,#0x40
//  185 STA = 1;                    // Send start bit
        ORL     0xdc,#0x20
//  186 S2DAT = ucAdresse /*& 0xFE*/;   // Envoyer adresse I2C du dispositif
        MOV     0xde,R6
//  187 vI2C_WaitInterrupt();       // Wait for interrupt
        ; Setup parameters for call to function CLI2CHARD::vI2C_WaitInterrupt()
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??vI2C_WaitInterrupt
//  188 AA    = 1;                  // Send ACKowledge
        ORL     0xdc,#0x4
//  189 STA   = 0;                  // Clear STA (Disable START)
        ANL     0xdc,#0xdf
//  190 
//  191 // ********************************************************
//  192 // CE QUI EST IMPORTANT C'EST DE METTRE LE STOP AVANT
//  193 // LA DERNIERE INTERRUPTION SOIT LA TRANSMISSION DU DERNIER
//  194 // OCTET.
//  195 // ********************************************************
//  196 STO   = 1;                  // Send STOP bit
        ORL     0xdc,#0x10
//  197 S2DAT = ucData;             // Envoyer la donnee ucData
        MOV     0xde,R7
//  198 vI2C_WaitInterrupt();       // Wait for interrupt.
        ; Setup parameters for call to function CLI2CHARD::vI2C_WaitInterrupt()
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??vI2C_WaitInterrupt
//  199 STA   = 0;                  // Disable START).
        ANL     0xdc,#0xdf
//  200 STO   = 0;                  // Send STOP bit).
        ANL     0xdc,#0xef
//  201 EN1   = 0;                  // Disiable I2C-2
        ANL     0xdc,#0xbf
//  202 }
        MOV     R7,#0x1
        LJMP    ?FUNC_LEAVE_XDATA
        CFI EndBlock cfiBlock7
        REQUIRE _A_S2CON
        REQUIRE S2DAT
//  203 
//  204 // **********************FONCTION: ucLitOctet()*************************
//  205 //
//  206 // DESCRIPTION: Permet d'attendre qu'un interrupt survient
//  207 //
//  208 // INCLUDE: "_DeclarationGenerale.h"
//  209 //          "CLI2CHard.h"
//  210 //
//  211 // PROTOTYPE:           UC ucLitOctet(UC)
//  212 //
//  213 // PROCEDURE D'APPEL:   UC = ucLitOctet(UC ucAdresse)
//  214 //
//  215 // PARAMETRE D'ENTREE:  ucAdresse
//  216 //
//  217 // PARAMETRE DE SORTIE: ucData
//  218 //
//  219 // EXEMPLE: UC = ucLitOctet(0x43) ---> Lit la data sur un chip dont l'adresse est 0x43
//  220 //
//  221 // Auteur:              Vincent Chouinard
//  222 // Date:                16 septembre 2014   (Version 1.0)
//  223 // Modification:
//  224 // *****************************************************************************

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  225 UC CLI2CHARD :: ucLitOctet(UC ucAdresse)
??ucLitOctet:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function ??ucLitOctet
        CODE
//  226 {
        FUNCALL ??ucLitOctet, ??vI2C_WaitInterrupt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??ucLitOctet, ??vI2C_WaitInterrupt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??ucLitOctet, ??vI2C_WaitInterrupt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x8
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 8)
        ; Saved register size: 8
        ; Auto size: 0
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,R1
        MOV     R7,A
//  227 UC ucData;                  // Pour enregistrer la donnee lue
//  228 EN1 = 1;                    // Enable I2C.
        ORL     0xdc,#0x40
//  229 STA = 1;                    // Set STA to send start bit).
        ORL     0xdc,#0x20
//  230 
//  231                             // Envoyer adresse du dispositif en lecture.
//  232                             // Masquer pour s'assurer d'une adresse de lecture.
//  233 S2DAT = (ucAdresse | 0x01); // I2C addresse en lecture (R/W bit)
        MOV     A,#0x1
        ORL     A,R7
        MOV     0xde,A
//  234 vI2C_WaitInterrupt();       // Wait for interrupt
        ; Setup parameters for call to function CLI2CHARD::vI2C_WaitInterrupt()
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??vI2C_WaitInterrupt
//  235 
//  236 AA  = 1;                    // Send ACKowledge
        ORL     0xdc,#0x4
//  237 STA = 0;                    // Disable START
        ANL     0xdc,#0xdf
//  238 STO = 0;                    // Send STOP bit
        ANL     0xdc,#0xef
//  239 
//  240                             // Important de conserver les 2 lignes suivantes
//  241                             // pour mettre le I2C en entree.
//  242 S2DAT = 0xFF;               // Send byte for rcv mode.
        MOV     0xde,#-0x1
//  243 vI2C_WaitInterrupt();       // Wait for interrupt
        ; Setup parameters for call to function CLI2CHARD::vI2C_WaitInterrupt()
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??vI2C_WaitInterrupt
//  244 
//  245 // ********************************************************
//  246 // CE QUI EST IMPORTANT C'EST DE METTRE LE STOP AVANT
//  247 // LA DERNIERE INTERRUPTION SOIT LA RECEPTION DU DERNIER
//  248 // OCTET.
//  249 // ********************************************************
//  250 STO    = 1;                 // Send STOP bit
        ORL     0xdc,#0x10
//  251 ucData = S2DAT;             // Lire dernier octet.
        MOV     A,0xde
        MOV     R6,A
//  252 vI2C_WaitInterrupt();       // Wait for interrupt
        ; Setup parameters for call to function CLI2CHARD::vI2C_WaitInterrupt()
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??vI2C_WaitInterrupt
//  253 AA     = 0;                 // Send Not ACKnowledge
        ANL     0xdc,#0xfb
//  254 STA    = 0;                 // Disable START
        ANL     0xdc,#0xdf
//  255 EN1    = 0;                 // Disiable I2C-2
        ANL     0xdc,#0xbf
//  256 return(ucData);
        MOV     A,R6
        MOV     R1,A
        MOV     R7,#0x1
        LJMP    ?FUNC_LEAVE_XDATA
        CFI EndBlock cfiBlock8
        REQUIRE _A_S2CON
        REQUIRE S2DAT
//  257 }
//  258 
//  259 
//  260 // **********************FONCTION: vDelay()*************************
//  261 //
//  262 // DESCRIPTION: Permet d'attendre qu'un interrupt survient
//  263 //
//  264 // INCLUDE: "_DeclarationGenerale.h"
//  265 //          "CLI2CHard.h"
//  266 //
//  267 // PROTOTYPE:           void vDelay(UINT16)
//  268 //
//  269 // PROCEDURE D'APPEL:   vDelay(UINT16)
//  270 //
//  271 // PARAMETRE D'ENTREE:  vDelay
//  272 //
//  273 // PARAMETRE DE SORTIE: AUCUN
//  274 //
//  275 // EXEMPLE: vDelay(555) ---> Cre un delais de 555 unite de temps
//  276 //
//  277 // Auteur:              Vincent Chouinard
//  278 // Date:                16 septembre 2014   (Version 1.0)
//  279 // Modification:
//  280 // *****************************************************************************

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  281 void CLI2CHARD :: vDelay(UINT16 iWasteMyTime)
??vDelay:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function ??vDelay
        CODE
//  282 {
        ; Saved register size: 0
        ; Auto size: 0
//  283 for(iWasteMyTime = 0; iWasteMyTime < 10; iWasteMyTime++)
        MOV     R0,#0x0
        MOV     R1,#0x0
        SJMP    ??vDelay_1
??vDelay_2:
        MOV     A,R0
        ADD     A,#0x1
        MOV     R0,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
??vDelay_1:
        CLR     C
        MOV     A,R0
        SUBB    A,#0xa
        MOV     A,R1
        SUBB    A,#0x0
        JC      ??vDelay_2
//  284   {
//  285     /*Perd du temps dans une boucle FOR*/
//  286   }
//  287 }
        RET
        CFI EndBlock cfiBlock9

        COMMON INTVEC:CODE:ROOT(0)
        ORG 67
`??vIntrI2C??INTVEC 67`:
        LJMP       (??vIntrI2C)

        END
//  288 //LinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxTUX
// 
//   3 bytes in segment INTVEC
// 516 bytes in segment NEAR_CODE
//   6 bytes in segment SFR_AN
// 521 bytes in segment XDATA_Z
// 
// 516 bytes of CODE  memory (+ 3 bytes shared)
//   0 bytes of DATA  memory (+ 6 bytes shared)
// 521 bytes of XDATA memory
//
//Errors: none
//Warnings: 2
