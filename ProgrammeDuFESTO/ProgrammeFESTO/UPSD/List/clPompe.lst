###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.40194/W32 for 8051         28/Nov/2014  08:11:54 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  near                                               #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data                                               #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Synchro\Dropbox\Travaux\Automne                 #
#                          2014\ProjetSession5\ProgrammeDuFESTO\ProgrammeFEST #
#                          O\clPompe.cpp                                      #
#    Command line       =  "C:\Synchro\Dropbox\Travaux\Automne                #
#                          2014\ProjetSession5\ProgrammeDuFESTO\ProgrammeFEST #
#                          O\clPompe.cpp" -D UPSD3254A --preprocess=cl        #
#                          "C:\Synchro\Dropbox\Travaux\Automne                #
#                          2014\ProjetSession5\ProgrammeDuFESTO\ProgrammeFEST #
#                          O\UPSD\List\" -lC "C:\Synchro\Dropbox\Travaux\Auto #
#                          mne 2014\ProjetSession5\ProgrammeDuFESTO\Programme #
#                          FESTO\UPSD\List\" -lA "C:\Synchro\Dropbox\Travaux\ #
#                          Automne 2014\ProjetSession5\ProgrammeDuFESTO\Progr #
#                          ammeFESTO\UPSD\List\" -o                           #
#                          "C:\Synchro\Dropbox\Travaux\Automne                #
#                          2014\ProjetSession5\ProgrammeDuFESTO\ProgrammeFEST #
#                          O\UPSD\Obj\" -e --no_cse --no_unroll --no_inline   #
#                          --no_code_motion --no_tbaa --debug --core=plain    #
#                          --dptr=16,1 --data_model=large --code_model=near   #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data --nr_virtual_regs 8         #
#                          --dlib_config "C:\Program Files (x86)\IAR          #
#                          Systems\Embedded Workbench                         #
#                          6.0\8051\LIB\DLIB\dl8051Normal.h" -Ol --eec++      #
#    List file          =  C:\Synchro\Dropbox\Travaux\Automne                 #
#                          2014\ProjetSession5\ProgrammeDuFESTO\ProgrammeFEST #
#                          O\UPSD\List\clPompe.lst                            #
#    Object file        =  C:\Synchro\Dropbox\Travaux\Automne                 #
#                          2014\ProjetSession5\ProgrammeDuFESTO\ProgrammeFEST #
#                          O\UPSD\Obj\clPompe.r51                             #
#                                                                             #
#                                                                             #
###############################################################################

C:\Synchro\Dropbox\Travaux\Automne 2014\ProjetSession5\ProgrammeDuFESTO\ProgrammeFESTO\clPompe.cpp
      1          // **************************CLPompe.cpp
      2          // Auteur:       Vincent Chouinard
      3          // Date:         27 novembre 2014
      4          // Version:      1.0
      5          // Modification: Aucune
      6          //
      7          // Compilateur:  IAR 8.10
      8          //
      9          // Description:
     10          // *****************************************************************************
     11          #include "_DeclarationGenerale.h"  // Raccourcis de programmation & variables
     12          #include "CLPompe.h"               // Fichier de definitions de...
     13          
     14          //******************************************************************************
     15          //                            LE CONSTRUCTEUR PAR DEFAUT
     16          // *****************************************************************************

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
     17          CLPompe :: CLPompe(void)
   \                     ??CLPompe:
   \   000000   74F8         MOV     A,#-0x8
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 8
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
     18          {
   \   000009                ; Setup parameters for call to function CLIOPCF8574::CLIOPCF8574()
   \   000009   EE           MOV     A,R6
   \   00000A   FA           MOV     R2,A
   \   00000B   EF           MOV     A,R7
   \   00000C   FB           MOV     R3,A
   \   00000D   12....       LCALL   ??CLIOPCF8574
   \   000010                ; Setup parameters for call to function CLIOPCF8574::CLIOPCF8574()
   \   000010   EE           MOV     A,R6
   \   000011   2404         ADD     A,#0x4
   \   000013   FA           MOV     R2,A
   \   000014   EF           MOV     A,R7
   \   000015   3400         ADDC    A,#0x0
   \   000017   FB           MOV     R3,A
   \   000018   12....       LCALL   ??CLIOPCF8574
     19          
     20          }
   \   00001B   EE           MOV     A,R6
   \   00001C   FA           MOV     R2,A
   \   00001D   EF           MOV     A,R7
   \   00001E   FB           MOV     R3,A
   \   00001F   7F01         MOV     R7,#0x1
   \   000021   02....       LJMP    ?FUNC_LEAVE_XDATA
     21          
     22          //******************************************************************************
     23          //                            LE CONSTRUCTEUR INITIALISATEUR
     24          // *****************************************************************************

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
     25          CLPompe :: CLPompe(UC ucParametre)
   \                     ??CLPompe_1:
   \   000000   74F8         MOV     A,#-0x8
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 8
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
     26          {
   \   000009                ; Setup parameters for call to function CLIOPCF8574::CLIOPCF8574()
   \   000009   EE           MOV     A,R6
   \   00000A   FA           MOV     R2,A
   \   00000B   EF           MOV     A,R7
   \   00000C   FB           MOV     R3,A
   \   00000D   12....       LCALL   ??CLIOPCF8574
   \   000010                ; Setup parameters for call to function CLIOPCF8574::CLIOPCF8574()
   \   000010   EE           MOV     A,R6
   \   000011   2404         ADD     A,#0x4
   \   000013   FA           MOV     R2,A
   \   000014   EF           MOV     A,R7
   \   000015   3400         ADDC    A,#0x0
   \   000017   FB           MOV     R3,A
   \   000018   12....       LCALL   ??CLIOPCF8574
     27          
     28          }
   \   00001B   EE           MOV     A,R6
   \   00001C   FA           MOV     R2,A
   \   00001D   EF           MOV     A,R7
   \   00001E   FB           MOV     R3,A
   \   00001F   7F01         MOV     R7,#0x1
   \   000021   02....       LJMP    ?FUNC_LEAVE_XDATA
     29          
     30          // *****************************************************************************
     31          //                            LE DESTRUCTEUR
     32          // *****************************************************************************

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
     33          CLPompe :: ~CLPompe(void)
   \                     `?~CLPompe`:
     34          {
   \   000000   74F8         MOV     A,#-0x8
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 8
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
     35          
     36          }
   \   000009                ; Setup parameters for call to function CLIOPCF8574::~CLIOPCF8574()
   \   000009   EE           MOV     A,R6
   \   00000A   2404         ADD     A,#0x4
   \   00000C   FA           MOV     R2,A
   \   00000D   EF           MOV     A,R7
   \   00000E   3400         ADDC    A,#0x0
   \   000010   FB           MOV     R3,A
   \   000011   12....       LCALL   `?~CLIOPCF8574`
   \   000014                ; Setup parameters for call to function CLIOPCF8574::~CLIOPCF8574()
   \   000014   EE           MOV     A,R6
   \   000015   FA           MOV     R2,A
   \   000016   EF           MOV     A,R7
   \   000017   FB           MOV     R3,A
   \   000018   12....       LCALL   `?~CLIOPCF8574`
   \   00001B   7F01         MOV     R7,#0x1
   \   00001D   02....       LJMP    ?FUNC_LEAVE_XDATA
     37          
     38          // **********************FONCTION: vPompeSOL725()
     39          //
     40          // DESCRIPTION        : Pompe de chargement de marchandise à partir du tube de stockage
     41          //
     42          // INCLUDE            : "_DeclarationGenerale.h" "CLPompe.h"
     43          //                      
     44          // PROTOTYPE          : void vPompeSOL725(void)
     45          //
     46          // PROCEDURE D'APPEL  : vPompeSOL725()
     47          //
     48          // PARAMETRE D'ENTREE : AUCUN
     49          //
     50          // PARAMETRE DE SORTIE: AUCUN
     51          //
     52          // Auteur             : Vincent Chouinard
     53          // Date               : 25 novembre 2014   (Version 1.0)
     54          // Modification       :
     55          // *****************************************************************************

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
     56          void CLPompe :: SOL725 (void)
   \                     ??SOL725:
     57          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     58          PCF1.Write(AdresseSOL725);  
   \   000000                ; Setup parameters for call to function CLIOPCF8574::Write(UC)
   \   000000   7940         MOV     R1,#0x40
   \   000002   02....       LJMP    ??Write
     59          }
     60          
     61          // **********************FONCTION: vPompeSOL713()
     62          //
     63          // DESCRIPTION        : Pompe d'élévation de la plateforme avec capteurs
     64          //
     65          // INCLUDE            : "_DeclarationGenerale.h" "CLPompe.h"
     66          //                      
     67          // PROTOTYPE          : void vPompeSOL713(void)
     68          //
     69          // PROCEDURE D'APPEL  : vPompeSOL725()
     70          //
     71          // PARAMETRE D'ENTREE : AUCUN
     72          //
     73          // PARAMETRE DE SORTIE: AUCUN
     74          //
     75          // Auteur             : Vincent Chouinard
     76          // Date               : 25 novembre 2014   (Version 1.0)
     77          // Modification       :
     78          // *****************************************************************************

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
     79          void CLPompe :: SOL713 (void)
   \                     ??SOL713:
     80          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     81          PCF1.Write(AdresseSOL713);  
   \   000000                ; Setup parameters for call to function CLIOPCF8574::Write(UC)
   \   000000   7940         MOV     R1,#0x40
   \   000002   02....       LJMP    ??Write
     82          }
     83          
     84          // **********************FONCTION: vPompeSOL713()
     85          //
     86          // DESCRIPTION        : Rétraction de la pompe d'élévation de la plateforme avec capteurs
     87          //
     88          // INCLUDE            : "_DeclarationGenerale.h" "CLPompe.h"
     89          //                      
     90          // PROTOTYPE          : void vPompeSOL713(void)
     91          //
     92          // PROCEDURE D'APPEL  : vPompeSOL725()
     93          //
     94          // PARAMETRE D'ENTREE : AUCUN
     95          //
     96          // PARAMETRE DE SORTIE: AUCUN
     97          //
     98          // Auteur             : Vincent Chouinard
     99          // Date               : 25 novembre 2014   (Version 1.0)
    100          // Modification       :
    101          // *****************************************************************************

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    102          void CLPompe :: SOL716 (void)
   \                     ??SOL716:
    103          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    104          PCF1.Write(AdresseSOL716);  
   \   000000                ; Setup parameters for call to function CLIOPCF8574::Write(UC)
   \   000000   7940         MOV     R1,#0x40
   \   000002   02....       LJMP    ??Write
    105          }
    106          
    107          // **********************FONCTION: vPompeSOL722()
    108          //
    109          // DESCRIPTION        : Envoie le bloc dans le convoyeur
    110          //
    111          // INCLUDE            : "_DeclarationGenerale.h" "CLPompe.h"
    112          //                      
    113          // PROTOTYPE          : void vPompeSOL722(void)
    114          //
    115          // PROCEDURE D'APPEL  : vPompeSOL722()
    116          //
    117          // PARAMETRE D'ENTREE : AUCUN
    118          //
    119          // PARAMETRE DE SORTIE: AUCUN
    120          //
    121          // Auteur             : Vincent Chouinard
    122          // Date               : 25 novembre 2014   (Version 1.0)
    123          // Modification       :
    124          // *****************************************************************************

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    125          void CLPompe :: SOL722 (void)
   \                     ??SOL722:
    126          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    127          PCF1.Write(AdresseSOL722);  
   \   000000                ; Setup parameters for call to function CLIOPCF8574::Write(UC)
   \   000000   7940         MOV     R1,#0x40
   \   000002   02....       LJMP    ??Write
    128          }
    129          
    130          // **********************FONCTION: vPompeSOL722()
    131          //
    132          // DESCRIPTION        : Rétracte la pompe SOL722
    133          //
    134          // INCLUDE            : "_DeclarationGenerale.h" "CLPompe.h"
    135          //                      
    136          // PROTOTYPE          : void vPompeSOL722(void)
    137          //
    138          // PROCEDURE D'APPEL  : vPompeSOL722()
    139          //
    140          // PARAMETRE D'ENTREE : AUCUN
    141          //
    142          // PARAMETRE DE SORTIE: AUCUN
    143          //
    144          // Auteur             : Vincent Chouinard
    145          // Date               : 25 novembre 2014   (Version 1.0)
    146          // Modification       :
    147          // *****************************************************************************

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    148          void CLPompe :: SOL719 (void)
   \                     ??SOL719:
    149          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    150          PCF2.Write(AdresseSOL719);  
   \   000000                ; Setup parameters for call to function CLIOPCF8574::Write(UC)
   \   000000   7941         MOV     R1,#0x41
   \   000002   EA           MOV     A,R2
   \   000003   2404         ADD     A,#0x4
   \   000005   FA           MOV     R2,A
   \   000006   EB           MOV     A,R3
   \   000007   3400         ADDC    A,#0x0
   \   000009   FB           MOV     R3,A
   \   00000A   02....       LJMP    ??Write
    151          }
    152          
    153          // **********************FONCTION: vPompeSOL704()
    154          //
    155          // DESCRIPTION        : Baisse la ventouse
    156          //
    157          // INCLUDE            : "_DeclarationGenerale.h" "CLPompe.h"
    158          //                      
    159          // PROTOTYPE          : void vPompeSOL704(void)
    160          //
    161          // PROCEDURE D'APPEL  : vPompeSOL704()
    162          //
    163          // PARAMETRE D'ENTREE : AUCUN
    164          //
    165          // PARAMETRE DE SORTIE: AUCUN
    166          //
    167          // Auteur             : Vincent Chouinard
    168          // Date               : 25 novembre 2014   (Version 1.0)
    169          // Modification       :
    170          // *****************************************************************************

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    171          void CLPompe :: SOL704 (void)
   \                     ??SOL704:
    172          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    173          PCF2.Write(AdresseSOL704);  
   \   000000                ; Setup parameters for call to function CLIOPCF8574::Write(UC)
   \   000000   7941         MOV     R1,#0x41
   \   000002   EA           MOV     A,R2
   \   000003   2404         ADD     A,#0x4
   \   000005   FA           MOV     R2,A
   \   000006   EB           MOV     A,R3
   \   000007   3400         ADDC    A,#0x0
   \   000009   FB           MOV     R3,A
   \   00000A   02....       LJMP    ??Write
    174          }
    175          
    176          // **********************FONCTION: vPompeSOL706()
    177          //
    178          // DESCRIPTION        : Remonte la ventouse
    179          //
    180          // INCLUDE            : "_DeclarationGenerale.h" "CLPompe.h"
    181          //                      
    182          // PROTOTYPE          : void vPompeSOL706(void)
    183          //
    184          // PROCEDURE D'APPEL  : vPompeSOL706()
    185          //
    186          // PARAMETRE D'ENTREE : AUCUN
    187          //
    188          // PARAMETRE DE SORTIE: AUCUN
    189          //
    190          // Auteur             : Vincent Chouinard
    191          // Date               : 25 novembre 2014   (Version 1.0)
    192          // Modification       :
    193          // *****************************************************************************

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    194          void CLPompe :: SOL706 (void)
   \                     ??SOL706:
    195          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    196          PCF2.Write(AdresseSOL706);  
   \   000000                ; Setup parameters for call to function CLIOPCF8574::Write(UC)
   \   000000   7941         MOV     R1,#0x41
   \   000002   EA           MOV     A,R2
   \   000003   2404         ADD     A,#0x4
   \   000005   FA           MOV     R2,A
   \   000006   EB           MOV     A,R3
   \   000007   3400         ADDC    A,#0x0
   \   000009   FB           MOV     R3,A
   \   00000A   02....       LJMP    ??Write
    197          }

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \   __near_func __xdata_reentrant CLPompe &CLPompe::new CLPompe()
   \                     `??new CLPompe`:
   \   000000   C0..         PUSH    ?V0 + 0
   \   000002   C0..         PUSH    ?V0 + 1
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004                ; Setup parameters for call to function operator new(unsigned int)
   \   000004   7A08         MOV     R2,#0x8
   \   000006   7B00         MOV     R3,#0x0
   \   000008   12....       LCALL   `??operator new`
   \   00000B   8A..         MOV     ?V0 + 0,R2
   \   00000D   8B..         MOV     ?V0 + 1,R3
   \   00000F   A8..         MOV     R0,?V0 + 0
   \   000011   A9..         MOV     R1,?V0 + 1
   \   000013   E8           MOV     A,R0
   \   000014   FA           MOV     R2,A
   \   000015   E9           MOV     A,R1
   \   000016   FB           MOV     R3,A
   \   000017   E8           MOV     A,R0
   \   000018   49           ORL     A,R1
   \   000019   600D         JZ      `??new CLPompe_2`
   \   00001B                ; Setup parameters for call to function CLPompe::CLPompe()
   \   00001B   12....       LCALL   ??CLPompe
   \   00001E   8A..         MOV     ?V0 + 0,R2
   \   000020   8B..         MOV     ?V0 + 1,R3
   \   000022   AA..         MOV     R2,?V0 + 0
   \   000024   AB..         MOV     R3,?V0 + 1
   \   000026   8004         SJMP    `??new CLPompe_3`
   \                     `??new CLPompe_2`:
   \   000028   7A00         MOV     R2,#0x0
   \   00002A   7B00         MOV     R3,#0x0
   \                     `??new CLPompe_3`:
   \   00002C   D0..         POP     ?V0 + 1
   \   00002E   D0..         POP     ?V0 + 0
   \   000030   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \   __near_func __xdata_reentrant CLPompe &CLPompe::new CLPompe(UC)
   \                     `??new CLPompe_1`:
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007                ; Setup parameters for call to function operator new(unsigned int)
   \   000007   7A08         MOV     R2,#0x8
   \   000009   7B00         MOV     R3,#0x0
   \   00000B   12....       LCALL   `??operator new`
   \   00000E   8A..         MOV     ?V0 + 0,R2
   \   000010   8B..         MOV     ?V0 + 1,R3
   \   000012   A8..         MOV     R0,?V0 + 0
   \   000014   A9..         MOV     R1,?V0 + 1
   \   000016   E8           MOV     A,R0
   \   000017   FA           MOV     R2,A
   \   000018   E9           MOV     A,R1
   \   000019   FB           MOV     R3,A
   \   00001A   E8           MOV     A,R0
   \   00001B   49           ORL     A,R1
   \   00001C   600F         JZ      `??new CLPompe_4`
   \   00001E                ; Setup parameters for call to function CLPompe::CLPompe(UC)
   \   00001E   EE           MOV     A,R6
   \   00001F   F9           MOV     R1,A
   \   000020   12....       LCALL   ??CLPompe_1
   \   000023   8A..         MOV     ?V0 + 0,R2
   \   000025   8B..         MOV     ?V0 + 1,R3
   \   000027   AA..         MOV     R2,?V0 + 0
   \   000029   AB..         MOV     R3,?V0 + 1
   \   00002B   8004         SJMP    `??new CLPompe_5`
   \                     `??new CLPompe_4`:
   \   00002D   7A00         MOV     R2,#0x0
   \   00002F   7B00         MOV     R3,#0x0
   \                     `??new CLPompe_5`:
   \   000031   7F02         MOV     R7,#0x2
   \   000033   02....       LJMP    ?FUNC_LEAVE_XDATA

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \   __near_func __xdata_reentrant void CLPompe::delete ~CLPompe(CLPompe *)
   \                     `??delete ~CLPompe`:
   \   000000   74F8         MOV     A,#-0x8
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 8
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   EE           MOV     A,R6
   \   00000A   4F           ORL     A,R7
   \   00000B   600E         JZ      `??delete ~CLPompe_1`
   \   00000D                ; Setup parameters for call to function CLPompe::~CLPompe()
   \   00000D   EE           MOV     A,R6
   \   00000E   FA           MOV     R2,A
   \   00000F   EF           MOV     A,R7
   \   000010   FB           MOV     R3,A
   \   000011   12....       LCALL   `?~CLPompe`
   \   000014                ; Setup parameters for call to function operator delete(void *)
   \   000014   EE           MOV     A,R6
   \   000015   FA           MOV     R2,A
   \   000016   EF           MOV     A,R7
   \   000017   FB           MOV     R3,A
   \   000018   12....       LCALL   `??operator delete`
   \                     `??delete ~CLPompe_1`:
   \   00001B   7F01         MOV     R7,#0x1
   \   00001D   02....       LJMP    ?FUNC_LEAVE_XDATA
    198          //LinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxTUX

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     CLPompe::CLPompe()                 0      0      8
       -> CLIOPCF8574::CLIOPCF8574()
                                        0      0     16
       -> CLIOPCF8574::CLIOPCF8574()
                                        0      0     16
     CLPompe::CLPompe(UC)               0      0     17
       -> CLIOPCF8574::CLIOPCF8574()
                                        0      0     16
       -> CLIOPCF8574::CLIOPCF8574()
                                        0      0     16
     CLPompe::SOL704()                  0      0      0
       -> CLIOPCF8574::Write(UC)        0      0      0
     CLPompe::SOL706()                  0      0      0
       -> CLIOPCF8574::Write(UC)        0      0      0
     CLPompe::SOL713()                  0      0      0
       -> CLIOPCF8574::Write(UC)        0      0      0
     CLPompe::SOL716()                  0      0      0
       -> CLIOPCF8574::Write(UC)        0      0      0
     CLPompe::SOL719()                  0      0      0
       -> CLIOPCF8574::Write(UC)        0      0      0
     CLPompe::SOL722()                  0      0      0
       -> CLIOPCF8574::Write(UC)        0      0      0
     CLPompe::SOL725()                  0      0      0
       -> CLIOPCF8574::Write(UC)        0      0      0
     CLPompe::delete ~CLPompe(CLPompe *)
                                        0      0      8
       -> CLPompe::~CLPompe()           0      0     16
       -> operator delete(void *)       0      0     16
     CLPompe::new CLPompe()             2      0      0
       -> operator new(unsigned int)
                                        4      0      0
       -> CLPompe::CLPompe()            4      0      0
     CLPompe::new CLPompe(UC)           0      0      9
       -> operator new(unsigned int)
                                        0      0     18
       -> CLPompe::CLPompe(UC)          0      0     18
     CLPompe::~CLPompe()                0      0     16
       -> CLIOPCF8574::~CLIOPCF8574()
                                        0      0     16
       -> CLIOPCF8574::~CLIOPCF8574()
                                        0      0     16


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     CLPompe::CLPompe()               36
     CLPompe::CLPompe(UC)             36
     CLPompe::~CLPompe()              32
     CLPompe::SOL725()                 5
     CLPompe::SOL713()                 5
     CLPompe::SOL716()                 5
     CLPompe::SOL722()                 5
     CLPompe::SOL719()                13
     CLPompe::SOL704()                13
     CLPompe::SOL706()                13
     CLPompe::new CLPompe()           49
     CLPompe::new CLPompe(UC)         54
     CLPompe::delete ~CLPompe(CLPompe *)
                                      32

 
 298 bytes in segment NEAR_CODE
 
 298 bytes of CODE memory

Errors: none
Warnings: none
