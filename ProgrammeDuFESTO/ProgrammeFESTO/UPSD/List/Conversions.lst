###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.40194/W32 for 8051         27/Nov/2014  09:22:07 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  near                                               #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data                                               #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Synchro\Dropbox\Travaux\Automne                 #
#                          2014\ProjetSession5\ProgrammeDuFESTO\ProgrammeFEST #
#                          O\Conversions.cpp                                  #
#    Command line       =  "C:\Synchro\Dropbox\Travaux\Automne                #
#                          2014\ProjetSession5\ProgrammeDuFESTO\ProgrammeFEST #
#                          O\Conversions.cpp" -D UPSD3254A --preprocess=cl    #
#                          "C:\Synchro\Dropbox\Travaux\Automne                #
#                          2014\ProjetSession5\ProgrammeDuFESTO\ProgrammeFEST #
#                          O\UPSD\List\" -lC "C:\Synchro\Dropbox\Travaux\Auto #
#                          mne 2014\ProjetSession5\ProgrammeDuFESTO\Programme #
#                          FESTO\UPSD\List\" -lA "C:\Synchro\Dropbox\Travaux\ #
#                          Automne 2014\ProjetSession5\ProgrammeDuFESTO\Progr #
#                          ammeFESTO\UPSD\List\" -o                           #
#                          "C:\Synchro\Dropbox\Travaux\Automne                #
#                          2014\ProjetSession5\ProgrammeDuFESTO\ProgrammeFEST #
#                          O\UPSD\Obj\" -e --no_cse --no_unroll --no_inline   #
#                          --no_code_motion --no_tbaa --debug --core=plain    #
#                          --dptr=16,1 --data_model=large --code_model=near   #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data --nr_virtual_regs 8         #
#                          --dlib_config "C:\Program Files (x86)\IAR          #
#                          Systems\Embedded Workbench                         #
#                          6.0\8051\LIB\DLIB\dl8051Normal.h" -Ol --eec++      #
#    List file          =  C:\Synchro\Dropbox\Travaux\Automne                 #
#                          2014\ProjetSession5\ProgrammeDuFESTO\ProgrammeFEST #
#                          O\UPSD\List\Conversions.lst                        #
#    Object file        =  C:\Synchro\Dropbox\Travaux\Automne                 #
#                          2014\ProjetSession5\ProgrammeDuFESTO\ProgrammeFEST #
#                          O\UPSD\Obj\Conversions.r51                         #
#                                                                             #
#                                                                             #
###############################################################################

C:\Synchro\Dropbox\Travaux\Automne 2014\ProjetSession5\ProgrammeDuFESTO\ProgrammeFESTO\Conversions.cpp
      1          // **************************Conversions.cpp
      2          // Auteur:       Vincent Chouinard
      3          // Date:         20 juillet 2014
      4          // Version:      1.0
      5          // Modification: Aucune
      6          //
      7          // Compilateur:  IAR 8.1
      8          //
      9          // Description:
     10          // *****************************************************************************
     11          #include "_DeclarationGenerale.h"  // Raccourcis de programmation & variables
     12          #include "Conversions.h"               // Fichier de definitions du clavier

     const char FloatToString (float fInputFloat); //String = Convert.FloatToString(131.74);  
     ^
"C:\Synchro\Dropbox\Travaux\Automne 2014\ProjetSession5\ProgrammeDuFESTO\ProgrammeFESTO\Conversions.h",25  Warning[Pe815]: 
          type qualifier on return type is meaningless
     13          ///// Initialise les variables statiques.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     14          char *Conversion :: StringFinal = NULL;
   \                     ??StringFinal:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     15          
     16          //******************************************************************************
     17          //                            LE CONSTRUCTEUR PAR DEFAUT
     18          // *****************************************************************************

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
     19          Conversion :: Conversion(void)
   \                     ??Conversion:
     20          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     21          
     22          }
   \   000000   22           RET
     23          
     24          //******************************************************************************
     25          //                            LE CONSTRUCTEUR PAR DEFAUT
     26          // *****************************************************************************

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
     27          Conversion :: Conversion(UC ucParametre)
   \                     ??Conversion_1:
     28          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     29          
     30          }
   \   000000   22           RET
     31          
     32          // *****************************************************************************
     33          //                            LE DESTRUCTEUR
     34          // *****************************************************************************

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
     35          Conversion :: ~Conversion(void)
   \                     `?~Conversion`:
     36          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     37          
     38          }
   \   000000   22           RET
     39          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
     40          void Conversion :: StringAdder(char cNumber)
   \                     ??StringAdder:
     41          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     42            
     43          }
   \   000000   22           RET
     44          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
     45          const char Conversion :: FloatToString (float fInputFloat)
                 ^
Warning[Pe815]: type qualifier on return type is meaningless
   \                     ??FloatToString:
     46          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV     A,#-0xe
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EA           MOV     A,R2
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   EB           MOV     A,R3
   \   000014   F0           MOVX    @DPTR,A
   \   000015   741D         MOV     A,#0x1d
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   78..         MOV     R0,#?V0 + 0
   \   00001C   12....       LCALL   ?L_MOV_X
     47          int i                 = 0; // Pour les boucles de comptage
   \   00001F   7402         MOV     A,#0x2
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   7400         MOV     A,#0x0
   \   000026   F0           MOVX    @DPTR,A
   \   000027   A3           INC     DPTR
   \   000028   7400         MOV     A,#0x0
   \   00002A   F0           MOVX    @DPTR,A
     48          float fTemporaire     = 0; // Pour le calcul de decimales
   \   00002B   90....       MOV     DPTR,#__Constant_0
   \   00002E   12....       LCALL   ?XLOAD_R2345
   \   000031   740A         MOV     A,#0xa
   \   000033   12....       LCALL   ?XSTACK_DISP0_8
   \   000036   12....       LCALL   ?XSTORE_R2345
     49          USI usiLesEntiers     = 0; // Pour la conversion d'un float en entier
   \   000039   7406         MOV     A,#0x6
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   7400         MOV     A,#0x0
   \   000040   F0           MOVX    @DPTR,A
   \   000041   A3           INC     DPTR
   \   000042   7400         MOV     A,#0x0
   \   000044   F0           MOVX    @DPTR,A
     50          USI usiLesEntiersTemp = 0; // Pour la conversion d'un float en entier
   \   000045   7404         MOV     A,#0x4
   \   000047   12....       LCALL   ?XSTACK_DISP0_8
   \   00004A   7400         MOV     A,#0x0
   \   00004C   F0           MOVX    @DPTR,A
   \   00004D   A3           INC     DPTR
   \   00004E   7400         MOV     A,#0x0
   \   000050   F0           MOVX    @DPTR,A
     51          USI usiDecimalesTemp  = 0; // Pour convertir les decimales d'un float en entier
   \   000051   7E00         MOV     R6,#0x0
   \   000053   7F00         MOV     R7,#0x0
     52          USI usiLesDecimales   = 0; // Pour convertir les decimales d'un float en entier
   \   000055   7408         MOV     A,#0x8
   \   000057   12....       LCALL   ?XSTACK_DISP0_8
   \   00005A   7400         MOV     A,#0x0
   \   00005C   F0           MOVX    @DPTR,A
   \   00005D   A3           INC     DPTR
   \   00005E   7400         MOV     A,#0x0
   \   000060   F0           MOVX    @DPTR,A
     53          
     54          usiLesEntiers   = (USI)fInputFloat; // Conversion des floats en USI sans virgule
   \   000061   85....       MOV     ?V0 + 4,?V0 + 0
   \   000064   85....       MOV     ?V0 + 5,?V0 + 1
   \   000067   85....       MOV     ?V0 + 6,?V0 + 2
   \   00006A   85....       MOV     ?V0 + 7,?V0 + 3
   \   00006D   78..         MOV     R0,#?V0 + 4
   \   00006F   12....       LCALL   ?FLT_TO_L
   \   000072   7406         MOV     A,#0x6
   \   000074   12....       LCALL   ?XSTACK_DISP0_8
   \   000077   E5..         MOV     A,?V0 + 4
   \   000079   F0           MOVX    @DPTR,A
   \   00007A   A3           INC     DPTR
   \   00007B   E5..         MOV     A,?V0 + 5
   \   00007D   F0           MOVX    @DPTR,A
     55          usiLesDecimales = (USI)fInputFloat; // Enleve les decimales du float
   \   00007E   85....       MOV     ?V0 + 4,?V0 + 0
   \   000081   85....       MOV     ?V0 + 5,?V0 + 1
   \   000084   85....       MOV     ?V0 + 6,?V0 + 2
   \   000087   85....       MOV     ?V0 + 7,?V0 + 3
   \   00008A   78..         MOV     R0,#?V0 + 4
   \   00008C   12....       LCALL   ?FLT_TO_L
   \   00008F   7408         MOV     A,#0x8
   \   000091   12....       LCALL   ?XSTACK_DISP0_8
   \   000094   E5..         MOV     A,?V0 + 4
   \   000096   F0           MOVX    @DPTR,A
   \   000097   A3           INC     DPTR
   \   000098   E5..         MOV     A,?V0 + 5
   \   00009A   F0           MOVX    @DPTR,A
     56          fTemporaire     = (fInputFloat - (float)usiLesDecimales) * 100;//Decimales 0-999
   \   00009B   7408         MOV     A,#0x8
   \   00009D   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A0   E0           MOVX    A,@DPTR
   \   0000A1   F5..         MOV     ?V0 + 4,A
   \   0000A3   A3           INC     DPTR
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   F5..         MOV     ?V0 + 5,A
   \   0000A7   E4           CLR     A
   \   0000A8   F5..         MOV     ?V0 + 6,A
   \   0000AA   F5..         MOV     ?V0 + 7,A
   \   0000AC   78..         MOV     R0,#?V0 + 4
   \   0000AE   12....       LCALL   ?UL_TO_FLT
   \   0000B1   78..         MOV     R0,#?V0 + 0
   \   0000B3   79..         MOV     R1,#?V0 + 4
   \   0000B5   12....       LCALL   ?FLT_SUB
   \   0000B8   90....       MOV     DPTR,#__Constant_42c80000
   \   0000BB   78..         MOV     R0,#?V0 + 4
   \   0000BD   12....       LCALL   ?L_MOV_X
   \   0000C0   78..         MOV     R0,#?V0 + 0
   \   0000C2   79..         MOV     R1,#?V0 + 4
   \   0000C4   12....       LCALL   ?FLT_MUL
   \   0000C7   740A         MOV     A,#0xa
   \   0000C9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CC   78..         MOV     R0,#?V0 + 0
   \   0000CE   12....       LCALL   ?L_MOV_TO_X
     57          usiLesDecimales = (USI)fTemporaire; //Conversion (.0 a .999) vers (0 a 999)
   \   0000D1   740A         MOV     A,#0xa
   \   0000D3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D6   12....       LCALL   ?XLOAD_R2345
   \   0000D9   12....       LCALL   ?R2345_FLT_TO_L
   \   0000DC   7408         MOV     A,#0x8
   \   0000DE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E1   E5..         MOV     A,?V0 + 0
   \   0000E3   F0           MOVX    @DPTR,A
   \   0000E4   A3           INC     DPTR
   \   0000E5   E5..         MOV     A,?V0 + 1
   \   0000E7   F0           MOVX    @DPTR,A
     58          
     59          for(i = 0; i < 3; i++) //Pour trois fois (Centaine, dizaine, unite)
   \   0000E8   7402         MOV     A,#0x2
   \   0000EA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000ED   7400         MOV     A,#0x0
   \   0000EF   F0           MOVX    @DPTR,A
   \   0000F0   A3           INC     DPTR
   \   0000F1   7400         MOV     A,#0x0
   \   0000F3   F0           MOVX    @DPTR,A
   \   0000F4   801E         SJMP    ??FloatToString_1
     60            {
     61             if(i == 0) // Pour les centaines
     62               {
     63                usiLesEntiersTemp = usiLesEntiers /  100;
     64                usiLesEntiers     = usiLesEntiers - (100 * usiLesEntiersTemp);
     65               }
     66             if(i == 1) // Pour les dizaines
     67               {
     68                usiLesEntiersTemp = usiLesEntiers /  10;
     69                usiLesEntiers     = usiLesEntiers - (10 * usiLesEntiersTemp);
     70               }
     71             if(i == 2) // Pour les unitees
     72               {
     73                usiLesEntiersTemp=usiLesEntiers;
     74               }
     75          
     76             switch(usiLesEntiersTemp) // Affiche un caractere correspondant a l'unite
     77               {                       // float lue
     78                case 0:
     79                   StringAdder('0');
     80                break;
     81          
     82                case 1:
     83                   StringAdder('1');
     84                break;
     85          
     86                case 2:
     87                   StringAdder('2');
     88                break;
     89          
     90                case 3:
     91                   StringAdder('3');
     92                break;
     93          
     94                case 4:
     95                   StringAdder('4');
     96                break;
     97          
     98                case 5:
     99                   StringAdder('5');
    100                break;
    101          
    102                case 6:
    103                   StringAdder('6');
    104                break;
    105          
    106                case 7:
    107                   StringAdder('7');
    108                break;
    109          
    110                case 8:
    111                   StringAdder('8');
    112                break;
    113          
    114                case 9:
    115                   StringAdder('9');
   \                     ??FloatToString_2:
   \   0000F6                ; Setup parameters for call to function Conversion::StringAdder(char)
   \   0000F6   7939         MOV     R1,#0x39
   \   0000F8   85..82       MOV     DPL,?XSP + 0
   \   0000FB   85..83       MOV     DPH,?XSP + 1
   \   0000FE   E0           MOVX    A,@DPTR
   \   0000FF   FA           MOV     R2,A
   \   000100   A3           INC     DPTR
   \   000101   E0           MOVX    A,@DPTR
   \   000102   FB           MOV     R3,A
   \   000103   12....       LCALL   ??StringAdder
    116                break;
   \                     ??FloatToString_3:
   \   000106   7402         MOV     A,#0x2
   \   000108   12....       LCALL   ?XSTACK_DISP0_8
   \   00010B   E0           MOVX    A,@DPTR
   \   00010C   2401         ADD     A,#0x1
   \   00010E   F0           MOVX    @DPTR,A
   \   00010F   A3           INC     DPTR
   \   000110   E0           MOVX    A,@DPTR
   \   000111   3400         ADDC    A,#0x0
   \   000113   F0           MOVX    @DPTR,A
   \                     ??FloatToString_1:
   \   000114   7402         MOV     A,#0x2
   \   000116   12....       LCALL   ?XSTACK_DISP0_8
   \   000119   C3           CLR     C
   \   00011A   E0           MOVX    A,@DPTR
   \   00011B   9403         SUBB    A,#0x3
   \   00011D   A3           INC     DPTR
   \   00011E   E0           MOVX    A,@DPTR
   \   00011F   9400         SUBB    A,#0x0
   \   000121   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000123   65D0         XRL     A,PSW
   \   000125   33           RLC     A
   \   000126   4003         JC      $+5
   \   000128   02....       LJMP    ??FloatToString_4
   \   00012B   7402         MOV     A,#0x2
   \   00012D   12....       LCALL   ?XSTACK_DISP0_8
   \   000130   E0           MOVX    A,@DPTR
   \   000131   F8           MOV     R0,A
   \   000132   A3           INC     DPTR
   \   000133   E0           MOVX    A,@DPTR
   \   000134   F9           MOV     R1,A
   \   000135   E8           MOV     A,R0
   \   000136   49           ORL     A,R1
   \   000137   7047         JNZ     ??FloatToString_5
   \   000139   7406         MOV     A,#0x6
   \   00013B   12....       LCALL   ?XSTACK_DISP0_8
   \   00013E   E0           MOVX    A,@DPTR
   \   00013F   F8           MOV     R0,A
   \   000140   A3           INC     DPTR
   \   000141   E0           MOVX    A,@DPTR
   \   000142   F9           MOV     R1,A
   \   000143   7A64         MOV     R2,#0x64
   \   000145   7B00         MOV     R3,#0x0
   \   000147   12....       LCALL   ?US_DIV_MOD
   \   00014A   7404         MOV     A,#0x4
   \   00014C   12....       LCALL   ?XSTACK_DISP0_8
   \   00014F   E8           MOV     A,R0
   \   000150   F0           MOVX    @DPTR,A
   \   000151   A3           INC     DPTR
   \   000152   E9           MOV     A,R1
   \   000153   F0           MOVX    @DPTR,A
   \   000154   7404         MOV     A,#0x4
   \   000156   12....       LCALL   ?XSTACK_DISP0_8
   \   000159   E0           MOVX    A,@DPTR
   \   00015A   F8           MOV     R0,A
   \   00015B   A3           INC     DPTR
   \   00015C   E0           MOVX    A,@DPTR
   \   00015D   F9           MOV     R1,A
   \   00015E   E8           MOV     A,R0
   \   00015F   75F064       MOV     B,#0x64
   \   000162   A4           MUL     AB
   \   000163   C8           XCH     A,R0
   \   000164   AAF0         MOV     R2,B
   \   000166   75F000       MOV     B,#0x0
   \   000169   A4           MUL     AB
   \   00016A   2A           ADD     A,R2
   \   00016B   FA           MOV     R2,A
   \   00016C   75F064       MOV     B,#0x64
   \   00016F   E9           MOV     A,R1
   \   000170   A4           MUL     AB
   \   000171   2A           ADD     A,R2
   \   000172   F9           MOV     R1,A
   \   000173   7406         MOV     A,#0x6
   \   000175   12....       LCALL   ?XSTACK_DISP0_8
   \   000178   C3           CLR     C
   \   000179   E0           MOVX    A,@DPTR
   \   00017A   98           SUBB    A,R0
   \   00017B   F0           MOVX    @DPTR,A
   \   00017C   A3           INC     DPTR
   \   00017D   E0           MOVX    A,@DPTR
   \   00017E   99           SUBB    A,R1
   \   00017F   F0           MOVX    @DPTR,A
   \                     ??FloatToString_5:
   \   000180   7402         MOV     A,#0x2
   \   000182   12....       LCALL   ?XSTACK_DISP0_8
   \   000185   E0           MOVX    A,@DPTR
   \   000186   6401         XRL     A,#0x1
   \   000188   7004         JNZ     ??FloatToString_6
   \   00018A   A3           INC     DPTR
   \   00018B   E0           MOVX    A,@DPTR
   \   00018C   6400         XRL     A,#0x0
   \                     ??FloatToString_6:
   \   00018E   7047         JNZ     ??FloatToString_7
   \   000190   7406         MOV     A,#0x6
   \   000192   12....       LCALL   ?XSTACK_DISP0_8
   \   000195   E0           MOVX    A,@DPTR
   \   000196   F8           MOV     R0,A
   \   000197   A3           INC     DPTR
   \   000198   E0           MOVX    A,@DPTR
   \   000199   F9           MOV     R1,A
   \   00019A   7A0A         MOV     R2,#0xa
   \   00019C   7B00         MOV     R3,#0x0
   \   00019E   12....       LCALL   ?US_DIV_MOD
   \   0001A1   7404         MOV     A,#0x4
   \   0001A3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A6   E8           MOV     A,R0
   \   0001A7   F0           MOVX    @DPTR,A
   \   0001A8   A3           INC     DPTR
   \   0001A9   E9           MOV     A,R1
   \   0001AA   F0           MOVX    @DPTR,A
   \   0001AB   7404         MOV     A,#0x4
   \   0001AD   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B0   E0           MOVX    A,@DPTR
   \   0001B1   F8           MOV     R0,A
   \   0001B2   A3           INC     DPTR
   \   0001B3   E0           MOVX    A,@DPTR
   \   0001B4   F9           MOV     R1,A
   \   0001B5   E8           MOV     A,R0
   \   0001B6   75F00A       MOV     B,#0xa
   \   0001B9   A4           MUL     AB
   \   0001BA   C8           XCH     A,R0
   \   0001BB   AAF0         MOV     R2,B
   \   0001BD   75F000       MOV     B,#0x0
   \   0001C0   A4           MUL     AB
   \   0001C1   2A           ADD     A,R2
   \   0001C2   FA           MOV     R2,A
   \   0001C3   75F00A       MOV     B,#0xa
   \   0001C6   E9           MOV     A,R1
   \   0001C7   A4           MUL     AB
   \   0001C8   2A           ADD     A,R2
   \   0001C9   F9           MOV     R1,A
   \   0001CA   7406         MOV     A,#0x6
   \   0001CC   12....       LCALL   ?XSTACK_DISP0_8
   \   0001CF   C3           CLR     C
   \   0001D0   E0           MOVX    A,@DPTR
   \   0001D1   98           SUBB    A,R0
   \   0001D2   F0           MOVX    @DPTR,A
   \   0001D3   A3           INC     DPTR
   \   0001D4   E0           MOVX    A,@DPTR
   \   0001D5   99           SUBB    A,R1
   \   0001D6   F0           MOVX    @DPTR,A
   \                     ??FloatToString_7:
   \   0001D7   7402         MOV     A,#0x2
   \   0001D9   12....       LCALL   ?XSTACK_DISP0_8
   \   0001DC   E0           MOVX    A,@DPTR
   \   0001DD   6402         XRL     A,#0x2
   \   0001DF   7004         JNZ     ??FloatToString_8
   \   0001E1   A3           INC     DPTR
   \   0001E2   E0           MOVX    A,@DPTR
   \   0001E3   6400         XRL     A,#0x0
   \                     ??FloatToString_8:
   \   0001E5   7014         JNZ     ??FloatToString_9
   \   0001E7   7406         MOV     A,#0x6
   \   0001E9   12....       LCALL   ?XSTACK_DISP0_8
   \   0001EC   E0           MOVX    A,@DPTR
   \   0001ED   F8           MOV     R0,A
   \   0001EE   A3           INC     DPTR
   \   0001EF   E0           MOVX    A,@DPTR
   \   0001F0   F9           MOV     R1,A
   \   0001F1   7404         MOV     A,#0x4
   \   0001F3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F6   E8           MOV     A,R0
   \   0001F7   F0           MOVX    @DPTR,A
   \   0001F8   A3           INC     DPTR
   \   0001F9   E9           MOV     A,R1
   \   0001FA   F0           MOVX    @DPTR,A
   \                     ??FloatToString_9:
   \   0001FB   7404         MOV     A,#0x4
   \   0001FD   12....       LCALL   ?XSTACK_DISP0_8
   \   000200   E0           MOVX    A,@DPTR
   \   000201   F5..         MOV     ?V0 + 0,A
   \   000203   A3           INC     DPTR
   \   000204   E0           MOVX    A,@DPTR
   \   000205   F5..         MOV     ?V0 + 1,A
   \   000207   78..         MOV     R0,#?V0 + 0
   \   000209   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for FloatToString>_0`:
   \   00020C   0000         DW        0
   \   00020E   09           DB        9
   \   00020F   ....         DW        ??FloatToString_3
   \   000211   ....         DW        ??FloatToString_10
   \   000213   ....         DW        ??FloatToString_11
   \   000215   ....         DW        ??FloatToString_12
   \   000217   ....         DW        ??FloatToString_13
   \   000219   ....         DW        ??FloatToString_14
   \   00021B   ....         DW        ??FloatToString_15
   \   00021D   ....         DW        ??FloatToString_16
   \   00021F   ....         DW        ??FloatToString_17
   \   000221   ....         DW        ??FloatToString_18
   \   000223   ....         DW        ??FloatToString_2
   \                     ??FloatToString_10:
   \   000225                ; Setup parameters for call to function Conversion::StringAdder(char)
   \   000225   7930         MOV     R1,#0x30
   \   000227   85..82       MOV     DPL,?XSP + 0
   \   00022A   85..83       MOV     DPH,?XSP + 1
   \   00022D   E0           MOVX    A,@DPTR
   \   00022E   FA           MOV     R2,A
   \   00022F   A3           INC     DPTR
   \   000230   E0           MOVX    A,@DPTR
   \   000231   FB           MOV     R3,A
   \   000232   12....       LCALL   ??StringAdder
   \   000235   02....       LJMP    ??FloatToString_3
   \                     ??FloatToString_11:
   \   000238                ; Setup parameters for call to function Conversion::StringAdder(char)
   \   000238   7931         MOV     R1,#0x31
   \   00023A   85..82       MOV     DPL,?XSP + 0
   \   00023D   85..83       MOV     DPH,?XSP + 1
   \   000240   E0           MOVX    A,@DPTR
   \   000241   FA           MOV     R2,A
   \   000242   A3           INC     DPTR
   \   000243   E0           MOVX    A,@DPTR
   \   000244   FB           MOV     R3,A
   \   000245   12....       LCALL   ??StringAdder
   \   000248   02....       LJMP    ??FloatToString_3
   \                     ??FloatToString_12:
   \   00024B                ; Setup parameters for call to function Conversion::StringAdder(char)
   \   00024B   7932         MOV     R1,#0x32
   \   00024D   85..82       MOV     DPL,?XSP + 0
   \   000250   85..83       MOV     DPH,?XSP + 1
   \   000253   E0           MOVX    A,@DPTR
   \   000254   FA           MOV     R2,A
   \   000255   A3           INC     DPTR
   \   000256   E0           MOVX    A,@DPTR
   \   000257   FB           MOV     R3,A
   \   000258   12....       LCALL   ??StringAdder
   \   00025B   02....       LJMP    ??FloatToString_3
   \                     ??FloatToString_13:
   \   00025E                ; Setup parameters for call to function Conversion::StringAdder(char)
   \   00025E   7933         MOV     R1,#0x33
   \   000260   85..82       MOV     DPL,?XSP + 0
   \   000263   85..83       MOV     DPH,?XSP + 1
   \   000266   E0           MOVX    A,@DPTR
   \   000267   FA           MOV     R2,A
   \   000268   A3           INC     DPTR
   \   000269   E0           MOVX    A,@DPTR
   \   00026A   FB           MOV     R3,A
   \   00026B   12....       LCALL   ??StringAdder
   \   00026E   02....       LJMP    ??FloatToString_3
   \                     ??FloatToString_14:
   \   000271                ; Setup parameters for call to function Conversion::StringAdder(char)
   \   000271   7934         MOV     R1,#0x34
   \   000273   85..82       MOV     DPL,?XSP + 0
   \   000276   85..83       MOV     DPH,?XSP + 1
   \   000279   E0           MOVX    A,@DPTR
   \   00027A   FA           MOV     R2,A
   \   00027B   A3           INC     DPTR
   \   00027C   E0           MOVX    A,@DPTR
   \   00027D   FB           MOV     R3,A
   \   00027E   12....       LCALL   ??StringAdder
   \   000281   02....       LJMP    ??FloatToString_3
   \                     ??FloatToString_15:
   \   000284                ; Setup parameters for call to function Conversion::StringAdder(char)
   \   000284   7935         MOV     R1,#0x35
   \   000286   85..82       MOV     DPL,?XSP + 0
   \   000289   85..83       MOV     DPH,?XSP + 1
   \   00028C   E0           MOVX    A,@DPTR
   \   00028D   FA           MOV     R2,A
   \   00028E   A3           INC     DPTR
   \   00028F   E0           MOVX    A,@DPTR
   \   000290   FB           MOV     R3,A
   \   000291   12....       LCALL   ??StringAdder
   \   000294   02....       LJMP    ??FloatToString_3
   \                     ??FloatToString_16:
   \   000297                ; Setup parameters for call to function Conversion::StringAdder(char)
   \   000297   7936         MOV     R1,#0x36
   \   000299   85..82       MOV     DPL,?XSP + 0
   \   00029C   85..83       MOV     DPH,?XSP + 1
   \   00029F   E0           MOVX    A,@DPTR
   \   0002A0   FA           MOV     R2,A
   \   0002A1   A3           INC     DPTR
   \   0002A2   E0           MOVX    A,@DPTR
   \   0002A3   FB           MOV     R3,A
   \   0002A4   12....       LCALL   ??StringAdder
   \   0002A7   02....       LJMP    ??FloatToString_3
   \                     ??FloatToString_17:
   \   0002AA                ; Setup parameters for call to function Conversion::StringAdder(char)
   \   0002AA   7937         MOV     R1,#0x37
   \   0002AC   85..82       MOV     DPL,?XSP + 0
   \   0002AF   85..83       MOV     DPH,?XSP + 1
   \   0002B2   E0           MOVX    A,@DPTR
   \   0002B3   FA           MOV     R2,A
   \   0002B4   A3           INC     DPTR
   \   0002B5   E0           MOVX    A,@DPTR
   \   0002B6   FB           MOV     R3,A
   \   0002B7   12....       LCALL   ??StringAdder
   \   0002BA   02....       LJMP    ??FloatToString_3
   \                     ??FloatToString_18:
   \   0002BD                ; Setup parameters for call to function Conversion::StringAdder(char)
   \   0002BD   7938         MOV     R1,#0x38
   \   0002BF   85..82       MOV     DPL,?XSP + 0
   \   0002C2   85..83       MOV     DPH,?XSP + 1
   \   0002C5   E0           MOVX    A,@DPTR
   \   0002C6   FA           MOV     R2,A
   \   0002C7   A3           INC     DPTR
   \   0002C8   E0           MOVX    A,@DPTR
   \   0002C9   FB           MOV     R3,A
   \   0002CA   12....       LCALL   ??StringAdder
   \   0002CD   02....       LJMP    ??FloatToString_3
    117               }
    118             }
    119          
    120          StringAdder('.'); // Affiche la satane virgule
   \                     ??FloatToString_4:
   \   0002D0                ; Setup parameters for call to function Conversion::StringAdder(char)
   \   0002D0   792E         MOV     R1,#0x2e
   \   0002D2   85..82       MOV     DPL,?XSP + 0
   \   0002D5   85..83       MOV     DPH,?XSP + 1
   \   0002D8   E0           MOVX    A,@DPTR
   \   0002D9   FA           MOV     R2,A
   \   0002DA   A3           INC     DPTR
   \   0002DB   E0           MOVX    A,@DPTR
   \   0002DC   FB           MOV     R3,A
   \   0002DD   12....       LCALL   ??StringAdder
    121          
    122          for(i = 0; i < 2; i++) //Pour deux fois (Dixieme, centieme)
   \   0002E0   7402         MOV     A,#0x2
   \   0002E2   12....       LCALL   ?XSTACK_DISP0_8
   \   0002E5   7400         MOV     A,#0x0
   \   0002E7   F0           MOVX    @DPTR,A
   \   0002E8   A3           INC     DPTR
   \   0002E9   7400         MOV     A,#0x0
   \   0002EB   F0           MOVX    @DPTR,A
   \   0002EC   801E         SJMP    ??FloatToString_19
    123            {
    124             if(i == 0)          // Pour les dixiemes
    125               {
    126                usiDecimalesTemp = usiLesDecimales /  10;
    127               }
    128             if(i == 1)          // Pour les centiemes
    129               {
    130                usiDecimalesTemp = usiLesDecimales - (10 * usiDecimalesTemp) ;
    131               }
    132          
    133             switch(usiDecimalesTemp) // Affiche un caractere correspondant a l'unite
    134               {                      // float lue
    135                case 0:
    136                   StringAdder('0');
    137                break;
    138          
    139                case 1:
    140                   StringAdder('1');
    141                break;
    142          
    143                case 2:
    144                   StringAdder('2');
    145                break;
    146          
    147                case 3:
    148                   StringAdder('3');
    149                break;
    150          
    151                case 4:
    152                   StringAdder('4');
    153                break;
    154          
    155                case 5:
    156                   StringAdder('5');
    157                break;
    158          
    159                case 6:
    160                   StringAdder('6');
    161                break;
    162          
    163                case 7:
    164                   StringAdder('7');
    165                break;
    166          
    167                case 8:
    168                   StringAdder('8');
    169                break;
    170          
    171                case 9:
    172                   StringAdder('9');
   \                     ??FloatToString_20:
   \   0002EE                ; Setup parameters for call to function Conversion::StringAdder(char)
   \   0002EE   7939         MOV     R1,#0x39
   \   0002F0   85..82       MOV     DPL,?XSP + 0
   \   0002F3   85..83       MOV     DPH,?XSP + 1
   \   0002F6   E0           MOVX    A,@DPTR
   \   0002F7   FA           MOV     R2,A
   \   0002F8   A3           INC     DPTR
   \   0002F9   E0           MOVX    A,@DPTR
   \   0002FA   FB           MOV     R3,A
   \   0002FB   12....       LCALL   ??StringAdder
    173                break;
   \                     ??FloatToString_21:
   \   0002FE   7402         MOV     A,#0x2
   \   000300   12....       LCALL   ?XSTACK_DISP0_8
   \   000303   E0           MOVX    A,@DPTR
   \   000304   2401         ADD     A,#0x1
   \   000306   F0           MOVX    @DPTR,A
   \   000307   A3           INC     DPTR
   \   000308   E0           MOVX    A,@DPTR
   \   000309   3400         ADDC    A,#0x0
   \   00030B   F0           MOVX    @DPTR,A
   \                     ??FloatToString_19:
   \   00030C   7402         MOV     A,#0x2
   \   00030E   12....       LCALL   ?XSTACK_DISP0_8
   \   000311   C3           CLR     C
   \   000312   E0           MOVX    A,@DPTR
   \   000313   9402         SUBB    A,#0x2
   \   000315   A3           INC     DPTR
   \   000316   E0           MOVX    A,@DPTR
   \   000317   9400         SUBB    A,#0x0
   \   000319   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00031B   65D0         XRL     A,PSW
   \   00031D   33           RLC     A
   \   00031E   4003         JC      $+5
   \   000320   02....       LJMP    ??FloatToString_22
   \   000323   7402         MOV     A,#0x2
   \   000325   12....       LCALL   ?XSTACK_DISP0_8
   \   000328   E0           MOVX    A,@DPTR
   \   000329   F8           MOV     R0,A
   \   00032A   A3           INC     DPTR
   \   00032B   E0           MOVX    A,@DPTR
   \   00032C   F9           MOV     R1,A
   \   00032D   E8           MOV     A,R0
   \   00032E   49           ORL     A,R1
   \   00032F   7019         JNZ     ??FloatToString_23
   \   000331   7408         MOV     A,#0x8
   \   000333   12....       LCALL   ?XSTACK_DISP0_8
   \   000336   E0           MOVX    A,@DPTR
   \   000337   F8           MOV     R0,A
   \   000338   A3           INC     DPTR
   \   000339   E0           MOVX    A,@DPTR
   \   00033A   F9           MOV     R1,A
   \   00033B   7A0A         MOV     R2,#0xa
   \   00033D   7B00         MOV     R3,#0x0
   \   00033F   12....       LCALL   ?US_DIV_MOD
   \   000342   88..         MOV     ?V0 + 0,R0
   \   000344   89..         MOV     ?V0 + 1,R1
   \   000346   AE..         MOV     R6,?V0 + 0
   \   000348   AF..         MOV     R7,?V0 + 1
   \                     ??FloatToString_23:
   \   00034A   7402         MOV     A,#0x2
   \   00034C   12....       LCALL   ?XSTACK_DISP0_8
   \   00034F   E0           MOVX    A,@DPTR
   \   000350   6401         XRL     A,#0x1
   \   000352   7004         JNZ     ??FloatToString_24
   \   000354   A3           INC     DPTR
   \   000355   E0           MOVX    A,@DPTR
   \   000356   6400         XRL     A,#0x0
   \                     ??FloatToString_24:
   \   000358   7022         JNZ     ??FloatToString_25
   \   00035A   7408         MOV     A,#0x8
   \   00035C   12....       LCALL   ?XSTACK_DISP0_8
   \   00035F   EE           MOV     A,R6
   \   000360   75F00A       MOV     B,#0xa
   \   000363   A4           MUL     AB
   \   000364   CE           XCH     A,R6
   \   000365   A8F0         MOV     R0,B
   \   000367   75F000       MOV     B,#0x0
   \   00036A   A4           MUL     AB
   \   00036B   28           ADD     A,R0
   \   00036C   F8           MOV     R0,A
   \   00036D   75F00A       MOV     B,#0xa
   \   000370   EF           MOV     A,R7
   \   000371   A4           MUL     AB
   \   000372   28           ADD     A,R0
   \   000373   FF           MOV     R7,A
   \   000374   E0           MOVX    A,@DPTR
   \   000375   C3           CLR     C
   \   000376   9E           SUBB    A,R6
   \   000377   FE           MOV     R6,A
   \   000378   A3           INC     DPTR
   \   000379   E0           MOVX    A,@DPTR
   \   00037A   9F           SUBB    A,R7
   \   00037B   FF           MOV     R7,A
   \                     ??FloatToString_25:
   \   00037C   8E..         MOV     ?V0 + 0,R6
   \   00037E   8F..         MOV     ?V0 + 1,R7
   \   000380   78..         MOV     R0,#?V0 + 0
   \   000382   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for FloatToString>_1`:
   \   000385   0000         DW        0
   \   000387   09           DB        9
   \   000388   ....         DW        ??FloatToString_21
   \   00038A   ....         DW        ??FloatToString_26
   \   00038C   ....         DW        ??FloatToString_27
   \   00038E   ....         DW        ??FloatToString_28
   \   000390   ....         DW        ??FloatToString_29
   \   000392   ....         DW        ??FloatToString_30
   \   000394   ....         DW        ??FloatToString_31
   \   000396   ....         DW        ??FloatToString_32
   \   000398   ....         DW        ??FloatToString_33
   \   00039A   ....         DW        ??FloatToString_34
   \   00039C   ....         DW        ??FloatToString_20
   \                     ??FloatToString_26:
   \   00039E                ; Setup parameters for call to function Conversion::StringAdder(char)
   \   00039E   7930         MOV     R1,#0x30
   \   0003A0   85..82       MOV     DPL,?XSP + 0
   \   0003A3   85..83       MOV     DPH,?XSP + 1
   \   0003A6   E0           MOVX    A,@DPTR
   \   0003A7   FA           MOV     R2,A
   \   0003A8   A3           INC     DPTR
   \   0003A9   E0           MOVX    A,@DPTR
   \   0003AA   FB           MOV     R3,A
   \   0003AB   12....       LCALL   ??StringAdder
   \   0003AE   02....       LJMP    ??FloatToString_21
   \                     ??FloatToString_27:
   \   0003B1                ; Setup parameters for call to function Conversion::StringAdder(char)
   \   0003B1   7931         MOV     R1,#0x31
   \   0003B3   85..82       MOV     DPL,?XSP + 0
   \   0003B6   85..83       MOV     DPH,?XSP + 1
   \   0003B9   E0           MOVX    A,@DPTR
   \   0003BA   FA           MOV     R2,A
   \   0003BB   A3           INC     DPTR
   \   0003BC   E0           MOVX    A,@DPTR
   \   0003BD   FB           MOV     R3,A
   \   0003BE   12....       LCALL   ??StringAdder
   \   0003C1   02....       LJMP    ??FloatToString_21
   \                     ??FloatToString_28:
   \   0003C4                ; Setup parameters for call to function Conversion::StringAdder(char)
   \   0003C4   7932         MOV     R1,#0x32
   \   0003C6   85..82       MOV     DPL,?XSP + 0
   \   0003C9   85..83       MOV     DPH,?XSP + 1
   \   0003CC   E0           MOVX    A,@DPTR
   \   0003CD   FA           MOV     R2,A
   \   0003CE   A3           INC     DPTR
   \   0003CF   E0           MOVX    A,@DPTR
   \   0003D0   FB           MOV     R3,A
   \   0003D1   12....       LCALL   ??StringAdder
   \   0003D4   02....       LJMP    ??FloatToString_21
   \                     ??FloatToString_29:
   \   0003D7                ; Setup parameters for call to function Conversion::StringAdder(char)
   \   0003D7   7933         MOV     R1,#0x33
   \   0003D9   85..82       MOV     DPL,?XSP + 0
   \   0003DC   85..83       MOV     DPH,?XSP + 1
   \   0003DF   E0           MOVX    A,@DPTR
   \   0003E0   FA           MOV     R2,A
   \   0003E1   A3           INC     DPTR
   \   0003E2   E0           MOVX    A,@DPTR
   \   0003E3   FB           MOV     R3,A
   \   0003E4   12....       LCALL   ??StringAdder
   \   0003E7   02....       LJMP    ??FloatToString_21
   \                     ??FloatToString_30:
   \   0003EA                ; Setup parameters for call to function Conversion::StringAdder(char)
   \   0003EA   7934         MOV     R1,#0x34
   \   0003EC   85..82       MOV     DPL,?XSP + 0
   \   0003EF   85..83       MOV     DPH,?XSP + 1
   \   0003F2   E0           MOVX    A,@DPTR
   \   0003F3   FA           MOV     R2,A
   \   0003F4   A3           INC     DPTR
   \   0003F5   E0           MOVX    A,@DPTR
   \   0003F6   FB           MOV     R3,A
   \   0003F7   12....       LCALL   ??StringAdder
   \   0003FA   02....       LJMP    ??FloatToString_21
   \                     ??FloatToString_31:
   \   0003FD                ; Setup parameters for call to function Conversion::StringAdder(char)
   \   0003FD   7935         MOV     R1,#0x35
   \   0003FF   85..82       MOV     DPL,?XSP + 0
   \   000402   85..83       MOV     DPH,?XSP + 1
   \   000405   E0           MOVX    A,@DPTR
   \   000406   FA           MOV     R2,A
   \   000407   A3           INC     DPTR
   \   000408   E0           MOVX    A,@DPTR
   \   000409   FB           MOV     R3,A
   \   00040A   12....       LCALL   ??StringAdder
   \   00040D   02....       LJMP    ??FloatToString_21
   \                     ??FloatToString_32:
   \   000410                ; Setup parameters for call to function Conversion::StringAdder(char)
   \   000410   7936         MOV     R1,#0x36
   \   000412   85..82       MOV     DPL,?XSP + 0
   \   000415   85..83       MOV     DPH,?XSP + 1
   \   000418   E0           MOVX    A,@DPTR
   \   000419   FA           MOV     R2,A
   \   00041A   A3           INC     DPTR
   \   00041B   E0           MOVX    A,@DPTR
   \   00041C   FB           MOV     R3,A
   \   00041D   12....       LCALL   ??StringAdder
   \   000420   02....       LJMP    ??FloatToString_21
   \                     ??FloatToString_33:
   \   000423                ; Setup parameters for call to function Conversion::StringAdder(char)
   \   000423   7937         MOV     R1,#0x37
   \   000425   85..82       MOV     DPL,?XSP + 0
   \   000428   85..83       MOV     DPH,?XSP + 1
   \   00042B   E0           MOVX    A,@DPTR
   \   00042C   FA           MOV     R2,A
   \   00042D   A3           INC     DPTR
   \   00042E   E0           MOVX    A,@DPTR
   \   00042F   FB           MOV     R3,A
   \   000430   12....       LCALL   ??StringAdder
   \   000433   02....       LJMP    ??FloatToString_21
   \                     ??FloatToString_34:
   \   000436                ; Setup parameters for call to function Conversion::StringAdder(char)
   \   000436   7938         MOV     R1,#0x38
   \   000438   85..82       MOV     DPL,?XSP + 0
   \   00043B   85..83       MOV     DPH,?XSP + 1
   \   00043E   E0           MOVX    A,@DPTR
   \   00043F   FA           MOV     R2,A
   \   000440   A3           INC     DPTR
   \   000441   E0           MOVX    A,@DPTR
   \   000442   FB           MOV     R3,A
   \   000443   12....       LCALL   ??StringAdder
   \   000446   02....       LJMP    ??FloatToString_21
    174               }
    175            }
    176          return(*StringFinal);
   \                     ??FloatToString_22:
   \   000449   90....       MOV     DPTR,#??StringFinal
   \   00044C   E0           MOVX    A,@DPTR
   \   00044D   F8           MOV     R0,A
   \   00044E   A3           INC     DPTR
   \   00044F   E0           MOVX    A,@DPTR
   \   000450   F583         MOV     DPH,A
   \   000452   8882         MOV     DPL,R0
   \   000454   E0           MOVX    A,@DPTR
   \   000455   F9           MOV     R1,A
   \   000456   740E         MOV     A,#0xe
   \   000458   12....       LCALL   ?DEALLOC_XSTACK8
   \   00045B   7F08         MOV     R7,#0x8
   \   00045D   02....       LJMP    ?FUNC_LEAVE_XDATA
    177          }
    178          
    179          
    180          
    181          
    182          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    183          UC Conversion :: ASCIItoHEX(UC ASCIItoConvert)
   \                     ??ASCIItoHEX:
    184          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    185          UC ConvertedToHEX = 0;
   \   000004   7900         MOV     R1,#0x0
    186          
    187          switch(ConvertedToHEX)
   \   000006   E9           MOV     A,R1
   \   000007   12....       LCALL   ?UC_SWITCH_DENSE
   \                     `?<Jumptable for ASCIItoHEX>_0`:
   \   00000A   30           DB        48
   \   00000B   2A           DB        42
   \   00000C   ....         DW        ??ASCIItoHEX_1
   \   00000E   ....         DW        ??ASCIItoHEX_2
   \   000010   ....         DW        ??ASCIItoHEX_3
   \   000012   ....         DW        ??ASCIItoHEX_4
   \   000014   ....         DW        ??ASCIItoHEX_5
   \   000016   ....         DW        ??ASCIItoHEX_6
   \   000018   ....         DW        ??ASCIItoHEX_7
   \   00001A   ....         DW        ??ASCIItoHEX_8
   \   00001C   ....         DW        ??ASCIItoHEX_9
   \   00001E   ....         DW        ??ASCIItoHEX_10
   \   000020   ....         DW        ??ASCIItoHEX_11
   \   000022   ....         DW        ??ASCIItoHEX_1
   \   000024   ....         DW        ??ASCIItoHEX_1
   \   000026   ....         DW        ??ASCIItoHEX_1
   \   000028   ....         DW        ??ASCIItoHEX_1
   \   00002A   ....         DW        ??ASCIItoHEX_1
   \   00002C   ....         DW        ??ASCIItoHEX_1
   \   00002E   ....         DW        ??ASCIItoHEX_1
   \   000030   ....         DW        ??ASCIItoHEX_12
   \   000032   ....         DW        ??ASCIItoHEX_13
   \   000034   ....         DW        ??ASCIItoHEX_14
   \   000036   ....         DW        ??ASCIItoHEX_15
   \   000038   ....         DW        ??ASCIItoHEX_16
   \   00003A   ....         DW        ??ASCIItoHEX_17
   \   00003C   ....         DW        ??ASCIItoHEX_18
   \   00003E   ....         DW        ??ASCIItoHEX_19
   \   000040   ....         DW        ??ASCIItoHEX_20
   \   000042   ....         DW        ??ASCIItoHEX_21
   \   000044   ....         DW        ??ASCIItoHEX_22
   \   000046   ....         DW        ??ASCIItoHEX_23
   \   000048   ....         DW        ??ASCIItoHEX_24
   \   00004A   ....         DW        ??ASCIItoHEX_25
   \   00004C   ....         DW        ??ASCIItoHEX_26
   \   00004E   ....         DW        ??ASCIItoHEX_27
   \   000050   ....         DW        ??ASCIItoHEX_28
   \   000052   ....         DW        ??ASCIItoHEX_29
   \   000054   ....         DW        ??ASCIItoHEX_30
   \   000056   ....         DW        ??ASCIItoHEX_31
   \   000058   ....         DW        ??ASCIItoHEX_32
   \   00005A   ....         DW        ??ASCIItoHEX_33
   \   00005C   ....         DW        ??ASCIItoHEX_34
   \   00005E   ....         DW        ??ASCIItoHEX_35
   \   000060   ....         DW        ??ASCIItoHEX_36
   \   000062   ....         DW        ??ASCIItoHEX_37
    188              {
    189               case '0':
    190                ConvertedToHEX = 0x30;
   \                     ??ASCIItoHEX_2:
   \   000064   7930         MOV     R1,#0x30
    191               break;
   \   000066   02....       LJMP    ??ASCIItoHEX_1
    192          
    193               case '1':
    194                ConvertedToHEX = 0x31;
   \                     ??ASCIItoHEX_3:
   \   000069   7931         MOV     R1,#0x31
    195               break;
   \   00006B   02....       LJMP    ??ASCIItoHEX_1
    196          
    197               case '2':
    198                ConvertedToHEX = 0x32;
   \                     ??ASCIItoHEX_4:
   \   00006E   7932         MOV     R1,#0x32
    199               break;
   \   000070   02....       LJMP    ??ASCIItoHEX_1
    200          
    201               case '3':
    202                ConvertedToHEX = 0x33;
   \                     ??ASCIItoHEX_5:
   \   000073   7933         MOV     R1,#0x33
    203               break;
   \   000075   807E         SJMP    ??ASCIItoHEX_1
    204          
    205               case '4':
    206                ConvertedToHEX = 0x34;
   \                     ??ASCIItoHEX_6:
   \   000077   7934         MOV     R1,#0x34
    207               break;
   \   000079   807A         SJMP    ??ASCIItoHEX_1
    208          
    209               case '5':
    210                ConvertedToHEX = 0x35;
   \                     ??ASCIItoHEX_7:
   \   00007B   7935         MOV     R1,#0x35
    211               break;
   \   00007D   8076         SJMP    ??ASCIItoHEX_1
    212          
    213               case '6':
    214                ConvertedToHEX = 0x36;
   \                     ??ASCIItoHEX_8:
   \   00007F   7936         MOV     R1,#0x36
    215               break;
   \   000081   8072         SJMP    ??ASCIItoHEX_1
    216          
    217               case '7':
    218                ConvertedToHEX = 0x37;
   \                     ??ASCIItoHEX_9:
   \   000083   7937         MOV     R1,#0x37
    219               break;
   \   000085   806E         SJMP    ??ASCIItoHEX_1
    220          
    221               case '8':
    222                ConvertedToHEX = 0x38;
   \                     ??ASCIItoHEX_10:
   \   000087   7938         MOV     R1,#0x38
    223               break;
   \   000089   806A         SJMP    ??ASCIItoHEX_1
    224          
    225               case '9':
    226                ConvertedToHEX = 0x39;
   \                     ??ASCIItoHEX_11:
   \   00008B   7939         MOV     R1,#0x39
    227               break;
   \   00008D   8066         SJMP    ??ASCIItoHEX_1
    228          
    229               case 'A':
    230                ConvertedToHEX = 0x41;
   \                     ??ASCIItoHEX_12:
   \   00008F   7941         MOV     R1,#0x41
    231               break;
   \   000091   8062         SJMP    ??ASCIItoHEX_1
    232          
    233               case 'B':
    234                ConvertedToHEX = 0x42;
   \                     ??ASCIItoHEX_13:
   \   000093   7942         MOV     R1,#0x42
    235               break;
   \   000095   805E         SJMP    ??ASCIItoHEX_1
    236               
    237               case 'C':
    238                ConvertedToHEX = 0x43;
   \                     ??ASCIItoHEX_14:
   \   000097   7943         MOV     R1,#0x43
    239               break;
   \   000099   805A         SJMP    ??ASCIItoHEX_1
    240          
    241               case 'D':
    242                ConvertedToHEX = 0x44;
   \                     ??ASCIItoHEX_15:
   \   00009B   7944         MOV     R1,#0x44
    243               break;
   \   00009D   8056         SJMP    ??ASCIItoHEX_1
    244          
    245               case 'E':
    246                ConvertedToHEX = 0x45;
   \                     ??ASCIItoHEX_16:
   \   00009F   7945         MOV     R1,#0x45
    247               break;
   \   0000A1   8052         SJMP    ??ASCIItoHEX_1
    248          
    249               case 'F':
    250                ConvertedToHEX = 0x46;
   \                     ??ASCIItoHEX_17:
   \   0000A3   7946         MOV     R1,#0x46
    251               break;
   \   0000A5   804E         SJMP    ??ASCIItoHEX_1
    252          
    253               case 'G':
    254                ConvertedToHEX = 0x47;
   \                     ??ASCIItoHEX_18:
   \   0000A7   7947         MOV     R1,#0x47
    255               break;
   \   0000A9   804A         SJMP    ??ASCIItoHEX_1
    256          
    257               case 'H':
    258                ConvertedToHEX = 0x48;
   \                     ??ASCIItoHEX_19:
   \   0000AB   7948         MOV     R1,#0x48
    259               break;
   \   0000AD   8046         SJMP    ??ASCIItoHEX_1
    260          
    261               case 'I':
    262                ConvertedToHEX = 0x49;
   \                     ??ASCIItoHEX_20:
   \   0000AF   7949         MOV     R1,#0x49
    263               break;
   \   0000B1   8042         SJMP    ??ASCIItoHEX_1
    264          
    265               case 'J':
    266                ConvertedToHEX = 0x4A;
   \                     ??ASCIItoHEX_21:
   \   0000B3   794A         MOV     R1,#0x4a
    267               break;
   \   0000B5   803E         SJMP    ??ASCIItoHEX_1
    268          
    269               case 'K':
    270                ConvertedToHEX = 0x4B;
   \                     ??ASCIItoHEX_22:
   \   0000B7   794B         MOV     R1,#0x4b
    271               break;
   \   0000B9   803A         SJMP    ??ASCIItoHEX_1
    272          
    273               case 'L':
    274                ConvertedToHEX = 0x4C;
   \                     ??ASCIItoHEX_23:
   \   0000BB   794C         MOV     R1,#0x4c
    275               break;
   \   0000BD   8036         SJMP    ??ASCIItoHEX_1
    276          
    277               case 'M':
    278                ConvertedToHEX = 0x4D;
   \                     ??ASCIItoHEX_24:
   \   0000BF   794D         MOV     R1,#0x4d
    279               break;
   \   0000C1   8032         SJMP    ??ASCIItoHEX_1
    280          
    281               case 'N':
    282                ConvertedToHEX = 0x4E;
   \                     ??ASCIItoHEX_25:
   \   0000C3   794E         MOV     R1,#0x4e
    283               break;
   \   0000C5   802E         SJMP    ??ASCIItoHEX_1
    284          
    285               case 'O':
    286                ConvertedToHEX = 0x4F;
   \                     ??ASCIItoHEX_26:
   \   0000C7   794F         MOV     R1,#0x4f
    287               break;
   \   0000C9   802A         SJMP    ??ASCIItoHEX_1
    288          
    289               case 'P':
    290                ConvertedToHEX = 0x50;
   \                     ??ASCIItoHEX_27:
   \   0000CB   7950         MOV     R1,#0x50
    291               break;
   \   0000CD   8026         SJMP    ??ASCIItoHEX_1
    292          
    293               case 'Q':
    294                ConvertedToHEX = 0x51;
   \                     ??ASCIItoHEX_28:
   \   0000CF   7951         MOV     R1,#0x51
    295               break;
   \   0000D1   8022         SJMP    ??ASCIItoHEX_1
    296          
    297               case 'R':
    298                ConvertedToHEX = 0x52;
   \                     ??ASCIItoHEX_29:
   \   0000D3   7952         MOV     R1,#0x52
    299               break;
   \   0000D5   801E         SJMP    ??ASCIItoHEX_1
    300          
    301               case 'S':
    302                ConvertedToHEX = 0x53;
   \                     ??ASCIItoHEX_30:
   \   0000D7   7953         MOV     R1,#0x53
    303               break;
   \   0000D9   801A         SJMP    ??ASCIItoHEX_1
    304          
    305               case 'T':
    306                ConvertedToHEX = 0x54;
   \                     ??ASCIItoHEX_31:
   \   0000DB   7954         MOV     R1,#0x54
    307               break;
   \   0000DD   8016         SJMP    ??ASCIItoHEX_1
    308          
    309               case 'U':
    310                ConvertedToHEX = 0x55;
   \                     ??ASCIItoHEX_32:
   \   0000DF   7955         MOV     R1,#0x55
    311               break;
   \   0000E1   8012         SJMP    ??ASCIItoHEX_1
    312          
    313               case 'V':
    314                ConvertedToHEX = 0x56;
   \                     ??ASCIItoHEX_33:
   \   0000E3   7956         MOV     R1,#0x56
    315               break;
   \   0000E5   800E         SJMP    ??ASCIItoHEX_1
    316          
    317               case 'W':
    318                ConvertedToHEX = 0x57;
   \                     ??ASCIItoHEX_34:
   \   0000E7   7957         MOV     R1,#0x57
    319               break;
   \   0000E9   800A         SJMP    ??ASCIItoHEX_1
    320          
    321               case 'X':
    322                ConvertedToHEX = 0x58;
   \                     ??ASCIItoHEX_35:
   \   0000EB   7958         MOV     R1,#0x58
    323               break;
   \   0000ED   8006         SJMP    ??ASCIItoHEX_1
    324          
    325               case 'Y':
    326                ConvertedToHEX = 0x59;
   \                     ??ASCIItoHEX_36:
   \   0000EF   7959         MOV     R1,#0x59
    327               break;
   \   0000F1   8002         SJMP    ??ASCIItoHEX_1
    328          
    329               case 'Z':
    330                ConvertedToHEX = 0x5A;
   \                     ??ASCIItoHEX_37:
   \   0000F3   795A         MOV     R1,#0x5a
    331               break;     
    332             }
    333          
    334          return(ConvertedToHEX);
   \                     ??ASCIItoHEX_1:
   \   0000F5   D083         POP     DPH
   \   0000F7   D082         POP     DPL
   \   0000F9   22           RET
    335          }
    336          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    337          UC Conversion :: HEXtoASCII(UC HEXtoConvert)
   \                     ??HEXtoASCII:
    338          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   F8           MOV     R0,A
    339          UC ConvertedToAscii = 0;
   \   000006   7900         MOV     R1,#0x0
    340          
    341          if((HEXtoConvert >= 0x41) && (HEXtoConvert <= 0x5A)) // Si l'hex est une lettre majuscule
   \   000008   E8           MOV     A,R0
   \   000009   C3           CLR     C
   \   00000A   9441         SUBB    A,#0x41
   \   00000C   C3           CLR     C
   \   00000D   941A         SUBB    A,#0x1a
   \   00000F   4003         JC      $+5
   \   000011   02....       LJMP    ??HEXtoASCII_1
    342            {
    343             switch(HEXtoConvert)
   \   000014   E8           MOV     A,R0
   \   000015   12....       LCALL   ?UC_SWITCH_DENSE
   \                     `?<Jumptable for HEXtoASCII>_0`:
   \   000018   41           DB        65
   \   000019   19           DB        25
   \   00001A   ....         DW        ??HEXtoASCII_1
   \   00001C   ....         DW        ??HEXtoASCII_2
   \   00001E   ....         DW        ??HEXtoASCII_3
   \   000020   ....         DW        ??HEXtoASCII_4
   \   000022   ....         DW        ??HEXtoASCII_5
   \   000024   ....         DW        ??HEXtoASCII_6
   \   000026   ....         DW        ??HEXtoASCII_7
   \   000028   ....         DW        ??HEXtoASCII_8
   \   00002A   ....         DW        ??HEXtoASCII_9
   \   00002C   ....         DW        ??HEXtoASCII_10
   \   00002E   ....         DW        ??HEXtoASCII_11
   \   000030   ....         DW        ??HEXtoASCII_12
   \   000032   ....         DW        ??HEXtoASCII_13
   \   000034   ....         DW        ??HEXtoASCII_14
   \   000036   ....         DW        ??HEXtoASCII_15
   \   000038   ....         DW        ??HEXtoASCII_16
   \   00003A   ....         DW        ??HEXtoASCII_17
   \   00003C   ....         DW        ??HEXtoASCII_18
   \   00003E   ....         DW        ??HEXtoASCII_19
   \   000040   ....         DW        ??HEXtoASCII_20
   \   000042   ....         DW        ??HEXtoASCII_21
   \   000044   ....         DW        ??HEXtoASCII_22
   \   000046   ....         DW        ??HEXtoASCII_23
   \   000048   ....         DW        ??HEXtoASCII_24
   \   00004A   ....         DW        ??HEXtoASCII_25
   \   00004C   ....         DW        ??HEXtoASCII_26
   \   00004E   ....         DW        ??HEXtoASCII_27
    344              {
    345               case 0x41:
    346                ConvertedToAscii = 'A';
   \                     ??HEXtoASCII_2:
   \   000050   7941         MOV     R1,#0x41
    347               break;
   \   000052   8062         SJMP    ??HEXtoASCII_1
    348          
    349               case 0x42:
    350                ConvertedToAscii = 'B';
   \                     ??HEXtoASCII_3:
   \   000054   7942         MOV     R1,#0x42
    351               break;
   \   000056   805E         SJMP    ??HEXtoASCII_1
    352          
    353               case 0x43:
    354                ConvertedToAscii = 'C';
   \                     ??HEXtoASCII_4:
   \   000058   7943         MOV     R1,#0x43
    355               break;
   \   00005A   805A         SJMP    ??HEXtoASCII_1
    356          
    357               case 0x44:
    358                ConvertedToAscii = 'D';
   \                     ??HEXtoASCII_5:
   \   00005C   7944         MOV     R1,#0x44
    359               break;
   \   00005E   8056         SJMP    ??HEXtoASCII_1
    360          
    361               case 0x45:
    362                ConvertedToAscii = 'E';
   \                     ??HEXtoASCII_6:
   \   000060   7945         MOV     R1,#0x45
    363               break;
   \   000062   8052         SJMP    ??HEXtoASCII_1
    364          
    365               case 0x46:
    366                ConvertedToAscii = 'F';
   \                     ??HEXtoASCII_7:
   \   000064   7946         MOV     R1,#0x46
    367               break;
   \   000066   804E         SJMP    ??HEXtoASCII_1
    368          
    369               case 0x47:
    370                ConvertedToAscii = 'G';
   \                     ??HEXtoASCII_8:
   \   000068   7947         MOV     R1,#0x47
    371               break;
   \   00006A   804A         SJMP    ??HEXtoASCII_1
    372          
    373               case 0x48:
    374                ConvertedToAscii = 'H';
   \                     ??HEXtoASCII_9:
   \   00006C   7948         MOV     R1,#0x48
    375               break;
   \   00006E   8046         SJMP    ??HEXtoASCII_1
    376          
    377               case 0x49:
    378                ConvertedToAscii = 'I';
   \                     ??HEXtoASCII_10:
   \   000070   7949         MOV     R1,#0x49
    379               break;
   \   000072   8042         SJMP    ??HEXtoASCII_1
    380          
    381               case 0x4A:
    382                ConvertedToAscii = 'J';
   \                     ??HEXtoASCII_11:
   \   000074   794A         MOV     R1,#0x4a
    383               break;
   \   000076   803E         SJMP    ??HEXtoASCII_1
    384          
    385               case 0x4B:
    386                ConvertedToAscii = 'K';
   \                     ??HEXtoASCII_12:
   \   000078   794B         MOV     R1,#0x4b
    387               break;
   \   00007A   803A         SJMP    ??HEXtoASCII_1
    388          
    389               case 0x4C:
    390                ConvertedToAscii = 'L';
   \                     ??HEXtoASCII_13:
   \   00007C   794C         MOV     R1,#0x4c
    391               break;
   \   00007E   8036         SJMP    ??HEXtoASCII_1
    392          
    393               case 0x4D:
    394                ConvertedToAscii = 'M';
   \                     ??HEXtoASCII_14:
   \   000080   794D         MOV     R1,#0x4d
    395               break;
   \   000082   8032         SJMP    ??HEXtoASCII_1
    396          
    397               case 0x4E:
    398                ConvertedToAscii = 'N';
   \                     ??HEXtoASCII_15:
   \   000084   794E         MOV     R1,#0x4e
    399               break;
   \   000086   802E         SJMP    ??HEXtoASCII_1
    400          
    401               case 0x4F:
    402                ConvertedToAscii = 'O';
   \                     ??HEXtoASCII_16:
   \   000088   794F         MOV     R1,#0x4f
    403               break;
   \   00008A   802A         SJMP    ??HEXtoASCII_1
    404          
    405               case 0x50:
    406                ConvertedToAscii = 'P';
   \                     ??HEXtoASCII_17:
   \   00008C   7950         MOV     R1,#0x50
    407               break;
   \   00008E   8026         SJMP    ??HEXtoASCII_1
    408          
    409               case 0x51:
    410                ConvertedToAscii = 'Q';
   \                     ??HEXtoASCII_18:
   \   000090   7951         MOV     R1,#0x51
    411               break;
   \   000092   8022         SJMP    ??HEXtoASCII_1
    412          
    413               case 0x52:
    414                ConvertedToAscii = 'R';
   \                     ??HEXtoASCII_19:
   \   000094   7952         MOV     R1,#0x52
    415               break;
   \   000096   801E         SJMP    ??HEXtoASCII_1
    416          
    417               case 0x53:
    418                ConvertedToAscii = 'S';
   \                     ??HEXtoASCII_20:
   \   000098   7953         MOV     R1,#0x53
    419               break;
   \   00009A   801A         SJMP    ??HEXtoASCII_1
    420          
    421               case 0x54:
    422                ConvertedToAscii = 'T';
   \                     ??HEXtoASCII_21:
   \   00009C   7954         MOV     R1,#0x54
    423               break;
   \   00009E   8016         SJMP    ??HEXtoASCII_1
    424          
    425               case 0x55:
    426                ConvertedToAscii = 'U';
   \                     ??HEXtoASCII_22:
   \   0000A0   7955         MOV     R1,#0x55
    427               break;
   \   0000A2   8012         SJMP    ??HEXtoASCII_1
    428          
    429               case 0x56:
    430                ConvertedToAscii = 'V';
   \                     ??HEXtoASCII_23:
   \   0000A4   7956         MOV     R1,#0x56
    431               break;
   \   0000A6   800E         SJMP    ??HEXtoASCII_1
    432          
    433               case 0x57:
    434                ConvertedToAscii = 'W';
   \                     ??HEXtoASCII_24:
   \   0000A8   7957         MOV     R1,#0x57
    435               break;
   \   0000AA   800A         SJMP    ??HEXtoASCII_1
    436          
    437               case 0x58:
    438                ConvertedToAscii = 'X';
   \                     ??HEXtoASCII_25:
   \   0000AC   7958         MOV     R1,#0x58
    439               break;
   \   0000AE   8006         SJMP    ??HEXtoASCII_1
    440          
    441               case 0x59:
    442                ConvertedToAscii = 'Y';
   \                     ??HEXtoASCII_26:
   \   0000B0   7959         MOV     R1,#0x59
    443               break;
   \   0000B2   8002         SJMP    ??HEXtoASCII_1
    444          
    445               case 0x5A:
    446                ConvertedToAscii = 'Z';
   \                     ??HEXtoASCII_27:
   \   0000B4   795A         MOV     R1,#0x5a
    447               break;
    448            }
    449          }
    450          
    451          if((HEXtoConvert >= 0x61) && (HEXtoConvert <= 0x7A)) // Si l'hex est une lettre minuscule
   \                     ??HEXtoASCII_1:
   \   0000B6   E8           MOV     A,R0
   \   0000B7   C3           CLR     C
   \   0000B8   9461         SUBB    A,#0x61
   \   0000BA   C3           CLR     C
   \   0000BB   941A         SUBB    A,#0x1a
   \   0000BD   4003         JC      $+5
   \   0000BF   02....       LJMP    ??HEXtoASCII_28
    452            {
    453             switch(HEXtoConvert)
   \   0000C2   E8           MOV     A,R0
   \   0000C3   12....       LCALL   ?UC_SWITCH_DENSE
   \                     `?<Jumptable for HEXtoASCII>_1`:
   \   0000C6   61           DB        97
   \   0000C7   19           DB        25
   \   0000C8   ....         DW        ??HEXtoASCII_28
   \   0000CA   ....         DW        ??HEXtoASCII_29
   \   0000CC   ....         DW        ??HEXtoASCII_30
   \   0000CE   ....         DW        ??HEXtoASCII_31
   \   0000D0   ....         DW        ??HEXtoASCII_32
   \   0000D2   ....         DW        ??HEXtoASCII_33
   \   0000D4   ....         DW        ??HEXtoASCII_34
   \   0000D6   ....         DW        ??HEXtoASCII_35
   \   0000D8   ....         DW        ??HEXtoASCII_36
   \   0000DA   ....         DW        ??HEXtoASCII_37
   \   0000DC   ....         DW        ??HEXtoASCII_38
   \   0000DE   ....         DW        ??HEXtoASCII_39
   \   0000E0   ....         DW        ??HEXtoASCII_40
   \   0000E2   ....         DW        ??HEXtoASCII_41
   \   0000E4   ....         DW        ??HEXtoASCII_42
   \   0000E6   ....         DW        ??HEXtoASCII_43
   \   0000E8   ....         DW        ??HEXtoASCII_44
   \   0000EA   ....         DW        ??HEXtoASCII_45
   \   0000EC   ....         DW        ??HEXtoASCII_46
   \   0000EE   ....         DW        ??HEXtoASCII_47
   \   0000F0   ....         DW        ??HEXtoASCII_48
   \   0000F2   ....         DW        ??HEXtoASCII_49
   \   0000F4   ....         DW        ??HEXtoASCII_50
   \   0000F6   ....         DW        ??HEXtoASCII_51
   \   0000F8   ....         DW        ??HEXtoASCII_52
   \   0000FA   ....         DW        ??HEXtoASCII_53
   \   0000FC   ....         DW        ??HEXtoASCII_54
    454              {
    455               case 0x61:
    456                ConvertedToAscii = 'a';
   \                     ??HEXtoASCII_29:
   \   0000FE   7961         MOV     R1,#0x61
    457               break;
   \   000100   8062         SJMP    ??HEXtoASCII_28
    458          
    459               case 0x62:
    460                ConvertedToAscii = 'b';
   \                     ??HEXtoASCII_30:
   \   000102   7962         MOV     R1,#0x62
    461               break;
   \   000104   805E         SJMP    ??HEXtoASCII_28
    462          
    463               case 0x63:
    464                ConvertedToAscii = 'c';
   \                     ??HEXtoASCII_31:
   \   000106   7963         MOV     R1,#0x63
    465               break;
   \   000108   805A         SJMP    ??HEXtoASCII_28
    466          
    467               case 0x64:
    468                ConvertedToAscii = 'd';
   \                     ??HEXtoASCII_32:
   \   00010A   7964         MOV     R1,#0x64
    469               break;
   \   00010C   8056         SJMP    ??HEXtoASCII_28
    470          
    471               case 0x65:
    472                ConvertedToAscii = 'e';
   \                     ??HEXtoASCII_33:
   \   00010E   7965         MOV     R1,#0x65
    473               break;
   \   000110   8052         SJMP    ??HEXtoASCII_28
    474          
    475               case 0x66:
    476                ConvertedToAscii = 'f';
   \                     ??HEXtoASCII_34:
   \   000112   7966         MOV     R1,#0x66
    477               break;
   \   000114   804E         SJMP    ??HEXtoASCII_28
    478          
    479               case 0x67:
    480                ConvertedToAscii = 'g';
   \                     ??HEXtoASCII_35:
   \   000116   7967         MOV     R1,#0x67
    481               break;
   \   000118   804A         SJMP    ??HEXtoASCII_28
    482          
    483               case 0x68:
    484                ConvertedToAscii = 'h';
   \                     ??HEXtoASCII_36:
   \   00011A   7968         MOV     R1,#0x68
    485               break;
   \   00011C   8046         SJMP    ??HEXtoASCII_28
    486          
    487               case 0x69:
    488                ConvertedToAscii = 'i';
   \                     ??HEXtoASCII_37:
   \   00011E   7969         MOV     R1,#0x69
    489               break;
   \   000120   8042         SJMP    ??HEXtoASCII_28
    490          
    491               case 0x6A:
    492                ConvertedToAscii = 'j';
   \                     ??HEXtoASCII_38:
   \   000122   796A         MOV     R1,#0x6a
    493               break;
   \   000124   803E         SJMP    ??HEXtoASCII_28
    494          
    495               case 0x6B:
    496                ConvertedToAscii = 'k';
   \                     ??HEXtoASCII_39:
   \   000126   796B         MOV     R1,#0x6b
    497               break;
   \   000128   803A         SJMP    ??HEXtoASCII_28
    498          
    499               case 0x6C:
    500                ConvertedToAscii = 'l';
   \                     ??HEXtoASCII_40:
   \   00012A   796C         MOV     R1,#0x6c
    501               break;
   \   00012C   8036         SJMP    ??HEXtoASCII_28
    502          
    503               case 0x6D:
    504                ConvertedToAscii = 'm';
   \                     ??HEXtoASCII_41:
   \   00012E   796D         MOV     R1,#0x6d
    505               break;
   \   000130   8032         SJMP    ??HEXtoASCII_28
    506          
    507               case 0x6E:
    508                ConvertedToAscii = 'n';
   \                     ??HEXtoASCII_42:
   \   000132   796E         MOV     R1,#0x6e
    509               break;
   \   000134   802E         SJMP    ??HEXtoASCII_28
    510          
    511               case 0x6F:
    512                ConvertedToAscii = 'o';
   \                     ??HEXtoASCII_43:
   \   000136   796F         MOV     R1,#0x6f
    513               break;
   \   000138   802A         SJMP    ??HEXtoASCII_28
    514          
    515               case 0x70:
    516                ConvertedToAscii = 'p';
   \                     ??HEXtoASCII_44:
   \   00013A   7970         MOV     R1,#0x70
    517               break;
   \   00013C   8026         SJMP    ??HEXtoASCII_28
    518          
    519               case 0x71:
    520                ConvertedToAscii = 'q';
   \                     ??HEXtoASCII_45:
   \   00013E   7971         MOV     R1,#0x71
    521               break;
   \   000140   8022         SJMP    ??HEXtoASCII_28
    522          
    523               case 0x72:
    524                ConvertedToAscii = 'r';
   \                     ??HEXtoASCII_46:
   \   000142   7972         MOV     R1,#0x72
    525               break;
   \   000144   801E         SJMP    ??HEXtoASCII_28
    526          
    527               case 0x73:
    528                ConvertedToAscii = 's';
   \                     ??HEXtoASCII_47:
   \   000146   7973         MOV     R1,#0x73
    529               break;
   \   000148   801A         SJMP    ??HEXtoASCII_28
    530          
    531               case 0x74:
    532                ConvertedToAscii = 't';
   \                     ??HEXtoASCII_48:
   \   00014A   7974         MOV     R1,#0x74
    533               break;
   \   00014C   8016         SJMP    ??HEXtoASCII_28
    534          
    535               case 0x75:
    536                ConvertedToAscii = 'u';
   \                     ??HEXtoASCII_49:
   \   00014E   7975         MOV     R1,#0x75
    537               break;
   \   000150   8012         SJMP    ??HEXtoASCII_28
    538          
    539               case 0x76:
    540                ConvertedToAscii = 'v';
   \                     ??HEXtoASCII_50:
   \   000152   7976         MOV     R1,#0x76
    541               break;
   \   000154   800E         SJMP    ??HEXtoASCII_28
    542          
    543               case 0x77:
    544                ConvertedToAscii = 'w';
   \                     ??HEXtoASCII_51:
   \   000156   7977         MOV     R1,#0x77
    545               break;
   \   000158   800A         SJMP    ??HEXtoASCII_28
    546          
    547               case 0x78:
    548                ConvertedToAscii = 'x';
   \                     ??HEXtoASCII_52:
   \   00015A   7978         MOV     R1,#0x78
    549               break;
   \   00015C   8006         SJMP    ??HEXtoASCII_28
    550          
    551               case 0x79:
    552                ConvertedToAscii = 'y';
   \                     ??HEXtoASCII_53:
   \   00015E   7979         MOV     R1,#0x79
    553               break;
   \   000160   8002         SJMP    ??HEXtoASCII_28
    554          
    555               case 0x7A:
    556                ConvertedToAscii = 'z';
   \                     ??HEXtoASCII_54:
   \   000162   797A         MOV     R1,#0x7a
    557               break;
    558            }
    559          }
    560          
    561          if((HEXtoConvert >= 0x30) && (HEXtoConvert <= 0x39)) // Si l'hex est un chiffre
   \                     ??HEXtoASCII_28:
   \   000164   E8           MOV     A,R0
   \   000165   C3           CLR     C
   \   000166   9430         SUBB    A,#0x30
   \   000168   C3           CLR     C
   \   000169   940A         SUBB    A,#0xa
   \   00016B   5048         JNC     ??HEXtoASCII_55
    562            {
    563          switch(HEXtoConvert)
   \   00016D   E8           MOV     A,R0
   \   00016E   24D0         ADD     A,#-0x30
   \   000170   601D         JZ      ??HEXtoASCII_56
   \   000172   14           DEC     A
   \   000173   601E         JZ      ??HEXtoASCII_57
   \   000175   14           DEC     A
   \   000176   601F         JZ      ??HEXtoASCII_58
   \   000178   14           DEC     A
   \   000179   6020         JZ      ??HEXtoASCII_59
   \   00017B   14           DEC     A
   \   00017C   6021         JZ      ??HEXtoASCII_60
   \   00017E   14           DEC     A
   \   00017F   6022         JZ      ??HEXtoASCII_61
   \   000181   14           DEC     A
   \   000182   6023         JZ      ??HEXtoASCII_62
   \   000184   14           DEC     A
   \   000185   6024         JZ      ??HEXtoASCII_63
   \   000187   14           DEC     A
   \   000188   6025         JZ      ??HEXtoASCII_64
   \   00018A   14           DEC     A
   \   00018B   6026         JZ      ??HEXtoASCII_65
   \   00018D   8026         SJMP    ??HEXtoASCII_55
    564              {
    565               case 0x30:
    566                ConvertedToAscii = '0';
   \                     ??HEXtoASCII_56:
   \   00018F   7930         MOV     R1,#0x30
    567               break;
   \   000191   8022         SJMP    ??HEXtoASCII_55
    568          
    569               case 0x31:
    570                ConvertedToAscii = '1';
   \                     ??HEXtoASCII_57:
   \   000193   7931         MOV     R1,#0x31
    571               break;
   \   000195   801E         SJMP    ??HEXtoASCII_55
    572          
    573               case 0x32:
    574                ConvertedToAscii = '2';
   \                     ??HEXtoASCII_58:
   \   000197   7932         MOV     R1,#0x32
    575               break;
   \   000199   801A         SJMP    ??HEXtoASCII_55
    576          
    577               case 0x33:
    578                ConvertedToAscii = '3';
   \                     ??HEXtoASCII_59:
   \   00019B   7933         MOV     R1,#0x33
    579               break;
   \   00019D   8016         SJMP    ??HEXtoASCII_55
    580          
    581               case 0x34:
    582                ConvertedToAscii = '4';
   \                     ??HEXtoASCII_60:
   \   00019F   7934         MOV     R1,#0x34
    583               break;
   \   0001A1   8012         SJMP    ??HEXtoASCII_55
    584          
    585               case 0x35:
    586                ConvertedToAscii = '5';
   \                     ??HEXtoASCII_61:
   \   0001A3   7935         MOV     R1,#0x35
    587               break;
   \   0001A5   800E         SJMP    ??HEXtoASCII_55
    588          
    589               case 0x36:
    590                ConvertedToAscii = '6';
   \                     ??HEXtoASCII_62:
   \   0001A7   7936         MOV     R1,#0x36
    591               break;
   \   0001A9   800A         SJMP    ??HEXtoASCII_55
    592          
    593               case 0x37:
    594                ConvertedToAscii = '7';
   \                     ??HEXtoASCII_63:
   \   0001AB   7937         MOV     R1,#0x37
    595               break;
   \   0001AD   8006         SJMP    ??HEXtoASCII_55
    596          
    597               case 0x38:
    598                ConvertedToAscii = '8';
   \                     ??HEXtoASCII_64:
   \   0001AF   7938         MOV     R1,#0x38
    599               break;
   \   0001B1   8002         SJMP    ??HEXtoASCII_55
    600          
    601               case 0x39:
    602                ConvertedToAscii = '9';
   \                     ??HEXtoASCII_65:
   \   0001B3   7939         MOV     R1,#0x39
    603               break;
    604            }
    605          }
    606          return(ConvertedToAscii);
   \                     ??HEXtoASCII_55:
   \   0001B5   D083         POP     DPH
   \   0001B7   D082         POP     DPL
   \   0001B9   22           RET
    607          }

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     __Constant_0:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for __Constant_0>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __Constant_0>`:
   \   000000   00000000     DD 0H

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     __Constant_42c80000:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for __Constant_42c80000>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __Constant_42c80000>`:
   \   000000   0000C842     DD 42C80000H

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \   __near_func __xdata_reentrant Conversion &Conversion::new Conversion()
   \                     `??new Conversion`:
   \   000000   C0..         PUSH    ?V0 + 0
   \   000002   C0..         PUSH    ?V0 + 1
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004                ; Setup parameters for call to function operator new(unsigned int)
   \   000004   7A01         MOV     R2,#0x1
   \   000006   7B00         MOV     R3,#0x0
   \   000008   12....       LCALL   `??operator new`
   \   00000B   8A..         MOV     ?V0 + 0,R2
   \   00000D   8B..         MOV     ?V0 + 1,R3
   \   00000F   A8..         MOV     R0,?V0 + 0
   \   000011   A9..         MOV     R1,?V0 + 1
   \   000013   E8           MOV     A,R0
   \   000014   FA           MOV     R2,A
   \   000015   E9           MOV     A,R1
   \   000016   FB           MOV     R3,A
   \   000017   E8           MOV     A,R0
   \   000018   49           ORL     A,R1
   \   000019   600D         JZ      `??new Conversion_2`
   \   00001B                ; Setup parameters for call to function Conversion::Conversion()
   \   00001B   12....       LCALL   ??Conversion
   \   00001E   8A..         MOV     ?V0 + 0,R2
   \   000020   8B..         MOV     ?V0 + 1,R3
   \   000022   AA..         MOV     R2,?V0 + 0
   \   000024   AB..         MOV     R3,?V0 + 1
   \   000026   8004         SJMP    `??new Conversion_3`
   \                     `??new Conversion_2`:
   \   000028   7A00         MOV     R2,#0x0
   \   00002A   7B00         MOV     R3,#0x0
   \                     `??new Conversion_3`:
   \   00002C   D0..         POP     ?V0 + 1
   \   00002E   D0..         POP     ?V0 + 0
   \   000030   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \   __near_func __xdata_reentrant Conversion &Conversion::new Conversion(UC)
   \                     `??new Conversion_1`:
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007                ; Setup parameters for call to function operator new(unsigned int)
   \   000007   7A01         MOV     R2,#0x1
   \   000009   7B00         MOV     R3,#0x0
   \   00000B   12....       LCALL   `??operator new`
   \   00000E   8A..         MOV     ?V0 + 0,R2
   \   000010   8B..         MOV     ?V0 + 1,R3
   \   000012   A8..         MOV     R0,?V0 + 0
   \   000014   A9..         MOV     R1,?V0 + 1
   \   000016   E8           MOV     A,R0
   \   000017   FA           MOV     R2,A
   \   000018   E9           MOV     A,R1
   \   000019   FB           MOV     R3,A
   \   00001A   E8           MOV     A,R0
   \   00001B   49           ORL     A,R1
   \   00001C   600F         JZ      `??new Conversion_4`
   \   00001E                ; Setup parameters for call to function Conversion::Conversion(UC)
   \   00001E   EE           MOV     A,R6
   \   00001F   F9           MOV     R1,A
   \   000020   12....       LCALL   ??Conversion_1
   \   000023   8A..         MOV     ?V0 + 0,R2
   \   000025   8B..         MOV     ?V0 + 1,R3
   \   000027   AA..         MOV     R2,?V0 + 0
   \   000029   AB..         MOV     R3,?V0 + 1
   \   00002B   8004         SJMP    `??new Conversion_5`
   \                     `??new Conversion_4`:
   \   00002D   7A00         MOV     R2,#0x0
   \   00002F   7B00         MOV     R3,#0x0
   \                     `??new Conversion_5`:
   \   000031   7F02         MOV     R7,#0x2
   \   000033   02....       LJMP    ?FUNC_LEAVE_XDATA

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \   __near_func __xdata_reentrant void Conversion::delete ~Conversion(Conversion *)
   \                     `??delete ~Conversion`:
   \   000000   74F8         MOV     A,#-0x8
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 8
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   EE           MOV     A,R6
   \   00000A   4F           ORL     A,R7
   \   00000B   600E         JZ      `??delete ~Conversion_1`
   \   00000D                ; Setup parameters for call to function Conversion::~Conversion()
   \   00000D   EE           MOV     A,R6
   \   00000E   FA           MOV     R2,A
   \   00000F   EF           MOV     A,R7
   \   000010   FB           MOV     R3,A
   \   000011   12....       LCALL   `?~Conversion`
   \   000014                ; Setup parameters for call to function operator delete(void *)
   \   000014   EE           MOV     A,R6
   \   000015   FA           MOV     R2,A
   \   000016   EF           MOV     A,R7
   \   000017   FB           MOV     R3,A
   \   000018   12....       LCALL   `??operator delete`
   \                     `??delete ~Conversion_1`:
   \   00001B   7F01         MOV     R7,#0x1
   \   00001D   02....       LJMP    ?FUNC_LEAVE_XDATA
    608          //LinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxTUX

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     Conversion::ASCIItoHEX(UC)         2      0      0
     Conversion::Conversion()           0      0      0
     Conversion::Conversion(UC)         0      0      9
     Conversion::FloatToString(float)
                                        0      0     33
       -> Conversion::StringAdder(char)
                                        0      0     58
       -> Conversion::StringAdder(char)
                                        0      0     58
       -> Conversion::StringAdder(char)
                                        0      0     58
       -> Conversion::StringAdder(char)
                                        0      0     58
       -> Conversion::StringAdder(char)
                                        0      0     58
       -> Conversion::StringAdder(char)
                                        0      0     58
       -> Conversion::StringAdder(char)
                                        0      0     58
       -> Conversion::StringAdder(char)
                                        0      0     58
       -> Conversion::StringAdder(char)
                                        0      0     58
       -> Conversion::StringAdder(char)
                                        0      0     58
       -> Conversion::StringAdder(char)
                                        0      0     58
       -> Conversion::StringAdder(char)
                                        0      0     58
       -> Conversion::StringAdder(char)
                                        0      0     58
       -> Conversion::StringAdder(char)
                                        0      0     58
       -> Conversion::StringAdder(char)
                                        0      0     58
       -> Conversion::StringAdder(char)
                                        0      0     58
       -> Conversion::StringAdder(char)
                                        0      0     58
       -> Conversion::StringAdder(char)
                                        0      0     58
       -> Conversion::StringAdder(char)
                                        0      0     58
       -> Conversion::StringAdder(char)
                                        0      0     58
       -> Conversion::StringAdder(char)
                                        0      0     58
     Conversion::HEXtoASCII(UC)         2      0      0
     Conversion::StringAdder(char)      0      0     29
     Conversion::delete ~Conversion(Conversion *)
                                        0      0      8
       -> Conversion::~Conversion()     0      0     16
       -> operator delete(void *)       0      0     16
     Conversion::new Conversion()       2      0      0
       -> operator new(unsigned int)
                                        4      0      0
       -> Conversion::Conversion()      4      0      0
     Conversion::new Conversion(UC)     0      0      9
       -> operator new(unsigned int)
                                        0      0     18
       -> Conversion::Conversion(UC)
                                        0      0     18
     Conversion::~Conversion()          0      0      8


   Segment part sizes:

     Function/Label                         Bytes
     --------------                         -----
     Conversion::StringFinal                   2
     Conversion::Conversion()                  1
     Conversion::Conversion(UC)                1
     Conversion::~Conversion()                 1
     Conversion::StringAdder(char)             1
     Conversion::FloatToString(float)
                                            1120
     Conversion::ASCIItoHEX(UC)              250
     Conversion::HEXtoASCII(UC)              442
     __Constant_0                              4
     ?<Initializer for __Constant_0>           4
     __Constant_42c80000                       4
     ?<Initializer for __Constant_42c80000>    4
     Conversion::new Conversion()             49
     Conversion::new Conversion(UC)           54
     Conversion::delete ~Conversion(Conversion *)
                                              32

 
 1 951 bytes in segment NEAR_CODE
     8 bytes in segment XDATA_I
     8 bytes in segment XDATA_ID
     2 bytes in segment XDATA_Z
 
 1 951 bytes of CODE  memory (+ 8 bytes shared)
     2 bytes of XDATA memory (+ 8 bytes shared)

Errors: none
Warnings: 2
