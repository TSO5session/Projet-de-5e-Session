###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.40194/W32 for 8051         08/Sep/2014  18:14:28 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  near                                               #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data                                               #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Synchro\Dropbox\Travaux\Automne                 #
#                          2014\Prog\Labo1\Programme\CLI2CPort.Cpp            #
#    Command line       =  "C:\Synchro\Dropbox\Travaux\Automne                #
#                          2014\Prog\Labo1\Programme\CLI2CPort.Cpp" -D        #
#                          UPSD3254A --preprocess=cl                          #
#                          "C:\Synchro\Dropbox\Travaux\Automne                #
#                          2014\Prog\Labo1\Programme\UPSDDebug\List\" -lC     #
#                          "C:\Synchro\Dropbox\Travaux\Automne                #
#                          2014\Prog\Labo1\Programme\UPSDDebug\List\" -lA     #
#                          "C:\Synchro\Dropbox\Travaux\Automne                #
#                          2014\Prog\Labo1\Programme\UPSDDebug\List\" -o      #
#                          "C:\Synchro\Dropbox\Travaux\Automne                #
#                          2014\Prog\Labo1\Programme\UPSDDebug\Obj\" -e       #
#                          --no_cse --no_unroll --no_inline --no_code_motion  #
#                          --no_tbaa --debug --core=plain --dptr=16,1         #
#                          --data_model=large --code_model=near               #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data --nr_virtual_regs 8         #
#                          --dlib_config "C:\Program Files (x86)\IAR          #
#                          Systems\Embedded Workbench                         #
#                          6.0\8051\LIB\DLIB\dl8051Normal.h" -Ol --eec++      #
#    List file          =  C:\Synchro\Dropbox\Travaux\Automne                 #
#                          2014\Prog\Labo1\Programme\UPSDDebug\List\CLI2CPort #
#                          .lst                                               #
#    Object file        =  C:\Synchro\Dropbox\Travaux\Automne                 #
#                          2014\Prog\Labo1\Programme\UPSDDebug\Obj\CLI2CPort. #
#                          r51                                                #
#                                                                             #
#                                                                             #
###############################################################################

C:\Synchro\Dropbox\Travaux\Automne 2014\Prog\Labo1\Programme\CLI2CPort.Cpp
      1          // ************************** FICHIER: CLI2CPORT.CPP ************************
      2          #include "CLI2CPort.h"
      3          
      4          // *****************************************************************************
      5          //                            LES CONSTRUCTEURS
      6          // *****************************************************************************

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
      7          CLI2CPort :: CLI2CPort(void)
   \                     ??CLI2CPort:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
      8          {
   \   000008                ; Setup parameters for call to function CLI2CBase::CLI2CBase()
   \   000008   AA82         MOV     R2,DPL
   \   00000A   AB83         MOV     R3,DPH
   \   00000C   12....       LCALL   ??CLI2CBase
      9          
     10          }
   \   00000F   AA82         MOV     R2,DPL
   \   000011   AB83         MOV     R3,DPH
   \   000013   D083         POP     DPH
   \   000015   D082         POP     DPL
   \   000017   22           RET
     11          
     12          // *****************************************************************************
     13          //                            LE DESTRUCTEUR
     14          // *****************************************************************************

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
     15          CLI2CPort :: ~CLI2CPort(void)
   \                     `?~CLI2CPort`:
     16          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     17          
     18          }
   \   000000                ; Setup parameters for call to function CLI2CBase::~CLI2CBase()
   \   000000   02....       LJMP    `?~CLI2CBase`
     19          
     20          ///////////////////////////////////////////////////////////////////////////////
     21          // UC CLI2CPort :: ucI2CLireDonnee(UC ucAdrBoitier, UC ucAdrRegistre)
     22          ///////////////////////////////////////////////////////////////////////////////
     23          //
     24          // Description:
     25          //
     26          // Parametres d'entrees: null
     27          //
     28          // Parametres de sortie: null
     29          //
     30          // Appel de la fonction:
     31          //
     32          // Cree le  4 avril 2014 par Louis-Normand Ang Houle
     33          //
     34          // Modifications:
     35          // -
     36          //
     37          ///////////////////////////////////////////////////////////////////////////////
     38          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
     39          UC CLI2CPort :: ucI2CLireDonnee(UC ucAdrBoitier, UC ucAdrRegistre)
   \                     ??ucI2CLireDonnee:
     40           {
   \   000000   74F8         MOV     A,#-0x8
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 8
   \   000005                ; Auto size: 0
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   89..         MOV     ?V0 + 0,R1
   \   00000B   EC           MOV     A,R4
   \   00000C   FF           MOV     R7,A
     41             UC ucReadOctet = 0;
   \   00000D   7E00         MOV     R6,#0x0
     42          
     43             vI2CStart();
   \   00000F                ; Setup parameters for call to function CLI2CBase::vI2CStart()
   \   00000F   AA82         MOV     R2,DPL
   \   000011   AB83         MOV     R3,DPH
   \   000013   12....       LCALL   ??vI2CStart
   \   000016   8007         SJMP    ??ucI2CLireDonnee_1
     44             while(ucI2CEcrireOctet(ucAdrBoitier + WRITE)== NACK)
     45              {
     46                vI2CStart();
   \                     ??ucI2CLireDonnee_2:
   \   000018                ; Setup parameters for call to function CLI2CBase::vI2CStart()
   \   000018   AA82         MOV     R2,DPL
   \   00001A   AB83         MOV     R3,DPH
   \   00001C   12....       LCALL   ??vI2CStart
     47              }
   \                     ??ucI2CLireDonnee_1:
   \   00001F                ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
   \   00001F   A9..         MOV     R1,?V0 + 0
   \   000021   AA82         MOV     R2,DPL
   \   000023   AB83         MOV     R3,DPH
   \   000025   12....       LCALL   ??ucI2CEcrireOctet
   \   000028   E9           MOV     A,R1
   \   000029   6401         XRL     A,#0x1
   \   00002B   60EB         JZ      ??ucI2CLireDonnee_2
     48             while(ucI2CEcrireOctet(ucAdrRegistre)       == NACK);
   \                     ??ucI2CLireDonnee_3:
   \   00002D                ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
   \   00002D   EF           MOV     A,R7
   \   00002E   F9           MOV     R1,A
   \   00002F   AA82         MOV     R2,DPL
   \   000031   AB83         MOV     R3,DPH
   \   000033   12....       LCALL   ??ucI2CEcrireOctet
   \   000036   E9           MOV     A,R1
   \   000037   6401         XRL     A,#0x1
   \   000039   60F2         JZ      ??ucI2CLireDonnee_3
     49             vI2CStart();
   \   00003B                ; Setup parameters for call to function CLI2CBase::vI2CStart()
   \   00003B   AA82         MOV     R2,DPL
   \   00003D   AB83         MOV     R3,DPH
   \   00003F   12....       LCALL   ??vI2CStart
   \   000042   8007         SJMP    ??ucI2CLireDonnee_4
     50             while(ucI2CEcrireOctet(ucAdrBoitier + READ) == NACK)
     51              {
     52                vI2CStart();
   \                     ??ucI2CLireDonnee_5:
   \   000044                ; Setup parameters for call to function CLI2CBase::vI2CStart()
   \   000044   AA82         MOV     R2,DPL
   \   000046   AB83         MOV     R3,DPH
   \   000048   12....       LCALL   ??vI2CStart
     53              }
   \                     ??ucI2CLireDonnee_4:
   \   00004B                ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
   \   00004B   7401         MOV     A,#0x1
   \   00004D   25..         ADD     A,?V0 + 0
   \   00004F   F9           MOV     R1,A
   \   000050   AA82         MOV     R2,DPL
   \   000052   AB83         MOV     R3,DPH
   \   000054   12....       LCALL   ??ucI2CEcrireOctet
   \   000057   E9           MOV     A,R1
   \   000058   6401         XRL     A,#0x1
   \   00005A   60E8         JZ      ??ucI2CLireDonnee_5
     54             ucReadOctet = ucI2CLireOctet(NACK);
   \   00005C                ; Setup parameters for call to function CLI2CBase::ucI2CLireOctet(UC)
   \   00005C   7901         MOV     R1,#0x1
   \   00005E   AA82         MOV     R2,DPL
   \   000060   AB83         MOV     R3,DPH
   \   000062   12....       LCALL   ??ucI2CLireOctet
   \   000065   E9           MOV     A,R1
   \   000066   FE           MOV     R6,A
     55             vI2CStop();
   \   000067                ; Setup parameters for call to function CLI2CBase::vI2CStop()
   \   000067   AA82         MOV     R2,DPL
   \   000069   AB83         MOV     R3,DPH
   \   00006B   12....       LCALL   ??vI2CStop
     56             return(ucReadOctet);
   \   00006E   EE           MOV     A,R6
   \   00006F   F9           MOV     R1,A
   \   000070   7F01         MOV     R7,#0x1
   \   000072   02....       LJMP    ?FUNC_LEAVE_XDATA
     57           }
     58          
     59          ///////////////////////////////////////////////////////////////////////////////
     60          //void CLI2CPort :: vI2CLireDonnee(UC ucAdrBoitier, USI uiAdrRegistre,
     61          //                                 UC ucTypeAdr ,UC *ucpRecevoirDonnee,
     62          //                                 UC ucNbrLectures)
     63          ///////////////////////////////////////////////////////////////////////////////
     64          //
     65          // Description:
     66          //
     67          // Parametres d'entrees: null
     68          //
     69          // Parametres de sortie: null
     70          //
     71          // Appel de la fonction:
     72          //
     73          // Cree le  4 avril 2014 par Louis-Normand Ang Houle
     74          //
     75          // Modifications:
     76          // -
     77          //
     78          ///////////////////////////////////////////////////////////////////////////////
     79          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
     80          void CLI2CPort :: vI2CLireDonnee(UC ucAdrBoitier,USI uiAdrRegistre,UC ucTypeAdr
   \                     ??vI2CLireDonnee:
     81                                           ,UC *ucpRecevoirDonnee ,UC ucNbrLectures)
     82           {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   89..         MOV     ?V0 + 1,R1
   \   000010   7410         MOV     A,#0x10
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F8           MOV     R0,A
   \   000017   7413         MOV     A,#0x13
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V0 + 6,A
     83             union UNEntierOctet unAdresse;
     84          
     85             unAdresse.uiEntier = uiAdrRegistre;
   \   00001F   85..82       MOV     DPL,?XSP + 0
   \   000022   85..83       MOV     DPH,?XSP + 1
   \   000025   EC           MOV     A,R4
   \   000026   F0           MOVX    @DPTR,A
   \   000027   A3           INC     DPTR
   \   000028   ED           MOV     A,R5
   \   000029   F0           MOVX    @DPTR,A
     86          
     87          //----------------------------------------------------------------------
     88             switch (ucTypeAdr)
   \   00002A   E8           MOV     A,R0
   \   00002B   6009         JZ      ??vI2CLireDonnee_1
   \   00002D   14           DEC     A
   \   00002E   602A         JZ      ??vI2CLireDonnee_2
   \   000030   14           DEC     A
   \   000031   607C         JZ      ??vI2CLireDonnee_3
   \   000033   02....       LJMP    ??vI2CLireDonnee_4
     89               {
     90                case PASADR:
     91                 vI2CStart();
   \                     ??vI2CLireDonnee_1:
   \   000036                ; Setup parameters for call to function CLI2CBase::vI2CStart()
   \   000036   EE           MOV     A,R6
   \   000037   FA           MOV     R2,A
   \   000038   EF           MOV     A,R7
   \   000039   FB           MOV     R3,A
   \   00003A   12....       LCALL   ??vI2CStart
   \   00003D   8007         SJMP    ??vI2CLireDonnee_5
     92                 while(ucI2CEcrireOctet(ucAdrBoitier + READ) == NACK)
     93                   {
     94                     vI2CStart();
   \                     ??vI2CLireDonnee_6:
   \   00003F                ; Setup parameters for call to function CLI2CBase::vI2CStart()
   \   00003F   EE           MOV     A,R6
   \   000040   FA           MOV     R2,A
   \   000041   EF           MOV     A,R7
   \   000042   FB           MOV     R3,A
   \   000043   12....       LCALL   ??vI2CStart
     95                   }
   \                     ??vI2CLireDonnee_5:
   \   000046                ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
   \   000046   7401         MOV     A,#0x1
   \   000048   25..         ADD     A,?V0 + 1
   \   00004A   F9           MOV     R1,A
   \   00004B   EE           MOV     A,R6
   \   00004C   FA           MOV     R2,A
   \   00004D   EF           MOV     A,R7
   \   00004E   FB           MOV     R3,A
   \   00004F   12....       LCALL   ??ucI2CEcrireOctet
   \   000052   E9           MOV     A,R1
   \   000053   6401         XRL     A,#0x1
   \   000055   60E8         JZ      ??vI2CLireDonnee_6
     96                break;
   \   000057   02....       LJMP    ??vI2CLireDonnee_4
     97          //----------------------------------------------------------------------
     98                case ADR8BIT:
     99                 vI2CStart();
   \                     ??vI2CLireDonnee_2:
   \   00005A                ; Setup parameters for call to function CLI2CBase::vI2CStart()
   \   00005A   EE           MOV     A,R6
   \   00005B   FA           MOV     R2,A
   \   00005C   EF           MOV     A,R7
   \   00005D   FB           MOV     R3,A
   \   00005E   12....       LCALL   ??vI2CStart
   \   000061   8007         SJMP    ??vI2CLireDonnee_7
    100                 while(ucI2CEcrireOctet(ucAdrBoitier + WRITE)             == NACK)
    101                   {
    102                     vI2CStart();
   \                     ??vI2CLireDonnee_8:
   \   000063                ; Setup parameters for call to function CLI2CBase::vI2CStart()
   \   000063   EE           MOV     A,R6
   \   000064   FA           MOV     R2,A
   \   000065   EF           MOV     A,R7
   \   000066   FB           MOV     R3,A
   \   000067   12....       LCALL   ??vI2CStart
    103                   }
   \                     ??vI2CLireDonnee_7:
   \   00006A                ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
   \   00006A   A9..         MOV     R1,?V0 + 1
   \   00006C   EE           MOV     A,R6
   \   00006D   FA           MOV     R2,A
   \   00006E   EF           MOV     A,R7
   \   00006F   FB           MOV     R3,A
   \   000070   12....       LCALL   ??ucI2CEcrireOctet
   \   000073   E9           MOV     A,R1
   \   000074   6401         XRL     A,#0x1
   \   000076   60EB         JZ      ??vI2CLireDonnee_8
    104                 while(ucI2CEcrireOctet(unAdresse.stDoubleOctet.ucOctet1) == NACK);
   \                     ??vI2CLireDonnee_9:
   \   000078                ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
   \   000078   85..82       MOV     DPL,?XSP + 0
   \   00007B   85..83       MOV     DPH,?XSP + 1
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   F9           MOV     R1,A
   \   000080   EE           MOV     A,R6
   \   000081   FA           MOV     R2,A
   \   000082   EF           MOV     A,R7
   \   000083   FB           MOV     R3,A
   \   000084   12....       LCALL   ??ucI2CEcrireOctet
   \   000087   E9           MOV     A,R1
   \   000088   6401         XRL     A,#0x1
   \   00008A   60EC         JZ      ??vI2CLireDonnee_9
    105                 vI2CStart();
   \   00008C                ; Setup parameters for call to function CLI2CBase::vI2CStart()
   \   00008C   EE           MOV     A,R6
   \   00008D   FA           MOV     R2,A
   \   00008E   EF           MOV     A,R7
   \   00008F   FB           MOV     R3,A
   \   000090   12....       LCALL   ??vI2CStart
   \   000093   8007         SJMP    ??vI2CLireDonnee_10
    106                 while(ucI2CEcrireOctet(ucAdrBoitier + READ)              == NACK)
    107                   {
    108                     vI2CStart();
   \                     ??vI2CLireDonnee_11:
   \   000095                ; Setup parameters for call to function CLI2CBase::vI2CStart()
   \   000095   EE           MOV     A,R6
   \   000096   FA           MOV     R2,A
   \   000097   EF           MOV     A,R7
   \   000098   FB           MOV     R3,A
   \   000099   12....       LCALL   ??vI2CStart
    109                   }
   \                     ??vI2CLireDonnee_10:
   \   00009C                ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
   \   00009C   7401         MOV     A,#0x1
   \   00009E   25..         ADD     A,?V0 + 1
   \   0000A0   F9           MOV     R1,A
   \   0000A1   EE           MOV     A,R6
   \   0000A2   FA           MOV     R2,A
   \   0000A3   EF           MOV     A,R7
   \   0000A4   FB           MOV     R3,A
   \   0000A5   12....       LCALL   ??ucI2CEcrireOctet
   \   0000A8   E9           MOV     A,R1
   \   0000A9   6401         XRL     A,#0x1
   \   0000AB   60E8         JZ      ??vI2CLireDonnee_11
    110                break;
   \   0000AD   8066         SJMP    ??vI2CLireDonnee_4
    111          //----------------------------------------------------------------------
    112                case ADR16BIT:
    113                 vI2CStart();
   \                     ??vI2CLireDonnee_3:
   \   0000AF                ; Setup parameters for call to function CLI2CBase::vI2CStart()
   \   0000AF   EE           MOV     A,R6
   \   0000B0   FA           MOV     R2,A
   \   0000B1   EF           MOV     A,R7
   \   0000B2   FB           MOV     R3,A
   \   0000B3   12....       LCALL   ??vI2CStart
   \   0000B6   8007         SJMP    ??vI2CLireDonnee_12
    114                 while(ucI2CEcrireOctet(ucAdrBoitier + WRITE)             == NACK)
    115                   {
    116                     vI2CStart();
   \                     ??vI2CLireDonnee_13:
   \   0000B8                ; Setup parameters for call to function CLI2CBase::vI2CStart()
   \   0000B8   EE           MOV     A,R6
   \   0000B9   FA           MOV     R2,A
   \   0000BA   EF           MOV     A,R7
   \   0000BB   FB           MOV     R3,A
   \   0000BC   12....       LCALL   ??vI2CStart
    117                   }
   \                     ??vI2CLireDonnee_12:
   \   0000BF                ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
   \   0000BF   A9..         MOV     R1,?V0 + 1
   \   0000C1   EE           MOV     A,R6
   \   0000C2   FA           MOV     R2,A
   \   0000C3   EF           MOV     A,R7
   \   0000C4   FB           MOV     R3,A
   \   0000C5   12....       LCALL   ??ucI2CEcrireOctet
   \   0000C8   E9           MOV     A,R1
   \   0000C9   6401         XRL     A,#0x1
   \   0000CB   60EB         JZ      ??vI2CLireDonnee_13
    118                 while(ucI2CEcrireOctet(unAdresse.stDoubleOctet.ucOctet1) == NACK);
   \                     ??vI2CLireDonnee_14:
   \   0000CD                ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
   \   0000CD   85..82       MOV     DPL,?XSP + 0
   \   0000D0   85..83       MOV     DPH,?XSP + 1
   \   0000D3   E0           MOVX    A,@DPTR
   \   0000D4   F9           MOV     R1,A
   \   0000D5   EE           MOV     A,R6
   \   0000D6   FA           MOV     R2,A
   \   0000D7   EF           MOV     A,R7
   \   0000D8   FB           MOV     R3,A
   \   0000D9   12....       LCALL   ??ucI2CEcrireOctet
   \   0000DC   E9           MOV     A,R1
   \   0000DD   6401         XRL     A,#0x1
   \   0000DF   60EC         JZ      ??vI2CLireDonnee_14
    119                 while(ucI2CEcrireOctet(unAdresse.stDoubleOctet.ucOctet2) == NACK);
   \                     ??vI2CLireDonnee_15:
   \   0000E1                ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
   \   0000E1   7401         MOV     A,#0x1
   \   0000E3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E6   E0           MOVX    A,@DPTR
   \   0000E7   F9           MOV     R1,A
   \   0000E8   EE           MOV     A,R6
   \   0000E9   FA           MOV     R2,A
   \   0000EA   EF           MOV     A,R7
   \   0000EB   FB           MOV     R3,A
   \   0000EC   12....       LCALL   ??ucI2CEcrireOctet
   \   0000EF   E9           MOV     A,R1
   \   0000F0   6401         XRL     A,#0x1
   \   0000F2   60ED         JZ      ??vI2CLireDonnee_15
    120                 vI2CStart();
   \   0000F4                ; Setup parameters for call to function CLI2CBase::vI2CStart()
   \   0000F4   EE           MOV     A,R6
   \   0000F5   FA           MOV     R2,A
   \   0000F6   EF           MOV     A,R7
   \   0000F7   FB           MOV     R3,A
   \   0000F8   12....       LCALL   ??vI2CStart
   \   0000FB   8007         SJMP    ??vI2CLireDonnee_16
    121                 while(ucI2CEcrireOctet(ucAdrBoitier + READ)              == NACK)
    122                   {
    123                     vI2CStart();
   \                     ??vI2CLireDonnee_17:
   \   0000FD                ; Setup parameters for call to function CLI2CBase::vI2CStart()
   \   0000FD   EE           MOV     A,R6
   \   0000FE   FA           MOV     R2,A
   \   0000FF   EF           MOV     A,R7
   \   000100   FB           MOV     R3,A
   \   000101   12....       LCALL   ??vI2CStart
    124                   }
   \                     ??vI2CLireDonnee_16:
   \   000104                ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
   \   000104   7401         MOV     A,#0x1
   \   000106   25..         ADD     A,?V0 + 1
   \   000108   F9           MOV     R1,A
   \   000109   EE           MOV     A,R6
   \   00010A   FA           MOV     R2,A
   \   00010B   EF           MOV     A,R7
   \   00010C   FB           MOV     R3,A
   \   00010D   12....       LCALL   ??ucI2CEcrireOctet
   \   000110   E9           MOV     A,R1
   \   000111   6401         XRL     A,#0x1
   \   000113   60E8         JZ      ??vI2CLireDonnee_17
    125                break;
    126          //----------------------------------------------------------------------
    127                default:
    128                break;
    129              }
    130          //----------------------------------------------------------------------
    131          
    132             if(ucNbrLectures > 1)
   \                     ??vI2CLireDonnee_4:
   \   000115   E5..         MOV     A,?V0 + 6
   \   000117   C3           CLR     C
   \   000118   9402         SUBB    A,#0x2
   \   00011A   404F         JC      ??vI2CLireDonnee_18
    133              {
    134                for(UC i = 0; i < ucNbrLectures - 1; i++)
   \   00011C   75..00       MOV     ?V0 + 0,#0x0
   \   00011F   8026         SJMP    ??vI2CLireDonnee_19
    135                 {
    136                   ucpRecevoirDonnee[i] = ucI2CLireOctet(ACK);
   \                     ??vI2CLireDonnee_20:
   \   000121                ; Setup parameters for call to function CLI2CBase::ucI2CLireOctet(UC)
   \   000121   7900         MOV     R1,#0x0
   \   000123   EE           MOV     A,R6
   \   000124   FA           MOV     R2,A
   \   000125   EF           MOV     A,R7
   \   000126   FB           MOV     R3,A
   \   000127   12....       LCALL   ??ucI2CLireOctet
   \   00012A   E9           MOV     A,R1
   \   00012B   C0E0         PUSH    A
   \   00012D   E5..         MOV     A,?V0 + 0
   \   00012F   A8..         MOV     R0,?V0 + 0
   \   000131   7900         MOV     R1,#0x0
   \   000133   7411         MOV     A,#0x11
   \   000135   12....       LCALL   ?XSTACK_DISP0_8
   \   000138   E0           MOVX    A,@DPTR
   \   000139   28           ADD     A,R0
   \   00013A   FA           MOV     R2,A
   \   00013B   A3           INC     DPTR
   \   00013C   E0           MOVX    A,@DPTR
   \   00013D   39           ADDC    A,R1
   \   00013E   8A82         MOV     DPL,R2
   \   000140   F583         MOV     DPH,A
   \   000142   D0E0         POP     A
   \   000144   F0           MOVX    @DPTR,A
    137                 }
   \   000145   05..         INC     ?V0 + 0
   \                     ??vI2CLireDonnee_19:
   \   000147   85....       MOV     ?V0 + 2,?V0 + 0
   \   00014A   75..00       MOV     ?V0 + 3,#0x0
   \   00014D   85....       MOV     ?V0 + 4,?V0 + 6
   \   000150   75..00       MOV     ?V0 + 5,#0x0
   \   000153   E5..         MOV     A,?V0 + 4
   \   000155   24FF         ADD     A,#-0x1
   \   000157   F8           MOV     R0,A
   \   000158   E5..         MOV     A,?V0 + 5
   \   00015A   34FF         ADDC    A,#-0x1
   \   00015C   F9           MOV     R1,A
   \   00015D   C3           CLR     C
   \   00015E   E5..         MOV     A,?V0 + 2
   \   000160   98           SUBB    A,R0
   \   000161   E5..         MOV     A,?V0 + 3
   \   000163   99           SUBB    A,R1
   \   000164   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000166   65D0         XRL     A,PSW
   \   000168   33           RLC     A
   \   000169   40B6         JC      ??vI2CLireDonnee_20
    138              }
    139             ucpRecevoirDonnee[ucNbrLectures - 1] = ucI2CLireOctet(NACK);
   \                     ??vI2CLireDonnee_18:
   \   00016B                ; Setup parameters for call to function CLI2CBase::ucI2CLireOctet(UC)
   \   00016B   7901         MOV     R1,#0x1
   \   00016D   EE           MOV     A,R6
   \   00016E   FA           MOV     R2,A
   \   00016F   EF           MOV     A,R7
   \   000170   FB           MOV     R3,A
   \   000171   12....       LCALL   ??ucI2CLireOctet
   \   000174   E9           MOV     A,R1
   \   000175   C0E0         PUSH    A
   \   000177   E5..         MOV     A,?V0 + 6
   \   000179   A8..         MOV     R0,?V0 + 6
   \   00017B   7900         MOV     R1,#0x0
   \   00017D   7411         MOV     A,#0x11
   \   00017F   12....       LCALL   ?XSTACK_DISP0_8
   \   000182   E0           MOVX    A,@DPTR
   \   000183   28           ADD     A,R0
   \   000184   F8           MOV     R0,A
   \   000185   A3           INC     DPTR
   \   000186   E0           MOVX    A,@DPTR
   \   000187   39           ADDC    A,R1
   \   000188   F9           MOV     R1,A
   \   000189   E8           MOV     A,R0
   \   00018A   24FF         ADD     A,#-0x1
   \   00018C   F582         MOV     DPL,A
   \   00018E   E9           MOV     A,R1
   \   00018F   34FF         ADDC    A,#-0x1
   \   000191   F583         MOV     DPH,A
   \   000193   D0E0         POP     A
   \   000195   F0           MOVX    @DPTR,A
    140             vI2CStop();
   \   000196                ; Setup parameters for call to function CLI2CBase::vI2CStop()
   \   000196   EE           MOV     A,R6
   \   000197   FA           MOV     R2,A
   \   000198   EF           MOV     A,R7
   \   000199   FB           MOV     R3,A
   \   00019A   12....       LCALL   ??vI2CStop
    141            }
   \   00019D   7402         MOV     A,#0x2
   \   00019F   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001A2   7F07         MOV     R7,#0x7
   \   0001A4   02....       LJMP    ?FUNC_LEAVE_XDATA
    142          
    143          ///////////////////////////////////////////////////////////////////////////////
    144          // void CLI2CPort :: vI2CEcrireDonnee(UC ucAdrBoitier,UC ucAdrRegistre,
    145          //                                    UC ucDonnee)
    146          ///////////////////////////////////////////////////////////////////////////////
    147          //
    148          // Description:
    149          //
    150          // Parametres d'entrees: null
    151          //
    152          // Parametres de sortie: null
    153          //
    154          // Appel de la fonction:
    155          //
    156          // Cree le  4 avril 2014 par Louis-Normand Ang Houle
    157          //
    158          // Modifications:
    159          // -
    160          //
    161          ///////////////////////////////////////////////////////////////////////////////

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    162          void CLI2CPort :: vI2CEcrireDonnee(UC ucAdrBoitier, UC ucAdrRegistre,
   \                     ??vI2CEcrireDonnee:
    163                                             UC ucDonnee)
    164           {
   \   000000   74F8         MOV     A,#-0x8
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 8
   \   000005                ; Auto size: 0
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   89..         MOV     ?V0 + 0,R1
   \   00000B   EC           MOV     A,R4
   \   00000C   FF           MOV     R7,A
   \   00000D   ED           MOV     A,R5
   \   00000E   FE           MOV     R6,A
    165             vI2CStart();
   \   00000F                ; Setup parameters for call to function CLI2CBase::vI2CStart()
   \   00000F   AA82         MOV     R2,DPL
   \   000011   AB83         MOV     R3,DPH
   \   000013   12....       LCALL   ??vI2CStart
   \   000016   8007         SJMP    ??vI2CEcrireDonnee_2
    166             while(ucI2CEcrireOctet(ucAdrBoitier + WRITE) == NACK)
    167              {
    168                vI2CStart();
   \                     ??vI2CEcrireDonnee_3:
   \   000018                ; Setup parameters for call to function CLI2CBase::vI2CStart()
   \   000018   AA82         MOV     R2,DPL
   \   00001A   AB83         MOV     R3,DPH
   \   00001C   12....       LCALL   ??vI2CStart
    169              }
   \                     ??vI2CEcrireDonnee_2:
   \   00001F                ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
   \   00001F   A9..         MOV     R1,?V0 + 0
   \   000021   AA82         MOV     R2,DPL
   \   000023   AB83         MOV     R3,DPH
   \   000025   12....       LCALL   ??ucI2CEcrireOctet
   \   000028   E9           MOV     A,R1
   \   000029   6401         XRL     A,#0x1
   \   00002B   60EB         JZ      ??vI2CEcrireDonnee_3
    170             while(ucI2CEcrireOctet(ucAdrRegistre)        == NACK);
   \                     ??vI2CEcrireDonnee_4:
   \   00002D                ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
   \   00002D   EF           MOV     A,R7
   \   00002E   F9           MOV     R1,A
   \   00002F   AA82         MOV     R2,DPL
   \   000031   AB83         MOV     R3,DPH
   \   000033   12....       LCALL   ??ucI2CEcrireOctet
   \   000036   E9           MOV     A,R1
   \   000037   6401         XRL     A,#0x1
   \   000039   60F2         JZ      ??vI2CEcrireDonnee_4
    171             while(ucI2CEcrireOctet(ucDonnee)             == NACK);
   \                     ??vI2CEcrireDonnee_5:
   \   00003B                ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
   \   00003B   EE           MOV     A,R6
   \   00003C   F9           MOV     R1,A
   \   00003D   AA82         MOV     R2,DPL
   \   00003F   AB83         MOV     R3,DPH
   \   000041   12....       LCALL   ??ucI2CEcrireOctet
   \   000044   E9           MOV     A,R1
   \   000045   6401         XRL     A,#0x1
   \   000047   60F2         JZ      ??vI2CEcrireDonnee_5
    172             vI2CStop();
   \   000049                ; Setup parameters for call to function CLI2CBase::vI2CStop()
   \   000049   AA82         MOV     R2,DPL
   \   00004B   AB83         MOV     R3,DPH
   \   00004D   12....       LCALL   ??vI2CStop
    173           }
   \   000050   7F01         MOV     R7,#0x1
   \   000052   02....       LJMP    ?FUNC_LEAVE_XDATA
    174          
    175          ///////////////////////////////////////////////////////////////////////////////
    176          //void CLI2CPort :: vI2CEcrireDonnee(UC ucAdrBoitier, USI uiAdrRegistre,
    177          //                                   UC ucTypeAdr, UC *ucpDonnee,
    178          //                                   UC ucNbrEcritures)
    179          ///////////////////////////////////////////////////////////////////////////////
    180          //
    181          // Description:
    182          //
    183          // Parametres d'entrees: null
    184          //
    185          // Parametres de sortie: null
    186          //
    187          // Appel de la fonction:
    188          //
    189          // Cree le  4 avril 2014 par Louis-Normand Ang Houle
    190          //
    191          // Modifications:
    192          // -
    193          //
    194          ///////////////////////////////////////////////////////////////////////////////
    195          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    196          void CLI2CPort :: vI2CEcrireDonnee(UC ucAdrBoitier, USI uiAdrRegistre,
   \                     ??vI2CEcrireDonnee_1:
    197                                             UC ucTypeAdr,UC *ucpDonnee,UC ucNbrEcritures)
    198           {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   89..         MOV     ?V0 + 0,R1
   \   000010   7411         MOV     A,#0x11
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F8           MOV     R0,A
   \   000017   7412         MOV     A,#0x12
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V0 + 6,A
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V0 + 7,A
   \   000023   7414         MOV     A,#0x14
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F5..         MOV     ?V0 + 4,A
    199             union UNEntierOctet unAdresse;
    200          
    201             unAdresse.uiEntier = uiAdrRegistre;
   \   00002B   85..82       MOV     DPL,?XSP + 0
   \   00002E   85..83       MOV     DPH,?XSP + 1
   \   000031   EC           MOV     A,R4
   \   000032   F0           MOVX    @DPTR,A
   \   000033   A3           INC     DPTR
   \   000034   ED           MOV     A,R5
   \   000035   F0           MOVX    @DPTR,A
    202          //----------------------------------------------------------------------
    203             switch (ucTypeAdr)
   \   000036   E8           MOV     A,R0
   \   000037   6009         JZ      ??vI2CEcrireDonnee_6
   \   000039   14           DEC     A
   \   00003A   6026         JZ      ??vI2CEcrireDonnee_7
   \   00003C   14           DEC     A
   \   00003D   6057         JZ      ??vI2CEcrireDonnee_8
   \   00003F   02....       LJMP    ??vI2CEcrireDonnee_9
    204              {
    205                case PASADR:
    206                  vI2CStart();
   \                     ??vI2CEcrireDonnee_6:
   \   000042                ; Setup parameters for call to function CLI2CBase::vI2CStart()
   \   000042   EE           MOV     A,R6
   \   000043   FA           MOV     R2,A
   \   000044   EF           MOV     A,R7
   \   000045   FB           MOV     R3,A
   \   000046   12....       LCALL   ??vI2CStart
   \   000049   8007         SJMP    ??vI2CEcrireDonnee_10
    207                  while(ucI2CEcrireOctet(ucAdrBoitier + WRITE)             == NACK)
    208                   {
    209                     vI2CStart();
   \                     ??vI2CEcrireDonnee_11:
   \   00004B                ; Setup parameters for call to function CLI2CBase::vI2CStart()
   \   00004B   EE           MOV     A,R6
   \   00004C   FA           MOV     R2,A
   \   00004D   EF           MOV     A,R7
   \   00004E   FB           MOV     R3,A
   \   00004F   12....       LCALL   ??vI2CStart
    210                   }
   \                     ??vI2CEcrireDonnee_10:
   \   000052                ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
   \   000052   A9..         MOV     R1,?V0 + 0
   \   000054   EE           MOV     A,R6
   \   000055   FA           MOV     R2,A
   \   000056   EF           MOV     A,R7
   \   000057   FB           MOV     R3,A
   \   000058   12....       LCALL   ??ucI2CEcrireOctet
   \   00005B   E9           MOV     A,R1
   \   00005C   6401         XRL     A,#0x1
   \   00005E   60EB         JZ      ??vI2CEcrireDonnee_11
    211                break;
   \   000060   8079         SJMP    ??vI2CEcrireDonnee_9
    212          //----------------------------------------------------------------------
    213                case ADR8BIT:
    214                  vI2CStart();
   \                     ??vI2CEcrireDonnee_7:
   \   000062                ; Setup parameters for call to function CLI2CBase::vI2CStart()
   \   000062   EE           MOV     A,R6
   \   000063   FA           MOV     R2,A
   \   000064   EF           MOV     A,R7
   \   000065   FB           MOV     R3,A
   \   000066   12....       LCALL   ??vI2CStart
   \   000069   8007         SJMP    ??vI2CEcrireDonnee_12
    215                  while(ucI2CEcrireOctet(ucAdrBoitier + WRITE)             == NACK)
    216                   {
    217                     vI2CStart();
   \                     ??vI2CEcrireDonnee_13:
   \   00006B                ; Setup parameters for call to function CLI2CBase::vI2CStart()
   \   00006B   EE           MOV     A,R6
   \   00006C   FA           MOV     R2,A
   \   00006D   EF           MOV     A,R7
   \   00006E   FB           MOV     R3,A
   \   00006F   12....       LCALL   ??vI2CStart
    218                   }
   \                     ??vI2CEcrireDonnee_12:
   \   000072                ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
   \   000072   A9..         MOV     R1,?V0 + 0
   \   000074   EE           MOV     A,R6
   \   000075   FA           MOV     R2,A
   \   000076   EF           MOV     A,R7
   \   000077   FB           MOV     R3,A
   \   000078   12....       LCALL   ??ucI2CEcrireOctet
   \   00007B   E9           MOV     A,R1
   \   00007C   6401         XRL     A,#0x1
   \   00007E   60EB         JZ      ??vI2CEcrireDonnee_13
    219                  while(ucI2CEcrireOctet(unAdresse.stDoubleOctet.ucOctet1) == NACK);
   \                     ??vI2CEcrireDonnee_14:
   \   000080                ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
   \   000080   85..82       MOV     DPL,?XSP + 0
   \   000083   85..83       MOV     DPH,?XSP + 1
   \   000086   E0           MOVX    A,@DPTR
   \   000087   F9           MOV     R1,A
   \   000088   EE           MOV     A,R6
   \   000089   FA           MOV     R2,A
   \   00008A   EF           MOV     A,R7
   \   00008B   FB           MOV     R3,A
   \   00008C   12....       LCALL   ??ucI2CEcrireOctet
   \   00008F   E9           MOV     A,R1
   \   000090   6401         XRL     A,#0x1
   \   000092   60EC         JZ      ??vI2CEcrireDonnee_14
    220                break;
   \   000094   8045         SJMP    ??vI2CEcrireDonnee_9
    221          //----------------------------------------------------------------------
    222                case ADR16BIT:
    223                  vI2CStart();
   \                     ??vI2CEcrireDonnee_8:
   \   000096                ; Setup parameters for call to function CLI2CBase::vI2CStart()
   \   000096   EE           MOV     A,R6
   \   000097   FA           MOV     R2,A
   \   000098   EF           MOV     A,R7
   \   000099   FB           MOV     R3,A
   \   00009A   12....       LCALL   ??vI2CStart
   \   00009D   8007         SJMP    ??vI2CEcrireDonnee_15
    224                  while(ucI2CEcrireOctet(ucAdrBoitier + WRITE)             == NACK)
    225                   {
    226                     vI2CStart();
   \                     ??vI2CEcrireDonnee_16:
   \   00009F                ; Setup parameters for call to function CLI2CBase::vI2CStart()
   \   00009F   EE           MOV     A,R6
   \   0000A0   FA           MOV     R2,A
   \   0000A1   EF           MOV     A,R7
   \   0000A2   FB           MOV     R3,A
   \   0000A3   12....       LCALL   ??vI2CStart
    227                   }
   \                     ??vI2CEcrireDonnee_15:
   \   0000A6                ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
   \   0000A6   A9..         MOV     R1,?V0 + 0
   \   0000A8   EE           MOV     A,R6
   \   0000A9   FA           MOV     R2,A
   \   0000AA   EF           MOV     A,R7
   \   0000AB   FB           MOV     R3,A
   \   0000AC   12....       LCALL   ??ucI2CEcrireOctet
   \   0000AF   E9           MOV     A,R1
   \   0000B0   6401         XRL     A,#0x1
   \   0000B2   60EB         JZ      ??vI2CEcrireDonnee_16
    228                  while(ucI2CEcrireOctet(unAdresse.stDoubleOctet.ucOctet1) == NACK);
   \                     ??vI2CEcrireDonnee_17:
   \   0000B4                ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
   \   0000B4   85..82       MOV     DPL,?XSP + 0
   \   0000B7   85..83       MOV     DPH,?XSP + 1
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   F9           MOV     R1,A
   \   0000BC   EE           MOV     A,R6
   \   0000BD   FA           MOV     R2,A
   \   0000BE   EF           MOV     A,R7
   \   0000BF   FB           MOV     R3,A
   \   0000C0   12....       LCALL   ??ucI2CEcrireOctet
   \   0000C3   E9           MOV     A,R1
   \   0000C4   6401         XRL     A,#0x1
   \   0000C6   60EC         JZ      ??vI2CEcrireDonnee_17
    229                  while(ucI2CEcrireOctet(unAdresse.stDoubleOctet.ucOctet2) == NACK);
   \                     ??vI2CEcrireDonnee_18:
   \   0000C8                ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
   \   0000C8   7401         MOV     A,#0x1
   \   0000CA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CD   E0           MOVX    A,@DPTR
   \   0000CE   F9           MOV     R1,A
   \   0000CF   EE           MOV     A,R6
   \   0000D0   FA           MOV     R2,A
   \   0000D1   EF           MOV     A,R7
   \   0000D2   FB           MOV     R3,A
   \   0000D3   12....       LCALL   ??ucI2CEcrireOctet
   \   0000D6   E9           MOV     A,R1
   \   0000D7   6401         XRL     A,#0x1
   \   0000D9   60ED         JZ      ??vI2CEcrireDonnee_18
    230                break;
    231          //----------------------------------------------------------------------
    232                default:
    233                break;
    234              }
    235          //----------------------------------------------------------------------
    236             if(ucNbrEcritures > 1)
   \                     ??vI2CEcrireDonnee_9:
   \   0000DB   E5..         MOV     A,?V0 + 4
   \   0000DD   C3           CLR     C
   \   0000DE   9402         SUBB    A,#0x2
   \   0000E0   402E         JC      ??vI2CEcrireDonnee_19
    237              {
    238                for(UC i = 0; i < ucNbrEcritures; i++)
   \   0000E2   75..00       MOV     ?V0 + 1,#0x0
   \                     ??vI2CEcrireDonnee_20:
   \   0000E5   E5..         MOV     A,?V0 + 1
   \   0000E7   C3           CLR     C
   \   0000E8   95..         SUBB    A,?V0 + 4
   \   0000EA   5038         JNC     ??vI2CEcrireDonnee_21
    239                 {
    240                   while(ucI2CEcrireOctet(ucpDonnee[i])== NACK);
   \                     ??vI2CEcrireDonnee_22:
   \   0000EC                ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
   \   0000EC   85....       MOV     ?V0 + 2,?V0 + 1
   \   0000EF   75..00       MOV     ?V0 + 3,#0x0
   \   0000F2   E5..         MOV     A,?V0 + 6
   \   0000F4   25..         ADD     A,?V0 + 2
   \   0000F6   F582         MOV     DPL,A
   \   0000F8   E5..         MOV     A,?V0 + 7
   \   0000FA   35..         ADDC    A,?V0 + 3
   \   0000FC   F583         MOV     DPH,A
   \   0000FE   E0           MOVX    A,@DPTR
   \   0000FF   F9           MOV     R1,A
   \   000100   EE           MOV     A,R6
   \   000101   FA           MOV     R2,A
   \   000102   EF           MOV     A,R7
   \   000103   FB           MOV     R3,A
   \   000104   12....       LCALL   ??ucI2CEcrireOctet
   \   000107   E9           MOV     A,R1
   \   000108   6401         XRL     A,#0x1
   \   00010A   60E0         JZ      ??vI2CEcrireDonnee_22
    241                 }
   \   00010C   05..         INC     ?V0 + 1
   \   00010E   80D5         SJMP    ??vI2CEcrireDonnee_20
    242              }
    243             else while(ucI2CEcrireOctet(ucpDonnee[0])== NACK);
   \                     ??vI2CEcrireDonnee_19:
   \   000110                ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
   \   000110   85..82       MOV     DPL,?V0 + 6
   \   000113   85..83       MOV     DPH,?V0 + 7
   \   000116   E0           MOVX    A,@DPTR
   \   000117   F9           MOV     R1,A
   \   000118   EE           MOV     A,R6
   \   000119   FA           MOV     R2,A
   \   00011A   EF           MOV     A,R7
   \   00011B   FB           MOV     R3,A
   \   00011C   12....       LCALL   ??ucI2CEcrireOctet
   \   00011F   E9           MOV     A,R1
   \   000120   6401         XRL     A,#0x1
   \   000122   60EC         JZ      ??vI2CEcrireDonnee_19
    244             vI2CStop();
   \                     ??vI2CEcrireDonnee_21:
   \   000124                ; Setup parameters for call to function CLI2CBase::vI2CStop()
   \   000124   EE           MOV     A,R6
   \   000125   FA           MOV     R2,A
   \   000126   EF           MOV     A,R7
   \   000127   FB           MOV     R3,A
   \   000128   12....       LCALL   ??vI2CStop
    245           }
   \   00012B   7402         MOV     A,#0x2
   \   00012D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000130   7F08         MOV     R7,#0x8
   \   000132   02....       LJMP    ?FUNC_LEAVE_XDATA

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \   __near_func __xdata_reentrant CLI2CPort &CLI2CPort::new CLI2CPort()
   \                     `??new CLI2CPort`:
   \   000000   C0..         PUSH    ?V0 + 0
   \   000002   C0..         PUSH    ?V0 + 1
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004                ; Setup parameters for call to function operator new(unsigned int)
   \   000004   7A02         MOV     R2,#0x2
   \   000006   7B00         MOV     R3,#0x0
   \   000008   12....       LCALL   `??operator new`
   \   00000B   8A..         MOV     ?V0 + 0,R2
   \   00000D   8B..         MOV     ?V0 + 1,R3
   \   00000F   A8..         MOV     R0,?V0 + 0
   \   000011   A9..         MOV     R1,?V0 + 1
   \   000013   E8           MOV     A,R0
   \   000014   FA           MOV     R2,A
   \   000015   E9           MOV     A,R1
   \   000016   FB           MOV     R3,A
   \   000017   E8           MOV     A,R0
   \   000018   49           ORL     A,R1
   \   000019   600D         JZ      `??new CLI2CPort_1`
   \   00001B                ; Setup parameters for call to function CLI2CPort::CLI2CPort()
   \   00001B   12....       LCALL   ??CLI2CPort
   \   00001E   8A..         MOV     ?V0 + 0,R2
   \   000020   8B..         MOV     ?V0 + 1,R3
   \   000022   AA..         MOV     R2,?V0 + 0
   \   000024   AB..         MOV     R3,?V0 + 1
   \   000026   8004         SJMP    `??new CLI2CPort_2`
   \                     `??new CLI2CPort_1`:
   \   000028   7A00         MOV     R2,#0x0
   \   00002A   7B00         MOV     R3,#0x0
   \                     `??new CLI2CPort_2`:
   \   00002C   D0..         POP     ?V0 + 1
   \   00002E   D0..         POP     ?V0 + 0
   \   000030   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \   __near_func __xdata_reentrant void CLI2CPort::delete ~CLI2CPort(CLI2CPort *)
   \                     `??delete ~CLI2CPort`:
   \   000000   74F8         MOV     A,#-0x8
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 8
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   EE           MOV     A,R6
   \   00000A   4F           ORL     A,R7
   \   00000B   600E         JZ      `??delete ~CLI2CPort_1`
   \   00000D                ; Setup parameters for call to function CLI2CPort::~CLI2CPort()
   \   00000D   EE           MOV     A,R6
   \   00000E   FA           MOV     R2,A
   \   00000F   EF           MOV     A,R7
   \   000010   FB           MOV     R3,A
   \   000011   12....       LCALL   `?~CLI2CPort`
   \   000014                ; Setup parameters for call to function operator delete(void *)
   \   000014   EE           MOV     A,R6
   \   000015   FA           MOV     R2,A
   \   000016   EF           MOV     A,R7
   \   000017   FB           MOV     R3,A
   \   000018   12....       LCALL   `??operator delete`
   \                     `??delete ~CLI2CPort_1`:
   \   00001B   7F01         MOV     R7,#0x1
   \   00001D   02....       LJMP    ?FUNC_LEAVE_XDATA
    246          //LinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxTUX
    247          

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     CLI2CPort::CLI2CPort()             2      0      0
       -> CLI2CBase::CLI2CBase()        4      0      0
     CLI2CPort::delete ~CLI2CPort(CLI2CPort *)
                                        0      0      8
       -> CLI2CPort::~CLI2CPort()       0      0     16
       -> operator delete(void *)       0      0     16
     CLI2CPort::new CLI2CPort()         2      0      0
       -> operator new(unsigned int)
                                        4      0      0
       -> CLI2CPort::CLI2CPort()        4      0      0
     CLI2CPort::ucI2CLireDonnee(UC, UC)
                                        0      0      8
       -> CLI2CBase::vI2CStart()        0      0     16
       -> CLI2CBase::vI2CStart()        0      0     16
       -> CLI2CBase::ucI2CEcrireOctet(UC)
                                        0      0     16
       -> CLI2CBase::ucI2CEcrireOctet(UC)
                                        0      0     16
       -> CLI2CBase::vI2CStart()        0      0     16
       -> CLI2CBase::vI2CStart()        0      0     16
       -> CLI2CBase::ucI2CEcrireOctet(UC)
                                        0      0     16
       -> CLI2CBase::ucI2CLireOctet(UC)
                                        0      0     16
       -> CLI2CBase::vI2CStop()         0      0     16
     CLI2CPort::vI2CEcrireDonnee(UC, UC, UC)
                                        0      0      8
       -> CLI2CBase::vI2CStart()        0      0     16
       -> CLI2CBase::vI2CStart()        0      0     16
       -> CLI2CBase::ucI2CEcrireOctet(UC)
                                        0      0     16
       -> CLI2CBase::ucI2CEcrireOctet(UC)
                                        0      0     16
       -> CLI2CBase::ucI2CEcrireOctet(UC)
                                        0      0     16
       -> CLI2CBase::vI2CStop()         0      0     16
     CLI2CPort::vI2CEcrireDonnee(UC, USI, UC, UC *, UC)
                                        0      0     21
       -> CLI2CBase::vI2CStart()        0      0     34
       -> CLI2CBase::vI2CStart()        0      0     34
       -> CLI2CBase::ucI2CEcrireOctet(UC)
                                        0      0     34
       -> CLI2CBase::vI2CStart()        0      0     34
       -> CLI2CBase::vI2CStart()        0      0     34
       -> CLI2CBase::ucI2CEcrireOctet(UC)
                                        0      0     34
       -> CLI2CBase::ucI2CEcrireOctet(UC)
                                        0      0     34
       -> CLI2CBase::vI2CStart()        0      0     34
       -> CLI2CBase::vI2CStart()        0      0     34
       -> CLI2CBase::ucI2CEcrireOctet(UC)
                                        0      0     34
       -> CLI2CBase::ucI2CEcrireOctet(UC)
                                        0      0     34
       -> CLI2CBase::ucI2CEcrireOctet(UC)
                                        0      0     34
       -> CLI2CBase::ucI2CEcrireOctet(UC)
                                        0      0     34
       -> CLI2CBase::ucI2CEcrireOctet(UC)
                                        0      0     34
       -> CLI2CBase::vI2CStop()         0      0     34
     CLI2CPort::vI2CLireDonnee(UC, USI, UC, UC *, UC)
                                        1      0     20
       -> CLI2CBase::vI2CStart()        0      0     32
       -> CLI2CBase::vI2CStart()        0      0     32
       -> CLI2CBase::ucI2CEcrireOctet(UC)
                                        0      0     32
       -> CLI2CBase::vI2CStart()        0      0     32
       -> CLI2CBase::vI2CStart()        0      0     32
       -> CLI2CBase::ucI2CEcrireOctet(UC)
                                        0      0     32
       -> CLI2CBase::ucI2CEcrireOctet(UC)
                                        0      0     32
       -> CLI2CBase::vI2CStart()        0      0     32
       -> CLI2CBase::vI2CStart()        0      0     32
       -> CLI2CBase::ucI2CEcrireOctet(UC)
                                        0      0     32
       -> CLI2CBase::vI2CStart()        0      0     32
       -> CLI2CBase::vI2CStart()        0      0     32
       -> CLI2CBase::ucI2CEcrireOctet(UC)
                                        0      0     32
       -> CLI2CBase::ucI2CEcrireOctet(UC)
                                        0      0     32
       -> CLI2CBase::ucI2CEcrireOctet(UC)
                                        0      0     32
       -> CLI2CBase::vI2CStart()        0      0     32
       -> CLI2CBase::vI2CStart()        0      0     32
       -> CLI2CBase::ucI2CEcrireOctet(UC)
                                        0      0     32
       -> CLI2CBase::ucI2CLireOctet(UC)
                                        0      0     32
       -> CLI2CBase::ucI2CLireOctet(UC)
                                        0      0     32
       -> CLI2CBase::vI2CStop()         0      0     32
     CLI2CPort::~CLI2CPort()            0      0      8
       -> CLI2CBase::~CLI2CBase()       0      0      0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     CLI2CPort::CLI2CPort()           24
     CLI2CPort::~CLI2CPort()           3
     CLI2CPort::ucI2CLireDonnee(UC, UC)
                                     117
     CLI2CPort::vI2CLireDonnee(UC, USI, UC, UC *, UC)
                                     423
     CLI2CPort::vI2CEcrireDonnee(UC, UC, UC)
                                      85
     CLI2CPort::vI2CEcrireDonnee(UC, USI, UC, UC *, UC)
                                     309
     CLI2CPort::new CLI2CPort()       49
     CLI2CPort::delete ~CLI2CPort(CLI2CPort *)
                                      32

 
 1 042 bytes in segment NEAR_CODE
 
 1 042 bytes of CODE memory

Errors: none
Warnings: none
