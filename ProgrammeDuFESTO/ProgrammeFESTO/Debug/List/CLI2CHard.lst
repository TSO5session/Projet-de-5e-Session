###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.40194/W32 for 8051         24/Oct/2014  02:25:57 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  near                                               #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data                                               #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Synchro\Dropbox\Travaux\Automne                 #
#                          2014\Fonctions\Projet Accumulatif                  #
#                          IAR\CLI2CHard.cpp                                  #
#    Command line       =  "C:\Synchro\Dropbox\Travaux\Automne                #
#                          2014\Fonctions\Projet Accumulatif                  #
#                          IAR\CLI2CHard.cpp" -lC "C:\Synchro\Dropbox\Travaux #
#                          \Automne 2014\Fonctions\Projet Accumulatif         #
#                          IAR\Debug\List\" -lA "C:\Synchro\Dropbox\Travaux\A #
#                          utomne 2014\Fonctions\Projet Accumulatif           #
#                          IAR\Debug\List\" -o "C:\Synchro\Dropbox\Travaux\Au #
#                          tomne 2014\Fonctions\Projet Accumulatif            #
#                          IAR\Debug\Obj\" -e --no_cse --no_unroll            #
#                          --no_inline --no_code_motion --no_tbaa --debug     #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=near --calling_convention=xdata_reent #
#                          rant --place_constants=data --nr_virtual_regs 8    #
#                          --dlib_config "C:\Program Files (x86)\IAR          #
#                          Systems\Embedded Workbench                         #
#                          6.0\8051\LIB\DLIB\dl8051Normal.h" -Ol --ec++       #
#    List file          =  C:\Synchro\Dropbox\Travaux\Automne                 #
#                          2014\Fonctions\Projet Accumulatif                  #
#                          IAR\Debug\List\CLI2CHard.lst                       #
#    Object file        =  C:\Synchro\Dropbox\Travaux\Automne                 #
#                          2014\Fonctions\Projet Accumulatif                  #
#                          IAR\Debug\Obj\CLI2CHard.r51                        #
#                                                                             #
#                                                                             #
###############################################################################

C:\Synchro\Dropbox\Travaux\Automne 2014\Fonctions\Projet Accumulatif IAR\CLI2CHard.cpp
      1          // ************************** FICHIER: CLI2CHARD.cpp****************************
      2          //
      3          // Fonctions de communication de base en I2C
      4          //
      5          // Application realisee avec IAR C++ 8.10
      6          //
      7          // AUTEUR : VINCENT CHOUINARD
      8          // DATE CREATION : 2014/08/9 VERSION: 1.0
      9          // DATE MODIFICATION: ****-**-**
     10          //
     11          // *****************************************************************************
     12          #include "CLI2CHard.h"               //
     13          #include "_DeclarationGenerale.h"    //
     14          #include "ConversionKeilToIAR.h"     // Conversion KEIL <--> IAR
     15          
     16          bool CLI2CHARD :: bus_lost_flag;     //
     17          bool CLI2CHARD :: i2cwait;           // Pour controler le delais
     18          bool CLI2CHARD :: i2c_master;        //
     19          bool CLI2CHARD :: i2c_xmitr;         //
     20          bool CLI2CHARD :: slave_nack_flag;   //
     21          
     22          UI   CLI2CHARD :: i;                 // array pointer
     23          UC   CLI2CHARD :: i2c_xmit_buf[256]; // message transmission buffer
     24          UC   CLI2CHARD :: i2c_rcv_buf [256]; // message reception buffer
     25          UC   CLI2CHARD :: dummybyte;
     26          UC   CLI2CHARD :: i2c_timeout;       // dummy byte to rcv, timeout cz
     27          
     28          // *****************************************************************************
     29          //                            LE CONSTRUCTEUR initialisateur
     30          // *****************************************************************************
     31          CLI2CHARD :: CLI2CHARD(void)
     32          {
     33          vInitUpsd(); // Initialise les SFR du bus I2C du uPSD3254
     34          }
     35          
     36          // *****************************************************************************
     37          //                            LE DESTRUCTEUR
     38          // *****************************************************************************
     39          CLI2CHARD :: ~CLI2CHARD(void)
     40          {
     41          
     42          }
     43          
     44          // **********************FONCTION: vInitUpsd()**********************************
     45          //
     46          // DESCRIPTION: Initialise les registres du bus I2C hardware du uPSD
     47          //
     48          // INCLUDE: "_DeclarationGenerale.h"
     49          //          "CLI2CHard.h"
     50          //
     51          // PROTOTYPE:           void vInitUpsd(void)
     52          //
     53          // PROCEDURE D'APPEL:   vInitUpsd()
     54          //
     55          // PARAMETRE D'ENTREE:  AUCUN
     56          //
     57          // PARAMETRE DE SORTIE: AUCUN
     58          //
     59          // EXEMPLE: vInitUpsd() ---> Initialise le bus I2C Hardware
     60          //
     61          // Auteur:              Vincent Chouinard
     62          // Date:                16 septembre 2014   (Version 1.0)
     63          // Modification:
     64          // *****************************************************************************
     65          void CLI2CHARD :: vInitUpsd(void)
     66          {
     67          P3SFS           |= 0xC0;  // Enable P3.7 for SCL, P3.6 for SDA
                 ^
Error[Pe020]: identifier "P3SFS" is undefined
     68          S2CON           |= 0x01;  // Setup I2C-2 for 500KHz (24MHz XTAL)
                 ^
Error[Pe020]: identifier "S2CON" is undefined
     69          i2c_init_flag    = 1;     // set init done flag
     70          i2c_timeout_flag = 0;     // clear timeout error flag
     71          i2cwait          = 0;     // Petit delais d'attente
     72          IPA             |= 0x02;  // set high priority for EI2C
                 ^
Error[Pe020]: identifier "IPA" is undefined
     73          IEA             |= 0x02;  // set EI2C I2C Int. Enable bit
                 ^
Error[Pe020]: identifier "IEA" is undefined
     74          }
     75          
     76          // **********************FONCTION: vI2C_WaitInterrupt()*************************
     77          //
     78          // DESCRIPTION: Permet d'attendre qu'un interrupt survient
     79          //
     80          // INCLUDE: "_DeclarationGenerale.h"
     81          //          "CLI2CHard.h"
     82          //
     83          // PROTOTYPE:           void vI2C_WaitInterrupt(void)
     84          //
     85          // PROCEDURE D'APPEL:   vI2C_WaitInterrupt()
     86          //
     87          // PARAMETRE D'ENTREE:  AUCUN
     88          //
     89          // PARAMETRE DE SORTIE: AUCUN
     90          //
     91          // EXEMPLE: vI2C_WaitInterrupt() ---> Attend un interrupt
     92          //
     93          // Auteur:              Vincent Chouinard
     94          // Date:                16 septembre 2014   (Version 1.0)
     95          // Modification:
     96          // *****************************************************************************
     97          void CLI2CHARD :: vI2C_WaitInterrupt(void)
     98          {
     99          i2cwait     = 1;            // Flag d'attente
    100          i2c_timeout = 0;            // Flag de depassement d'attente
    101          
    102          while (i2cwait == 1)        // Wait for int to clear flag
    103            {                         //
    104             if(i2c_timeout >= 2 )    // XmS timeout loop
    105               {                      //
    106                i2c_timeout_flag = 1; // set error flag
    107                i2cwait          = 0; // Reset le flag d'attente
    108               }                      //
    109             vDelay(i);               // 1 mS delay (approximatively)
    110             i2c_timeout++;           // for the timeloop
    111            }
    112          }
    113          
    114          // **********************FONCTION: vIntrI2C()***********************************
    115          //
    116          // DESCRIPTION: Fonction PRAGMA VECTOR d'interruption
    117          //
    118          // INCLUDE: "_DeclarationGenerale.h"
    119          //          "CLI2CHard.h"
    120          //
    121          // PROTOTYPE:            #pragma vector = 0x43 __interrupt void CLI2CHARD :: vIntrI2C(void)
    122          //
    123          // PROCEDURE D'APPEL:   Purement hardware
    124          //
    125          // PARAMETRE D'ENTREE:  AUCUN
    126          //
    127          // PARAMETRE DE SORTIE: AUCUN
    128          //
    129          // EXEMPLE: Survient lors d'une interruption sur le vecteur 0x43
    130          //
    131          // Auteur:              Vincent Chouinard
    132          // Date:                16 septembre 2014   (Version 1.0)
    133          // Modification:
    134          // *****************************************************************************
    135           #pragma vector = 0x43                       // Lors d'une interruption de type INTERRUPT I2C
    136          __interrupt void CLI2CHARD :: vIntrI2C(void) // I2C Hardware interrupt
    137          {
    138          if((S2STA & BLOST) == 1)    // If I2C bus is out of sync
                     ^
Error[Pe020]: identifier "S2STA" is undefined

  if((S2STA & BLOST) == 1)    // If I2C bus is out of sync
              ^
"C:\Synchro\Dropbox\Travaux\Automne 2014\Fonctions\Projet Accumulatif IAR\CLI2CHard.cpp",138  Error[Pe020]: 
          identifier "BLOST" is undefined
    139            {
    140             S2DAT = dummy;           // send dummy byte
                    ^
Error[Pe020]: identifier "S2DAT" is undefined

     S2DAT = dummy;           // send dummy byte
             ^
"C:\Synchro\Dropbox\Travaux\Automne 2014\Fonctions\Projet Accumulatif IAR\CLI2CHard.cpp",140  Error[Pe020]: 
          identifier "dummy" is undefined
    141             bus_lost_flag    = 1;    // Activate bus loss flag
    142            }
    143          
    144          if((S2STA & ACKR)  == 1)    // If bus send nACK
                             ^
Error[Pe020]: identifier "ACKR" is undefined
    145            {
    146             S2DAT = dummy;           // send dummy byte
                    ^
Error[Pe020]: identifier "S2DAT" is undefined

     S2DAT = dummy;           // send dummy byte
             ^
"C:\Synchro\Dropbox\Travaux\Automne 2014\Fonctions\Projet Accumulatif IAR\CLI2CHard.cpp",146  Error[Pe020]: 
          identifier "dummy" is undefined
    147             slave_nack_flag  = 1;    // Activate bus loss flag
    148            }
    149           
    150          if(i2c_master & i2c_xmitr)  // If master must transmit
    151            {                         // Master transmitter mode
    152             i2cwait = 0;             // reset wait flag
    153            }
    154          
    155          if(i2c_master & ~i2c_xmitr) // If master must receive
    156            {                         // Master receiver mode
    157             i2cwait = 0;             // reset wait flag
    158            }
    159          }
    160          
    161          // **********************FONCTION: vEcritOctet()*************************
    162          //
    163          // DESCRIPTION: Permet d'attendre qu'un interrupt survient
    164          //
    165          // INCLUDE: "_DeclarationGenerale.h"
    166          //          "CLI2CHard.h"
    167          //
    168          // PROTOTYPE:           void vEcritOctet(UC, UC)
    169          //
    170          // PROCEDURE D'APPEL:   vEcritOctet(UC ucAdresse, UC ucData)
    171          //
    172          // PARAMETRE D'ENTREE:  ucAdresse et ucData
    173          //
    174          // PARAMETRE DE SORTIE: AUCUN
    175          //
    176          // EXEMPLE: vEcritOctet(0x43, 0x8A) ---> Ecrit 8A sur un chip dont l'adresse est 0x43
    177          //
    178          // Auteur:              Vincent Chouinard
    179          // Date:                16 septembre 2014   (Version 1.0)
    180          // Modification:
    181          // *****************************************************************************
    182          void CLI2CHARD :: vEcritOctet(UC ucAdresse, UC ucData)
    183          {
    184          EN1 = 1;                    // Enable I2C.
                 ^
Error[Pe020]: identifier "EN1" is undefined
    185          STA = 1;                    // Send start bit
                 ^
Error[Pe020]: identifier "STA" is undefined
    186          S2DAT = ucAdresse /*& 0xFE*/;   // Envoyer adresse I2C du dispositif
                 ^
Error[Pe020]: identifier "S2DAT" is undefined
    187          vI2C_WaitInterrupt();       // Wait for interrupt
    188          AA    = 1;                  // Send ACKowledge
                 ^
Error[Pe020]: identifier "AA" is undefined
    189          STA   = 0;                  // Clear STA (Disable START)
    190          
    191          // ********************************************************
    192          // CE QUI EST IMPORTANT C'EST DE METTRE LE STOP AVANT
    193          // LA DERNIERE INTERRUPTION SOIT LA TRANSMISSION DU DERNIER
    194          // OCTET.
    195          // ********************************************************
    196          STO   = 1;                  // Send STOP bit
                 ^
Error[Pe020]: identifier "STO" is undefined
    197          S2DAT = ucData;             // Envoyer la donnee ucData
    198          vI2C_WaitInterrupt();       // Wait for interrupt.
    199          STA   = 0;                  // Disable START).
    200          STO   = 0;                  // Send STOP bit).
    201          EN1   = 0;                  // Disiable I2C-2
    202          }
    203          
    204          // **********************FONCTION: ucLitOctet()*************************
    205          //
    206          // DESCRIPTION: Permet d'attendre qu'un interrupt survient
    207          //
    208          // INCLUDE: "_DeclarationGenerale.h"
    209          //          "CLI2CHard.h"
    210          //
    211          // PROTOTYPE:           UC ucLitOctet(UC)
    212          //
    213          // PROCEDURE D'APPEL:   UC = ucLitOctet(UC ucAdresse)
    214          //
    215          // PARAMETRE D'ENTREE:  ucAdresse
    216          //
    217          // PARAMETRE DE SORTIE: ucData
    218          //
    219          // EXEMPLE: UC = ucLitOctet(0x43) ---> Lit la data sur un chip dont l'adresse est 0x43
    220          //
    221          // Auteur:              Vincent Chouinard
    222          // Date:                16 septembre 2014   (Version 1.0)
    223          // Modification:
    224          // *****************************************************************************
    225          UC CLI2CHARD :: ucLitOctet(UC ucAdresse)
    226          {
    227          UC ucData;                  // Pour enregistrer la donnee lue
    228          EN1 = 1;                    // Enable I2C.
                 ^
Error[Pe020]: identifier "EN1" is undefined
    229          STA = 1;                    // Set STA to send start bit).
                 ^
Error[Pe020]: identifier "STA" is undefined
    230          
    231                                      // Envoyer adresse du dispositif en lecture.
    232                                      // Masquer pour s'assurer d'une adresse de lecture.
    233          S2DAT = (ucAdresse | 0x01); // I2C addresse en lecture (R/W bit)
                 ^
Error[Pe020]: identifier "S2DAT" is undefined
    234          vI2C_WaitInterrupt();       // Wait for interrupt
    235          
    236          AA  = 1;                    // Send ACKowledge
                 ^
Error[Pe020]: identifier "AA" is undefined
    237          STA = 0;                    // Disable START
    238          STO = 0;                    // Send STOP bit
                 ^
Error[Pe020]: identifier "STO" is undefined
    239          
    240                                      // Important de conserver les 2 lignes suivantes
    241                                      // pour mettre le I2C en entree.
    242          S2DAT = 0xFF;               // Send byte for rcv mode.
    243          vI2C_WaitInterrupt();       // Wait for interrupt
    244          
    245          // ********************************************************
    246          // CE QUI EST IMPORTANT C'EST DE METTRE LE STOP AVANT
    247          // LA DERNIERE INTERRUPTION SOIT LA RECEPTION DU DERNIER
    248          // OCTET.
    249          // ********************************************************
    250          STO    = 1;                 // Send STOP bit
    251          ucData = S2DAT;             // Lire dernier octet.
    252          vI2C_WaitInterrupt();       // Wait for interrupt
    253          AA     = 0;                 // Send Not ACKnowledge
    254          STA    = 0;                 // Disable START
    255          EN1    = 0;                 // Disiable I2C-2
    256          return(ucData);
    257          }
    258          
    259          
    260          // **********************FONCTION: vDelay()*************************
    261          //
    262          // DESCRIPTION: Permet d'attendre qu'un interrupt survient
    263          //
    264          // INCLUDE: "_DeclarationGenerale.h"
    265          //          "CLI2CHard.h"
    266          //
    267          // PROTOTYPE:           void vDelay(UINT16)
    268          //
    269          // PROCEDURE D'APPEL:   vDelay(UINT16)
    270          //
    271          // PARAMETRE D'ENTREE:  vDelay
    272          //
    273          // PARAMETRE DE SORTIE: AUCUN
    274          //
    275          // EXEMPLE: vDelay(555) ---> Cre un delais de 555 unite de temps
    276          //
    277          // Auteur:              Vincent Chouinard
    278          // Date:                16 septembre 2014   (Version 1.0)
    279          // Modification:
    280          // *****************************************************************************
    281          void CLI2CHARD :: vDelay(UINT16 iWasteMyTime)
    282          {
    283          for(iWasteMyTime = 0; iWasteMyTime < 10; iWasteMyTime++)
    284            {
    285              /*Perd du temps dans une boucle FOR*/
    286            }
    287          }
    288          //LinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxTUX

Errors: 21
Warnings: none
