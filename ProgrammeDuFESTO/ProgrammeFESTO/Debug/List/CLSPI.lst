###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.40194/W32 for 8051         24/Oct/2014  02:25:57 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  near                                               #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data                                               #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Synchro\Dropbox\Travaux\Automne                 #
#                          2014\Fonctions\Projet Accumulatif IAR\CLSPI.cpp    #
#    Command line       =  "C:\Synchro\Dropbox\Travaux\Automne                #
#                          2014\Fonctions\Projet Accumulatif IAR\CLSPI.cpp"   #
#                          -lC "C:\Synchro\Dropbox\Travaux\Automne            #
#                          2014\Fonctions\Projet Accumulatif                  #
#                          IAR\Debug\List\" -lA "C:\Synchro\Dropbox\Travaux\A #
#                          utomne 2014\Fonctions\Projet Accumulatif           #
#                          IAR\Debug\List\" -o "C:\Synchro\Dropbox\Travaux\Au #
#                          tomne 2014\Fonctions\Projet Accumulatif            #
#                          IAR\Debug\Obj\" -e --no_cse --no_unroll            #
#                          --no_inline --no_code_motion --no_tbaa --debug     #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=near --calling_convention=xdata_reent #
#                          rant --place_constants=data --nr_virtual_regs 8    #
#                          --dlib_config "C:\Program Files (x86)\IAR          #
#                          Systems\Embedded Workbench                         #
#                          6.0\8051\LIB\DLIB\dl8051Normal.h" -Ol --ec++       #
#    List file          =  C:\Synchro\Dropbox\Travaux\Automne                 #
#                          2014\Fonctions\Projet Accumulatif                  #
#                          IAR\Debug\List\CLSPI.lst                           #
#    Object file        =  C:\Synchro\Dropbox\Travaux\Automne                 #
#                          2014\Fonctions\Projet Accumulatif                  #
#                          IAR\Debug\Obj\CLSPI.r51                            #
#                                                                             #
#                                                                             #
###############################################################################

C:\Synchro\Dropbox\Travaux\Automne 2014\Fonctions\Projet Accumulatif IAR\CLSPI.cpp
      1          //**********************  Fichier: CLSPI.cpp
      2          //  Description : Fonctions necessaire pour communiquer en SPI.
      3          //
      4          //  CLComSPI       (void);                     Constructeur
      5          //  CLComSPI       (UC ucVal);                 Constructeur initialisateur
      6          // ~CLComSPI       (void);                     Destructeur
      7          //  UC   Write     (UC ucValeur, UC ucMode);   Pour ecrire une donnee en SPI
      8          //  void Direction (UC ucDirection);           Pour la direction des port du MCP23S08
      9          //
     10          //  Composition  : aucune
     11          //  Heritage     : aucune
     12          //
     13          //  Programmeur  : Vincent Chouinard
     14          //  Cours        : 247-636
     15          //
     16          //  Date         : 22 Octobre 2014
     17          //
     18          //  Compilateur  : IAR 8.1
     19          //
     20          //  Modification :
     21          //
     22          //////////////////////////////////////////////////////////////////////////////
     23          #include "CLSPI.h"                // Inclue le fichier d'entete I2CPort.h.
     24          #include "_DeclarationGenerale.h" // inclue DeclarationGenerale.h
     25          
     26          //******************************************************************************
     27          //                            LE CONSTRUCTEUR PAR DEFAUT
     28          // *****************************************************************************
     29          CLSPI :: CLSPI(void)
     30          {
     31          SCLK = BAS;
                 ^
Error[Pe020]: identifier "P1_3" is undefined
     32          }
     33          
     34          //******************************************************************************
     35          //                            LE CONSTRUCTEUR INITIALISATEUR
     36          // *****************************************************************************
     37          CLSPI :: CLSPI(UC ucVal)
     38          {
     39          
     40          }
     41          
     42          // *****************************************************************************
     43          //                            LE DESTRUCTEUR
     44          // *****************************************************************************
     45          CLSPI :: ~CLSPI(void)
     46          {
     47          
     48          }
     49          
     50          //*****************************************************************************
     51          // Nom de la fct       : vSPIEcire
     52          // Description         : Fonction qui permet de lire et d'ecrire un octet
     53          //                     : sous les 4 different mode SPI
     54          //
     55          // INCLUDE             : #include "_DeclarationGenerale.h", #include "CLSPI.h"
     56          //
     57          // Prototype           : UC ucSPIEcire(UC ucValeur, UC ucMode);
     58          //
     59          //
     60          // Parametre d'entree  : ucValeur pour la valeur a envoyer ucMode pour le mode
     61          //
     62          // Parametre de sortie : ucDonneeLue pour la donnee lue
     63          //
     64          // Procedure appelees  : aucune
     65          //
     66          // Exemple d'appel     : val = clComSPI.ucSPIEcire(0xAA);
     67          //
     68          // Fait par            : Vincent Chouinard
     69          // Date                : 23 septembre 2014
     70          // Revision            : A
     71          // Modification
     72          //*****************************************************************************
     73          UC CLSPI :: Write(UC ucValeur, UC ucMode)
     74          {
     75          UC i;                               // Pour boucle
     76          UC ucDonneeLue = 0;                 // Pour la donnee a transmettre
     77          
     78          if(ucMode == 0)                     // Si mode 0?
     79            {
     80             SCLK = BAS;                      // Met la clock a 0
                    ^
Error[Pe020]: identifier "P1_3" is undefined
     81          
     82             for(i = 0; i < 8; i++)           // Fait 8 fois
     83               {
     84                if((ucValeur & 0x80) == 0x80) //fait un masque si egale a 1
     85                  {
     86                   MOSI = 1;                  // Envoie 1
                          ^
Error[Pe020]: identifier "P1_2" is undefined
     87                  }
     88                 else                         // Sinon
     89                  {
     90                   MOSI =0;                   // Envoie 0.
                          ^
Error[Pe020]: identifier "P1_2" is undefined
     91                  }
     92          
     93                 ucValeur    = ucValeur    << 1  ; // Decale la valeur a envoyer
     94                 ucDonneeLue = ucDonneeLue << 1  ; // Decale la valeur lue
     95                 SCLK        = HAUT              ; // Clock a 1
     96                 ucDonneeLue = ucDonneeLue + MISO; // Aditionne l'etat de MISO avec
                                                    ^
Error[Pe020]: identifier "P1_1" is undefined
     97                                                   // le reste de la donnee lue
     98                 SCLK        = BAS               ; // Clock a 0.
     99               }
    100             }
    101          
    102          if(ucMode == 1)          // Si mode 1?
    103            {
    104             SCLK = HAUT;
                    ^
Error[Pe020]: identifier "P1_3" is undefined
    105             for(i = 0; i < 8; i++)
    106               {
    107                ucDonneeLue = ucDonneeLue << 1;
    108                SCLK        = HAUT;
    109          
    110                if((ucValeur & 0x80) == 0x80)
    111                  {
    112                   MOSI = 1;
                          ^
Error[Pe020]: identifier "P1_2" is undefined
    113                  }
    114                else
    115                  {
    116                   MOSI =0;
                          ^
Error[Pe020]: identifier "P1_2" is undefined
    117                  }
    118                ucDonneeLue = ucDonneeLue + MISO;
                                                   ^
Error[Pe020]: identifier "P1_1" is undefined
    119                SCLK        = BAS;                // Met la clock a 0
    120               }
    121               SCLK = HAUT;
    122             }
    123          
    124          if(ucMode == 2)          // Si mode 2?
    125            {
    126             for(i = 0; i < 8; i++)
    127               {
    128                ucDonneeLue = ucDonneeLue << 1;
    129                if((ucValeur & 0x80) == 0x80)
    130                  {
    131                   MOSI = 1;
                          ^
Error[Pe020]: identifier "P1_2" is undefined
    132                  }
    133                else
    134                  {
    135                   MOSI =0;
                          ^
Error[Pe020]: identifier "P1_2" is undefined
    136                  }
    137                 ucDonneeLue = ucDonneeLue + MISO;
                                                    ^
Error[Pe020]: identifier "P1_1" is undefined
    138                 SCLK        = BAS;
                        ^
Error[Pe020]: identifier "P1_3" is undefined
    139                 SCLK        = HAUT;
    140               }
    141             }
    142          
    143          if(ucMode == 3)          // Si mode 3?
    144            {
    145             for(i = 0; i < 8; i++)
    146               {
    147                ucDonneeLue = ucDonneeLue << 1;
    148                SCLK        = BAS;
                       ^
Error[Pe020]: identifier "P1_3" is undefined
    149                if((ucValeur & 0x80) == 0x80)
    150                  {
    151                   MOSI = 1;
                          ^
Error[Pe020]: identifier "P1_2" is undefined
    152                  }
    153                else
    154                  {
    155                   MOSI = 0;
                          ^
Error[Pe020]: identifier "P1_2" is undefined
    156                  }
    157                ucDonneeLue = ucDonneeLue + MISO;
                                                   ^
Error[Pe020]: identifier "P1_1" is undefined
    158                SCLK        = HAUT;
    159               }
    160             }
    161          return(ucDonneeLue);
    162          }
    163          
    164          UI CLSPI :: Write16(UI uiValeur, UC ucMode)
    165          {
    166          UC i;                      // Pour boucle
    167          UI uiDonneeLue= 0;         // Pour la donnee a transmettre
    168          
    169          if(ucMode == 0)            // Si mode 0?
    170            {
    171             SCLK = BAS;             // Met la clock a 0
                    ^
Error[Pe020]: identifier "P1_3" is undefined
    172             for(i = 0; i < 16; i++) // Fait 8 fois
    173               {
    174                if((uiValeur & 0x8000) == 0x8000)//fait un masque si egale a 1
    175                  {
    176                   MOSI = 1;          // Envoie 1
                          ^
Error[Pe020]: identifier "P1_2" is undefined
    177                  }
    178                else                  // Sinon
    179                  {
    180                   MOSI =0;           // Envoie 0.
                          ^
Error[Pe020]: identifier "P1_2" is undefined
    181                  }
    182          
    183                uiValeur    = uiValeur    << 1  ;  // Decale la valeur a envoyer
    184                uiDonneeLue = uiDonneeLue << 1  ;  // Decale la valeur lue
    185                SCLK        = HAUT              ; // Clock a 1
    186                uiDonneeLue = uiDonneeLue + MISO; // Aditionne l'etat de MISO avec
                                                   ^
Error[Pe020]: identifier "P1_1" is undefined
    187                                                  // le reste de la donnee lue
    188                SCLK        = BAS               ; // Clock a 0.
    189               }
    190             }
    191          
    192             if(ucMode == 1)          // Si mode 1?
    193              {
    194               SCLK = HAUT;
                      ^
Error[Pe020]: identifier "P1_3" is undefined
    195               for(i = 0; i < 16; i++)
    196                 {
    197                  uiDonneeLue = uiDonneeLue << 1;
    198                  SCLK        = HAUT;
    199                  if((uiValeur & 0x8000) == 0x8000)
    200                   {
    201                    MOSI = 1;
                           ^
Error[Pe020]: identifier "P1_2" is undefined
    202                   }
    203                  else
    204                   {
    205                    MOSI =0;
                           ^
Error[Pe020]: identifier "P1_2" is undefined
    206                   }
    207                  uiDonneeLue = uiDonneeLue + MISO;
                                                     ^
Error[Pe020]: identifier "P1_1" is undefined
    208                  SCLK        = BAS;   // Met la clock a 0
    209                 }
    210               SCLK = HAUT;
    211              }
    212            if(ucMode == 2)          // Si mode 2?
    213              {
    214               for(i = 0; i < 16; i++)
    215                 {
    216                  uiDonneeLue = uiDonneeLue << 1;
    217                  if((uiValeur & 0x8000) == 0x8000)
    218                    {
    219                     MOSI = 1;
                            ^
Error[Pe020]: identifier "P1_2" is undefined
    220                    }
    221                  else
    222                   {
    223                    MOSI =0;
                           ^
Error[Pe020]: identifier "P1_2" is undefined
    224                   }
    225                 uiDonneeLue = uiDonneeLue + MISO;
                                                    ^
Error[Pe020]: identifier "P1_1" is undefined
    226                 SCLK        = BAS;
                        ^
Error[Pe020]: identifier "P1_3" is undefined
    227                 SCLK        = HAUT;
    228                }
    229             }
    230          
    231             if(ucMode == 3)          // Si mode 3?
    232               {
    233                for(i = 0; i < 16; i++)
    234                  {
    235                   uiDonneeLue = uiDonneeLue << 1;
    236                   SCLK        = BAS;
                          ^
Error[Pe020]: identifier "P1_3" is undefined
    237                   if((uiValeur & 0x8000) == 0x8000)
    238                     {
    239                      MOSI = 1;
                             ^
Error[Pe020]: identifier "P1_2" is undefined
    240                     }
    241                   else
    242                     {
    243                      MOSI =0;
                             ^
Error[Pe020]: identifier "P1_2" is undefined
    244                     }
    245                   uiDonneeLue = uiDonneeLue + MISO;
                                                      ^
Error[Pe020]: identifier "P1_1" is undefined
    246                   SCLK        = HAUT;
    247                  }
    248          
    249                }
    250          return(uiDonneeLue);
    251          }
    252          
    253          //*****************************************************************************
    254          // Nom de la fct:       : Direction
    255          // Description:         : Fonction qui permet de modifier la direction des ports
    256          //                      : du MCP23S08
    257          //
    258          // INCLUDE:             : #include "_DeclarationGenerale.h", #include "CLSPI.h"
    259          //
    260          // Prototype:           : Direction(UC ucDirection)
    261          //
    262          //
    263          // Parametre d'entree:  : ucDirection pour la direction des I/O.
    264          //
    265          // Parametre de sortie: : aucun
    266          //
    267          // Procedure appelees:  : aucune
    268          //
    269          // Exemple d'appel:     : val = clComSPI.ucSPIEcire(0xAA);
    270          //
    271          // Fait par             : Vincent Chouinard
    272          // Date:                : 23 septembre 2014
    273          // Revision             :
    274          // Modification         :
    275          //*****************************************************************************
    276          void CLSPI :: Direction (UC ucDirection)
    277          {
    278          CS = BAS             ; // Chip select bas
                 ^
Error[Pe020]: identifier "P1_7" is undefined
    279          Write(0x40, 0)       ; // Envoie l'adresse du boitier
    280          Write(0x00, 0)       ; // Envoie le registre a modifier
    281          Write(ucDirection, 0); // Envoie la direction
    282          CS = HAUT            ; // Chip Select haut
    283          }
    284          //LinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxTUX
    285          
    286          
    287          
    288          
    289          
    290          
    291          
    292          
    293          
    294          
    295          
    296          
    297          
    298          
    299          
    300          

Errors: 34
Warnings: none
