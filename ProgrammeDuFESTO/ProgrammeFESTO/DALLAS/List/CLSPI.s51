///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.40194/W32 for 8051        30/Sep/2014  20:43:28 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  near                                              /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data                                              /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Synchro\Dropbox\Travaux\Automne                /
//                          2014\Fonctions\Projet Accumulatif IAR\CLSPI.cpp   /
//    Command line       =  "C:\Synchro\Dropbox\Travaux\Automne               /
//                          2014\Fonctions\Projet Accumulatif IAR\CLSPI.cpp"  /
//                          -D DALLAS89C450 --preprocess=cl                   /
//                          "C:\Synchro\Dropbox\Travaux\Automne               /
//                          2014\Fonctions\Projet Accumulatif                 /
//                          IAR\DALLAS\List\" -lC "C:\Synchro\Dropbox\Travaux /
//                          \Automne 2014\Fonctions\Projet Accumulatif        /
//                          IAR\DALLAS\List\" -lA "C:\Synchro\Dropbox\Travaux /
//                          \Automne 2014\Fonctions\Projet Accumulatif        /
//                          IAR\DALLAS\List\" -o "C:\Synchro\Dropbox\Travaux\ /
//                          Automne 2014\Fonctions\Projet Accumulatif         /
//                          IAR\DALLAS\Obj\" -e --no_cse --no_unroll          /
//                          --no_inline --no_code_motion --no_tbaa --debug    /
//                          --core=plain --dptr=16,1 --data_model=large       /
//                          --code_model=near --calling_convention=xdata_reen /
//                          trant --place_constants=data --nr_virtual_regs 8  /
//                          --dlib_config "C:\Program Files (x86)\IAR         /
//                          Systems\Embedded Workbench                        /
//                          6.0\8051\LIB\DLIB\dl8051Normal.h" -Ol --ec++      /
//    List file          =  C:\Synchro\Dropbox\Travaux\Automne                /
//                          2014\Fonctions\Projet Accumulatif                 /
//                          IAR\DALLAS\List\CLSPI.s51                         /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME CLSPI

        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "near"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        EXTERN ?FUNC_ENTER_XDATA
        EXTERN ?FUNC_LEAVE_XDATA
        EXTERN ?V0

        PUBLIC ??CLSPI
        FUNCTION ??CLSPI,0203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC ??CLSPI_1
        FUNCTION ??CLSPI_1,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 8, STACK
        PUBLIC ??MCP23S08Init
        FUNCTION ??MCP23S08Init,021203H
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ??MPCReadGPIO
        FUNCTION ??MPCReadGPIO,021203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ??MPCWriteGPIO
        FUNCTION ??MPCWriteGPIO,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        PUBLIC ??SPI_Transfert
        FUNCTION ??SPI_Transfert,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC `??delete ~CLSPI`
        FUNCTION `??delete ~CLSPI`,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        PUBLIC `??new CLSPI`
        FUNCTION `??new CLSPI`,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC `??new CLSPI_1`
        FUNCTION `??new CLSPI_1`,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ??ucStraightWrite
        FUNCTION ??ucStraightWrite,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        PUBLIC `?~CLSPI`
        FUNCTION `?~CLSPI`,0203H
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBWEAK _A_P1
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:16, ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        EXTERN `??operator new`
        FUNCTION `??operator new`,010202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN `??operator delete`
        FUNCTION `??operator delete`,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Synchro\Dropbox\Travaux\Automne 2014\Fonctions\Projet Accumulatif IAR\CLSPI.cpp
//    1 // **************************CLSPI.cpp
//    2 // Auteur:       Vincent Chouinard
//    3 // Date:         15 septembre 2014
//    4 // Version:      1.0
//    5 // Modification: Aucune
//    6 //
//    7 // Compilateur:  IAR 8.1
//    8 //
//    9 // Description:
//   10 // *****************************************************************************
//   11 #include "_DeclarationGenerale.h"  // Raccourcis de programmation & variables

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1

        RSEG NEAR_CODE:CODE:NOROOT(0)
// __near_func __xdata_reentrant CLSPI &CLSPI::new CLSPI()
`??new CLSPI`:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function `??new CLSPI`
        CODE
        FUNCALL `??new CLSPI`, `??operator new`
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL `??new CLSPI`, ??CLSPI
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    ?V0 + 0
        CFI V0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    ?V0 + 1
        CFI V1 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
        ; Setup parameters for call to function operator new(unsigned int)
        MOV     R2,#0x1
        MOV     R3,#0x0
        LCALL   `??operator new`
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R0
        ORL     A,R1
        JZ      `??new CLSPI_2`
        ; Setup parameters for call to function CLSPI::CLSPI()
        LCALL   ??CLSPI
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        SJMP    `??new CLSPI_3`
`??new CLSPI_2`:
        MOV     R2,#0x0
        MOV     R3,#0x0
`??new CLSPI_3`:
        POP     ?V0 + 1
        CFI V1 SameValue
        CFI CFA_SP SP+-3
        POP     ?V0 + 0
        CFI V0 SameValue
        CFI CFA_SP SP+-2
        RET
        CFI EndBlock cfiBlock0

        RSEG NEAR_CODE:CODE:NOROOT(0)
// __near_func __xdata_reentrant CLSPI &CLSPI::new CLSPI(UC)
`??new CLSPI_1`:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function `??new CLSPI_1`
        CODE
        FUNCALL `??new CLSPI_1`, `??operator new`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL `??new CLSPI_1`, ??CLSPI_1
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
        ; Setup parameters for call to function operator new(unsigned int)
        MOV     R2,#0x1
        MOV     R3,#0x0
        LCALL   `??operator new`
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R0
        ORL     A,R1
        JZ      `??new CLSPI_4`
        ; Setup parameters for call to function CLSPI::CLSPI(UC)
        MOV     A,R6
        MOV     R1,A
        LCALL   ??CLSPI_1
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        SJMP    `??new CLSPI_5`
`??new CLSPI_4`:
        MOV     R2,#0x0
        MOV     R3,#0x0
`??new CLSPI_5`:
        MOV     R7,#0x2
        LJMP    ?FUNC_LEAVE_XDATA
        CFI EndBlock cfiBlock1

        RSEG NEAR_CODE:CODE:NOROOT(0)
// __near_func __xdata_reentrant void CLSPI::delete ~CLSPI(CLSPI *)
`??delete ~CLSPI`:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function `??delete ~CLSPI`
        CODE
        FUNCALL `??delete ~CLSPI`, `?~CLSPI`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL `??delete ~CLSPI`, `??operator delete`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x8
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 8)
        ; Saved register size: 8
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     A,R6
        ORL     A,R7
        JZ      `??delete ~CLSPI_1`
        ; Setup parameters for call to function CLSPI::~CLSPI()
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `?~CLSPI`
        ; Setup parameters for call to function operator delete(void *)
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??operator delete`
`??delete ~CLSPI_1`:
        MOV     R7,#0x1
        LJMP    ?FUNC_LEAVE_XDATA
        CFI EndBlock cfiBlock2
//   12 #include "CLSPI.h"                 // Fichier de definitions du protocole SPI
//   13 ////////////***LES DEFINES***////////
//   14 #define MOSI P1_0                  // Master OUT Slave IN (Master send)
//   15 #define MISO P1_1                  // Master IN Slave OUT (Master receive)
//   16 #define SCK  P1_2                  // Clock               (Tic tac)
//   17 #define NSS  P1_3                  // Slave Select        (enable, chip select, others synonyms)
//   18 //******************************************************************************
//   19 //                            LE CONSTRUCTEUR PAR DEFAUT
//   20 // *****************************************************************************

        RSEG NEAR_CODE:CODE:NOROOT(0)
//   21 CLSPI :: CLSPI(void)
??CLSPI:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function ??CLSPI
        CODE
//   22 {
        ; Saved register size: 0
        ; Auto size: 0
//   23 MOSI = LOW;  // Commence a bas
        CLR     0x90.0
//   24 MISO = LOW;  // Commence a bas
        CLR     0x90.1
//   25 SCK  = LOW;  // Commence a bas
        CLR     0x90.2
//   26 NSS  = LOW;  // Commence a bas
        CLR     0x90.3
//   27 }
        RET
        CFI EndBlock cfiBlock3
        REQUIRE _A_P1
//   28 
//   29 //******************************************************************************
//   30 //                            LE CONSTRUCTEUR INITIALISATEUR
//   31 // *****************************************************************************

        RSEG NEAR_CODE:CODE:NOROOT(0)
//   32 CLSPI :: CLSPI(UC MCP23S08)
??CLSPI_1:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function ??CLSPI_1
        CODE
//   33 {
        FUNCALL ??CLSPI_1, ??MCP23S08Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x8
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 8)
        ; Saved register size: 8
        ; Auto size: 0
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,R1
        MOV     R6,A
//   34 MOSI      = LOW;  // Commence a bas  
        CLR     0x90.0
//   35 MISO      = LOW;  // Commence a bas  
        CLR     0x90.1
//   36 SCK       = LOW;  // Commence a bas
        CLR     0x90.2
//   37 NSS       = HIGH; // Commence a bas
        SETB    0x90.3
//   38 UC ucTemp = MCP23S08Init(0x40, 0x00, MCP23S08);  // Ecriture des directions IN ou OUT
        ; Setup parameters for call to function CLSPI::MCP23S08Init(UC, UC, UC)
        MOV     R5,A
        MOV     R4,#0x0
        MOV     R1,#0x40
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??MCP23S08Init
        MOV     A,R1
        MOV     R0,A
//   39 }                                                // avec le parametre specifie par le constructeur
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R7,#0x1
        LJMP    ?FUNC_LEAVE_XDATA
        CFI EndBlock cfiBlock4
        REQUIRE _A_P1
//   40 
//   41 // *****************************************************************************
//   42 //                            LE DESTRUCTEUR
//   43 // *****************************************************************************

        RSEG NEAR_CODE:CODE:NOROOT(0)
//   44 CLSPI :: ~CLSPI(void)
`?~CLSPI`:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function `?~CLSPI`
        CODE
//   45 {
        ; Saved register size: 0
        ; Auto size: 0
//   46 
//   47 }
        RET
        CFI EndBlock cfiBlock5
//   48 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//   49 UC CLSPI :: MPCWriteGPIO(UC ucData)                   // Pour eccrire sur les GPIO du MCP
??MPCWriteGPIO:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function ??MPCWriteGPIO
        CODE
//   50 {
        FUNCALL ??MPCWriteGPIO, ??MCP23S08Init
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 1, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,R6
        CFI R6 A
        PUSH    A
        CFI R6 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        ; Saved register size: 1
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//   51 UC ucReturnValue = MCP23S08Init(0x40, 0x09, ucData);  // Mode ecriture sur les GPIO, envoie donne choisie
        ; Setup parameters for call to function CLSPI::MCP23S08Init(UC, UC, UC)
        MOV     R5,A
        MOV     R4,#0x9
        MOV     R1,#0x40
        LCALL   ??MCP23S08Init
        MOV     A,R1
        MOV     R1,A
//   52 MOSI             = LOW;
        CLR     0x90.0
//   53 return(ucReturnValue);
        POP     A
        CFI R6 A
        CFI CFA_SP SP+-2
        MOV     R6,A
        CFI R6 SameValue
        RET
        CFI EndBlock cfiBlock6
        REQUIRE _A_P1
//   54 }
//   55 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//   56 UC CLSPI :: MPCReadGPIO(void)                         // Pour lire sur les GPIO
??MPCReadGPIO:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function ??MPCReadGPIO
        CODE
//   57 {
        FUNCALL ??MPCReadGPIO, ??MCP23S08Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        ; Saved register size: 0
        ; Auto size: 0
//   58 UC ucReturnValue = MCP23S08Init(0x41, 0x09, 0x00);    // Mode ecriture sur les GPIO, envoie donne choisie
        ; Setup parameters for call to function CLSPI::MCP23S08Init(UC, UC, UC)
        MOV     R5,#0x0
        MOV     R4,#0x9
        MOV     R1,#0x41
        LCALL   ??MCP23S08Init
        MOV     A,R1
        MOV     R1,A
//   59 MOSI             = LOW;
        CLR     0x90.0
//   60 return(ucReturnValue);
        RET
        CFI EndBlock cfiBlock7
        REQUIRE _A_P1
//   61 }
//   62 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//   63 UC CLSPI :: MCP23S08Init(UC ucReadOrWrite, UC ucRegisterADR, UC ucData)
??MCP23S08Init:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function ??MCP23S08Init
        CODE
//   64 {
        FUNCALL ??MCP23S08Init, ??SPI_Transfert
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??MCP23S08Init, ??SPI_Transfert
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??MCP23S08Init, ??SPI_Transfert
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??MCP23S08Init, ??SPI_Transfert
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??MCP23S08Init, ??SPI_Transfert
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??MCP23S08Init, ??SPI_Transfert
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     ?V0 + 1,R1
        MOV     ?V0 + 0,R4
        MOV     A,R5
        MOV     R6,A
//   65 UC ucRead;                                           // Variable pour lire
//   66 if(ucReadOrWrite == 0x40)                            // S'il faut ecrire
        MOV     A,#0x40
        XRL     A,?V0 + 1
        JNZ     ??MCP23S08Init_1
//   67   {
//   68    NSS = LOW;                                        // Active le chip select
        CLR     0x90.3
//   69       ucRead = SPI_Transfert(0x40,          CPOL0);  // Active le mode ecriture
        ; Setup parameters for call to function CLSPI::SPI_Transfert(UC, char)
        MOV     R4,#0x0
        MOV     R1,#0x40
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??SPI_Transfert
        MOV     A,R1
        MOV     R7,A
//   70       MOSI   = LOW;                                  // Minor semi-bug prevention
        CLR     0x90.0
//   71       ucRead = SPI_Transfert(ucRegisterADR, CPOL0);  // Selectionne le registre choisi
        ; Setup parameters for call to function CLSPI::SPI_Transfert(UC, char)
        MOV     R4,#0x0
        MOV     R1,?V0 + 0
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??SPI_Transfert
        MOV     A,R1
        MOV     R7,A
//   72       MOSI   = LOW;                                  // Minor semi-bug prevention
        CLR     0x90.0
//   73       ucRead = SPI_Transfert(ucData,        CPOL0);  // Configure le registre choisi
        ; Setup parameters for call to function CLSPI::SPI_Transfert(UC, char)
        MOV     R4,#0x0
        MOV     A,R6
        MOV     R1,A
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??SPI_Transfert
        MOV     A,R1
        MOV     R7,A
//   74       MOSI   = LOW;                                  // Minor semi-bug prevention
        CLR     0x90.0
//   75    NSS = HIGH; 
        SETB    0x90.3
//   76   }
//   77 
//   78 if(ucReadOrWrite == 0x41)                            // S'il faut lire
??MCP23S08Init_1:
        MOV     A,#0x41
        XRL     A,?V0 + 1
        JNZ     ??MCP23S08Init_2
//   79   {
//   80    NSS = LOW;                                        // Active le chip select
        CLR     0x90.3
//   81       ucRead = SPI_Transfert(0x41,          CPOL0);  // Active le mode ecriture
        ; Setup parameters for call to function CLSPI::SPI_Transfert(UC, char)
        MOV     R4,#0x0
        MOV     R1,#0x41
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??SPI_Transfert
        MOV     A,R1
        MOV     R7,A
//   82       MOSI   = LOW;                                  // Minor semi-bug prevention
        CLR     0x90.0
//   83       ucRead = SPI_Transfert(ucRegisterADR, CPOL0);  // Selectionne le registre choisi
        ; Setup parameters for call to function CLSPI::SPI_Transfert(UC, char)
        MOV     R4,#0x0
        MOV     R1,?V0 + 0
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??SPI_Transfert
        MOV     A,R1
        MOV     R7,A
//   84       MOSI   = LOW;                                  // Minor semi-bug prevention
        CLR     0x90.0
//   85       ucRead = SPI_Transfert(ucData,        CPOL0);  // Configure le registre choisi
        ; Setup parameters for call to function CLSPI::SPI_Transfert(UC, char)
        MOV     R4,#0x0
        MOV     A,R6
        MOV     R1,A
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??SPI_Transfert
        MOV     A,R1
        MOV     R7,A
//   86       MOSI   = LOW;                                  // Minor semi-bug prevention
        CLR     0x90.0
//   87    NSS = HIGH;                                       // Active le chip select
        SETB    0x90.3
//   88   }
//   89 MOSI = LOW;                                          // Minor semi-bug prevention
??MCP23S08Init_2:
        CLR     0x90.0
//   90 return(ucRead);                                      // Retourne la donnee lue
        MOV     A,R7
        MOV     R1,A
        MOV     R7,#0x2
        LJMP    ?FUNC_LEAVE_XDATA
        CFI EndBlock cfiBlock8
        REQUIRE _A_P1
//   91 }
//   92 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//   93 UC CLSPI :: ucStraightWrite(UC ucData)
??ucStraightWrite:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function ??ucStraightWrite
        CODE
//   94 {
        FUNCALL ??ucStraightWrite, ??SPI_Transfert
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 1, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,R6
        CFI R6 A
        PUSH    A
        CFI R6 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        ; Saved register size: 1
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//   95 UC ucTemp;                                           // Variable pour la lecture
//   96 NSS    = LOW;                                        // Active le chip select
        CLR     0x90.3
//   97 ucTemp = SPI_Transfert(ucData, CPOL0);               // Fait le transfert SPI
        ; Setup parameters for call to function CLSPI::SPI_Transfert(UC, char)
        MOV     R4,#0x0
        MOV     R1,A
        LCALL   ??SPI_Transfert
        MOV     A,R1
        MOV     R1,A
//   98 NSS    = HIGH;                                       // Active le chip select
        SETB    0x90.3
//   99 return(ucTemp);                                      // Retourne la donnee lue
        POP     A
        CFI R6 A
        CFI CFA_SP SP+-2
        MOV     R6,A
        CFI R6 SameValue
        RET
        CFI EndBlock cfiBlock9
        REQUIRE _A_P1
//  100 }
//  101 
//  102 // **********************FONCTION: SPI_Transfert()**************************
//  103 //
//  104 // DESCRIPTION: Fait des transferts SPI en Read/Write (bas niveau, private access)
//  105 //
//  106 // INCLUDE: "DeclarationGenerale.h"
//  107 //          "CLSPI.h"
//  108 //
//  109 // PROTOTYPE:           UC SPI_Transfert(UC)
//  110 //
//  111 // PROCEDURE D'APPEL:   UC = SPI_Transfert(UC)
//  112 //
//  113 // PARAMETRE D'ENTREE:  SPI_byte ---> Data to send
//  114 //
//  115 // PARAMETRE DE SORTIE: SPI_byte ---> Data received
//  116 //
//  117 // EXEMPLE: ByteToRead = SPI_Transfert(ByteToSend);  ---> Ecrit 0x55 sur un bus SPI et lit
//  118 //
//  119 // Auteur:              Vincent Chouinard
//  120 // Date:                15 septembre 2014   (Version 1.0)
//  121 // Modification:
//  122 // *****************************************************************************

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  123 UC CLSPI :: SPI_Transfert (UC ByteToSend, char cMode)
??SPI_Transfert:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI Function ??SPI_Transfert
        CODE
//  124 {
        ; Saved register size: 0
        ; Auto size: 0
        MOV     A,R1
        MOV     R2,A
//  125 // MOSI = P1_0
//  126 // MISO = P1_1
//  127 // SCK  = P1_2
//  128 // NSS  = P1_3
//  129 
//  130 UC SPI_count; // Bocle for afin de traiter un octer, char par char
//  131 UC SPI_Read;  // Valeur qui retourne la donneee lue
//  132 
//  133 switch(cMode) // SCK is idle-low, and bits are latched on SCK rising
        MOV     A,R4
        JZ      ??SPI_Transfert_1
        DEC     A
        JZ      ??SPI_Transfert_2
        DEC     A
        JZ      ??SPI_Transfert_3
        DEC     A
        JZ      ??SPI_Transfert_4
        LJMP    ??SPI_Transfert_5
//  134   { 
//  135    case 0:    // CLock Polarity to LOW
//  136       for(SPI_count = 8; SPI_count > 0; SPI_count--)   // single byte SPI loop
??SPI_Transfert_1:
        MOV     R0,#0x8
        SJMP    ??SPI_Transfert_6
//  137         {
//  138          if((ByteToSend & 0x80) == 0x80){MOSI = HIGH;} // If byte to send = 1, send 1
//  139          else{MOSI   = LOW;}                           // If byte to send = 0, send 0
??SPI_Transfert_7:
        CLR     0x90.0
//  140          ByteToSend  = ByteToSend << 1;                // shift next bit into MSB
??SPI_Transfert_8:
        MOV     A,R2
        CLR     C
        RLC     A
        MOV     R2,A
//  141          SCK         = HIGH;                           // set SCK high
        SETB    0x90.2
//  142          SPI_Read   |= MISO;                           // capture current bit on MISO
        MOV     C,0x90.1
        CLR     A
        RLC     A
        XCH     A,R1
        ORL     A,R1
        MOV     R1,A
//  143          SCK         = LOW;                            // set SCK low
        CLR     0x90.2
        DEC     R0
??SPI_Transfert_6:
        MOV     A,R0
        CLR     C
        SUBB    A,#0x1
        JC      ??SPI_Transfert_9
        MOV     A,R2
        MOV     C,0xE0 /* A   */.7
        JNC     ??SPI_Transfert_7
        SETB    0x90.0
        SJMP    ??SPI_Transfert_8
//  144         }
//  145    break;
??SPI_Transfert_9:
        RET
//  146    
//  147    case 1:    // SCK is idle-low, and bits are latched on SCK falling
//  148       for(SPI_count = 8; SPI_count > 0; SPI_count--)   // single byte SPI loop
??SPI_Transfert_2:
        MOV     R0,#0x8
        SJMP    ??SPI_Transfert_10
//  149         {
//  150          SCK         = HIGH;                           // set SCK high          
//  151          if((ByteToSend & 0x80) == 0x80){MOSI = HIGH;} // If byte to send = 1, send 1
//  152          else{MOSI   = LOW;}                           // If byte to send = 0, send 0
??SPI_Transfert_11:
        CLR     0x90.0
//  153          ByteToSend  = ByteToSend << 1;                // shift next bit into MSB
??SPI_Transfert_12:
        MOV     A,R2
        CLR     C
        RLC     A
        MOV     R2,A
//  154          SCK         = LOW;                            // set SCK low
        CLR     0x90.2
//  155          SPI_Read   |= MISO;                           // capture current bit on MISO
        MOV     C,0x90.1
        CLR     A
        RLC     A
        XCH     A,R1
        ORL     A,R1
        MOV     R1,A
        DEC     R0
??SPI_Transfert_10:
        MOV     A,R0
        CLR     C
        SUBB    A,#0x1
        JC      ??SPI_Transfert_13
        SETB    0x90.2
        MOV     A,R2
        MOV     C,0xE0 /* A   */.7
        JNC     ??SPI_Transfert_11
        SETB    0x90.0
        SJMP    ??SPI_Transfert_12
//  156         }
//  157    break;   
??SPI_Transfert_13:
        RET
//  158  
//  159   case 2:    // SCK is idle-high, and bits are latched on SCK falling
//  160       for(SPI_count = 8; SPI_count > 0; SPI_count--)   // single byte SPI loop
??SPI_Transfert_3:
        MOV     R0,#0x8
        SJMP    ??SPI_Transfert_14
//  161         {      
//  162          if((ByteToSend & 0x80) == 0x80){MOSI = HIGH;} // If byte to send = 1, send 1
//  163          else{MOSI   = LOW;}                           // If byte to send = 0, send 0
??SPI_Transfert_15:
        CLR     0x90.0
//  164          ByteToSend  = ByteToSend << 1;                // shift next bit into MSB         
??SPI_Transfert_16:
        MOV     A,R2
        CLR     C
        RLC     A
        MOV     R2,A
//  165          SCK         = LOW;                            // set SCK low         
        CLR     0x90.2
//  166          SPI_Read   |= MISO;                           // capture current bit on MISO
        MOV     C,0x90.1
        CLR     A
        RLC     A
        XCH     A,R1
        ORL     A,R1
        MOV     R1,A
//  167          SCK         = HIGH;                           // set SCK low          
        SETB    0x90.2
        DEC     R0
??SPI_Transfert_14:
        MOV     A,R0
        CLR     C
        SUBB    A,#0x1
        JC      ??SPI_Transfert_17
        MOV     A,R2
        MOV     C,0xE0 /* A   */.7
        JNC     ??SPI_Transfert_15
        SETB    0x90.0
        SJMP    ??SPI_Transfert_16
//  168         }
//  169    break; 
//  170  
//  171    case 3:    // SCK is idle-high, and bits are latched on SCK rising
//  172       for(SPI_count = 8; SPI_count > 0; SPI_count--)   // single byte SPI loop
??SPI_Transfert_4:
        MOV     R0,#0x8
        SJMP    ??SPI_Transfert_18
//  173         {   
//  174          SCK         = LOW;                            // set SCK low           
//  175          if((ByteToSend & 0x80) == 0x80){MOSI = HIGH;} // If byte to send = 1, send 1
//  176          else{MOSI   = LOW;}                           // If byte to send = 0, send 0
??SPI_Transfert_19:
        CLR     0x90.0
//  177          ByteToSend  = ByteToSend << 1;                // shift next bit into MSB         
??SPI_Transfert_20:
        MOV     A,R2
        CLR     C
        RLC     A
        MOV     R2,A
//  178          SCK         = HIGH;                           // set SCK low         
        SETB    0x90.2
//  179          SPI_Read   |= MISO;                           // capture current bit on MISO    
        MOV     C,0x90.1
        CLR     A
        RLC     A
        XCH     A,R1
        ORL     A,R1
        MOV     R1,A
        DEC     R0
??SPI_Transfert_18:
        MOV     A,R0
        CLR     C
        SUBB    A,#0x1
        JC      ??SPI_Transfert_17
        CLR     0x90.2
        MOV     A,R2
        MOV     C,0xE0 /* A   */.7
        JNC     ??SPI_Transfert_19
        SETB    0x90.0
        SJMP    ??SPI_Transfert_20
//  180         }
//  181    break; 
//  182 
//  183   default :    // If nothing else is specified, SCK is idle-high, and bits are latched on SCK rising
//  184       for(SPI_count = 8; SPI_count > 0; SPI_count--)   // single byte SPI loop
??SPI_Transfert_5:
        MOV     R0,#0x8
        SJMP    ??SPI_Transfert_21
//  185         {     
//  186          if((ByteToSend & 0x80) == 0x80){MOSI = HIGH;} // If byte to send = 1, send 1
//  187          else{MOSI   = LOW;}                           // If byte to send = 0, send 0
??SPI_Transfert_22:
        CLR     0x90.0
//  188          ByteToSend  = ByteToSend << 1;                // shift next bit into MSB
??SPI_Transfert_23:
        MOV     A,R2
        CLR     C
        RLC     A
        MOV     R2,A
//  189          SCK         = HIGH;                           // set SCK high
        SETB    0x90.2
//  190          SPI_Read   |= MISO;                           // capture current bit on MISO
        MOV     C,0x90.1
        CLR     A
        RLC     A
        XCH     A,R1
        ORL     A,R1
        MOV     R1,A
//  191          SCK         = LOW;                            // set SCK low   
        CLR     0x90.2
        DEC     R0
??SPI_Transfert_21:
        MOV     A,R0
        CLR     C
        SUBB    A,#0x1
        JC      ??SPI_Transfert_17
        MOV     A,R2
        MOV     C,0xE0 /* A   */.7
        JNC     ??SPI_Transfert_22
        SETB    0x90.0
        SJMP    ??SPI_Transfert_23
//  192         }
//  193    break;   
//  194   }
//  195 return (SPI_Read);                                     // Return captured bit
??SPI_Transfert_17:
        RET
        CFI EndBlock cfiBlock10
        REQUIRE _A_P1
//  196 }

        END
//  197 //LinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxTUX
// 
// 582 bytes in segment NEAR_CODE
//   1 byte  in segment SFR_AN
// 
// 582 bytes of CODE memory
//   0 bytes of DATA memory (+ 1 byte shared)
//
//Errors: none
//Warnings: none
