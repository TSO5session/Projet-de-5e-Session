###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.40194/W32 for 8051         30/Sep/2014  20:43:27 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  near                                               #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data                                               #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Synchro\Dropbox\Travaux\Automne                 #
#                          2014\Fonctions\Projet Accumulatif                  #
#                          IAR\CLinOutBase.cpp                                #
#    Command line       =  "C:\Synchro\Dropbox\Travaux\Automne                #
#                          2014\Fonctions\Projet Accumulatif                  #
#                          IAR\CLinOutBase.cpp" -D DALLAS89C450               #
#                          --preprocess=cl "C:\Synchro\Dropbox\Travaux\Automn #
#                          e 2014\Fonctions\Projet Accumulatif                #
#                          IAR\DALLAS\List\" -lC "C:\Synchro\Dropbox\Travaux\ #
#                          Automne 2014\Fonctions\Projet Accumulatif          #
#                          IAR\DALLAS\List\" -lA "C:\Synchro\Dropbox\Travaux\ #
#                          Automne 2014\Fonctions\Projet Accumulatif          #
#                          IAR\DALLAS\List\" -o "C:\Synchro\Dropbox\Travaux\A #
#                          utomne 2014\Fonctions\Projet Accumulatif           #
#                          IAR\DALLAS\Obj\" -e --no_cse --no_unroll           #
#                          --no_inline --no_code_motion --no_tbaa --debug     #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=near --calling_convention=xdata_reent #
#                          rant --place_constants=data --nr_virtual_regs 8    #
#                          --dlib_config "C:\Program Files (x86)\IAR          #
#                          Systems\Embedded Workbench                         #
#                          6.0\8051\LIB\DLIB\dl8051Normal.h" -Ol --ec++       #
#    List file          =  C:\Synchro\Dropbox\Travaux\Automne                 #
#                          2014\Fonctions\Projet Accumulatif                  #
#                          IAR\DALLAS\List\CLinOutBase.lst                    #
#    Object file        =  C:\Synchro\Dropbox\Travaux\Automne                 #
#                          2014\Fonctions\Projet Accumulatif                  #
#                          IAR\DALLAS\Obj\CLinOutBase.r51                     #
#                                                                             #
#                                                                             #
###############################################################################

C:\Synchro\Dropbox\Travaux\Automne 2014\Fonctions\Projet Accumulatif IAR\CLinOutBase.cpp
      1          // ************************** FICHIER: CLInOutBase.CPP  ************************
      2          // *****************************************************************************
      3          #include "CLInOutBase.h"
      4          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
      5          void CLInOutBase :: vOutPort(USI uiAdresse, UC ucData)
   \                     ??vOutPort:
      6          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
      7          UC xdata *ucpPointeur;         //Initialisation pointeur sur memoire externe
      8          
      9          ucpPointeur  = (UC xdata *) uiAdresse;// Adressage de la case memoire
     10          *ucpPointeur = ucData;                // Ecriture de bits sur le bus de donnees
   \   000004   E9           MOV     A,R1
   \   000005   8C82         MOV     DPL,R4
   \   000007   8D83         MOV     DPH,R5
   \   000009   F0           MOVX    @DPTR,A
     11          }
   \   00000A   D083         POP     DPH
   \   00000C   D082         POP     DPL
   \   00000E   22           RET
     12          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
     13          UC CLInOutBase :: ucInPort(USI uiAdresse)
   \                     ??ucInPort:
     14          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     15          UC xdata *ucpPointeur;         //Initialisation pointeur sur memoire externe
     16          UC ucData   = 0;               //Initialisation d'une variable de reception
   \   000004   7900         MOV     R1,#0x0
     17          ucpPointeur = (UC xdata *)uiAdresse; //Adressage de la case memoire
     18          ucData      = *ucpPointeur;          //Lecture de bits sur le bus de donnees
   \   000006   8C82         MOV     DPL,R4
   \   000008   8D83         MOV     DPH,R5
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F9           MOV     R1,A
     19          return ucData;
   \   00000C   D083         POP     DPH
   \   00000E   D082         POP     DPL
   \   000010   22           RET
     20          }
     21          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
     22          void CLInOutBase :: vOut(USI uiAdresse, UC ucData)
   \                     ??vOut:
     23          {
   \   000000   EE           MOV     A,R6
   \   000001   C0E0         PUSH    A
   \   000003                ; Saved register size: 1
   \   000003                ; Auto size: 0
   \   000003   E9           MOV     A,R1
   \   000004   FE           MOV     R6,A
     24          vOutPort(uiAdresse, ucData);
   \   000005                ; Setup parameters for call to function CLInOutBase::vOutPort(USI, UC)
   \   000005   F9           MOV     R1,A
   \   000006   12....       LCALL   ??vOutPort
     25          }
   \   000009   D0E0         POP     A
   \   00000B   FE           MOV     R6,A
   \   00000C   22           RET
     26          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
     27          void CLInOutBase :: vOut(USI uiAdresse, USI uiDonnee, UC ucTypeTransfert)
   \                     ??vOut_1:
     28          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   \   000012   89..         MOV     ?V0 + 2,R1
   \   000014   740C         MOV     A,#0xc
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F8           MOV     R0,A
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F9           MOV     R1,A
     29          union UNEntierOctet unData;
     30          unData.uiEntier = uiDonnee;
   \   00001E   85..82       MOV     DPL,?XSP + 0
   \   000021   85..83       MOV     DPH,?XSP + 1
   \   000024   E8           MOV     A,R0
   \   000025   F0           MOVX    @DPTR,A
   \   000026   A3           INC     DPTR
   \   000027   E9           MOV     A,R1
   \   000028   F0           MOVX    @DPTR,A
     31          
     32          if(ucTypeTransfert == SAMELSB)
   \   000029   7401         MOV     A,#0x1
   \   00002B   65..         XRL     A,?V0 + 2
   \   00002D   7026         JNZ     ??vOut_2
     33            {
     34             vOutPort(uiAdresse, unData.stDoubleOctet.ucOctet1);
   \   00002F                ; Setup parameters for call to function CLInOutBase::vOutPort(USI, UC)
   \   00002F   85..82       MOV     DPL,?XSP + 0
   \   000032   85..83       MOV     DPH,?XSP + 1
   \   000035   E0           MOVX    A,@DPTR
   \   000036   F9           MOV     R1,A
   \   000037   EE           MOV     A,R6
   \   000038   FC           MOV     R4,A
   \   000039   EF           MOV     A,R7
   \   00003A   FD           MOV     R5,A
   \   00003B   AA..         MOV     R2,?V0 + 0
   \   00003D   AB..         MOV     R3,?V0 + 1
   \   00003F   12....       LCALL   ??vOutPort
     35             vOutPort(uiAdresse, unData.stDoubleOctet.ucOctet1);
   \   000042                ; Setup parameters for call to function CLInOutBase::vOutPort(USI, UC)
   \   000042   85..82       MOV     DPL,?XSP + 0
   \   000045   85..83       MOV     DPH,?XSP + 1
   \   000048   E0           MOVX    A,@DPTR
   \   000049   F9           MOV     R1,A
   \   00004A   EE           MOV     A,R6
   \   00004B   FC           MOV     R4,A
   \   00004C   EF           MOV     A,R7
   \   00004D   FD           MOV     R5,A
   \   00004E   AA..         MOV     R2,?V0 + 0
   \   000050   AB..         MOV     R3,?V0 + 1
   \   000052   12....       LCALL   ??vOutPort
     36            }
     37          
     38          if(ucTypeTransfert == SAMEMSB)
   \                     ??vOut_2:
   \   000055   7402         MOV     A,#0x2
   \   000057   65..         XRL     A,?V0 + 2
   \   000059   7024         JNZ     ??vOut_3
     39            {
     40             vOutPort(uiAdresse, unData.stDoubleOctet.ucOctet2);
   \   00005B                ; Setup parameters for call to function CLInOutBase::vOutPort(USI, UC)
   \   00005B   7401         MOV     A,#0x1
   \   00005D   12....       LCALL   ?XSTACK_DISP0_8
   \   000060   E0           MOVX    A,@DPTR
   \   000061   F9           MOV     R1,A
   \   000062   EE           MOV     A,R6
   \   000063   FC           MOV     R4,A
   \   000064   EF           MOV     A,R7
   \   000065   FD           MOV     R5,A
   \   000066   AA..         MOV     R2,?V0 + 0
   \   000068   AB..         MOV     R3,?V0 + 1
   \   00006A   12....       LCALL   ??vOutPort
     41             vOutPort(uiAdresse, unData.stDoubleOctet.ucOctet2);
   \   00006D                ; Setup parameters for call to function CLInOutBase::vOutPort(USI, UC)
   \   00006D   7401         MOV     A,#0x1
   \   00006F   12....       LCALL   ?XSTACK_DISP0_8
   \   000072   E0           MOVX    A,@DPTR
   \   000073   F9           MOV     R1,A
   \   000074   EE           MOV     A,R6
   \   000075   FC           MOV     R4,A
   \   000076   EF           MOV     A,R7
   \   000077   FD           MOV     R5,A
   \   000078   AA..         MOV     R2,?V0 + 0
   \   00007A   AB..         MOV     R3,?V0 + 1
   \   00007C   12....       LCALL   ??vOutPort
     42            }
     43          
     44          if(ucTypeTransfert == SUITELSB)
   \                     ??vOut_3:
   \   00007F   7403         MOV     A,#0x3
   \   000081   65..         XRL     A,?V0 + 2
   \   000083   7025         JNZ     ??vOut_4
     45            {
     46             vOutPort(uiAdresse, unData.stDoubleOctet.ucOctet1);
   \   000085                ; Setup parameters for call to function CLInOutBase::vOutPort(USI, UC)
   \   000085   85..82       MOV     DPL,?XSP + 0
   \   000088   85..83       MOV     DPH,?XSP + 1
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   F9           MOV     R1,A
   \   00008D   EE           MOV     A,R6
   \   00008E   FC           MOV     R4,A
   \   00008F   EF           MOV     A,R7
   \   000090   FD           MOV     R5,A
   \   000091   AA..         MOV     R2,?V0 + 0
   \   000093   AB..         MOV     R3,?V0 + 1
   \   000095   12....       LCALL   ??vOutPort
     47             vOutPort(uiAdresse, unData.stDoubleOctet.ucOctet2);
   \   000098                ; Setup parameters for call to function CLInOutBase::vOutPort(USI, UC)
   \   000098   7401         MOV     A,#0x1
   \   00009A   12....       LCALL   ?XSTACK_DISP0_8
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   F9           MOV     R1,A
   \   00009F   EE           MOV     A,R6
   \   0000A0   FC           MOV     R4,A
   \   0000A1   EF           MOV     A,R7
   \   0000A2   FD           MOV     R5,A
   \   0000A3   AA..         MOV     R2,?V0 + 0
   \   0000A5   AB..         MOV     R3,?V0 + 1
   \   0000A7   12....       LCALL   ??vOutPort
     48            }
     49          
     50          if(ucTypeTransfert == SUITEMSB)
   \                     ??vOut_4:
   \   0000AA   7404         MOV     A,#0x4
   \   0000AC   65..         XRL     A,?V0 + 2
   \   0000AE   7025         JNZ     ??vOut_5
     51            {
     52             vOutPort(uiAdresse, unData.stDoubleOctet.ucOctet2);
   \   0000B0                ; Setup parameters for call to function CLInOutBase::vOutPort(USI, UC)
   \   0000B0   7401         MOV     A,#0x1
   \   0000B2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B5   E0           MOVX    A,@DPTR
   \   0000B6   F9           MOV     R1,A
   \   0000B7   EE           MOV     A,R6
   \   0000B8   FC           MOV     R4,A
   \   0000B9   EF           MOV     A,R7
   \   0000BA   FD           MOV     R5,A
   \   0000BB   AA..         MOV     R2,?V0 + 0
   \   0000BD   AB..         MOV     R3,?V0 + 1
   \   0000BF   12....       LCALL   ??vOutPort
     53             vOutPort(uiAdresse, unData.stDoubleOctet.ucOctet1);
   \   0000C2                ; Setup parameters for call to function CLInOutBase::vOutPort(USI, UC)
   \   0000C2   85..82       MOV     DPL,?XSP + 0
   \   0000C5   85..83       MOV     DPH,?XSP + 1
   \   0000C8   E0           MOVX    A,@DPTR
   \   0000C9   F9           MOV     R1,A
   \   0000CA   EE           MOV     A,R6
   \   0000CB   FC           MOV     R4,A
   \   0000CC   EF           MOV     A,R7
   \   0000CD   FD           MOV     R5,A
   \   0000CE   AA..         MOV     R2,?V0 + 0
   \   0000D0   AB..         MOV     R3,?V0 + 1
   \   0000D2   12....       LCALL   ??vOutPort
     54            }
     55          }
   \                     ??vOut_5:
   \   0000D5   7402         MOV     A,#0x2
   \   0000D7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000DA   7F03         MOV     R7,#0x3
   \   0000DC   02....       LJMP    ?FUNC_LEAVE_XDATA
     56          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
     57          UC CLInOutBase :: ucIn(USI uiAdresse)
   \                     ??ucIn:
     58          {
   \   000000   EE           MOV     A,R6
   \   000001   C0E0         PUSH    A
   \   000003                ; Saved register size: 1
   \   000003                ; Auto size: 0
     59          UC ucData = 0;                 //Initialisation d'une variable de reception
   \   000003   7E00         MOV     R6,#0x0
     60          ucData    = ucInPort(uiAdresse);
   \   000005                ; Setup parameters for call to function CLInOutBase::ucInPort(USI)
   \   000005   12....       LCALL   ??ucInPort
   \   000008   E9           MOV     A,R1
   \   000009   FE           MOV     R6,A
     61          return ucData;
   \   00000A   F9           MOV     R1,A
   \   00000B   D0E0         POP     A
   \   00000D   FE           MOV     R6,A
   \   00000E   22           RET
     62          }
     63          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
     64          UC CLInOutBase :: ucIn(USI uiAdresse, UC ucTypeTransfert)
   \                     ??ucIn_1:
     65          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   \   000012   89..         MOV     ?V0 + 2,R1
     66          union UNEntierOctet unData;
     67          unData.uiEntier = 0x00;
   \   000014   85..82       MOV     DPL,?XSP + 0
   \   000017   85..83       MOV     DPH,?XSP + 1
   \   00001A   7400         MOV     A,#0x0
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   A3           INC     DPTR
   \   00001E   7400         MOV     A,#0x0
   \   000020   F0           MOVX    @DPTR,A
     68          
     69          unData.stDoubleOctet.ucOctet1 = 0x00;
   \   000021   85..82       MOV     DPL,?XSP + 0
   \   000024   85..83       MOV     DPH,?XSP + 1
   \   000027   7400         MOV     A,#0x0
   \   000029   F0           MOVX    @DPTR,A
     70          unData.stDoubleOctet.ucOctet2 = 0x00;
   \   00002A   7401         MOV     A,#0x1
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   7400         MOV     A,#0x0
   \   000031   F0           MOVX    @DPTR,A
     71          
     72          if(ucTypeTransfert == SAMELSB)
   \   000032   7401         MOV     A,#0x1
   \   000034   65..         XRL     A,?V0 + 2
   \   000036   7026         JNZ     ??ucIn_2
     73            {
     74             unData.stDoubleOctet.ucOctet1 = ucInPort(uiAdresse);
   \   000038                ; Setup parameters for call to function CLInOutBase::ucInPort(USI)
   \   000038   EE           MOV     A,R6
   \   000039   FC           MOV     R4,A
   \   00003A   EF           MOV     A,R7
   \   00003B   FD           MOV     R5,A
   \   00003C   AA..         MOV     R2,?V0 + 0
   \   00003E   AB..         MOV     R3,?V0 + 1
   \   000040   12....       LCALL   ??ucInPort
   \   000043   E9           MOV     A,R1
   \   000044   85..82       MOV     DPL,?XSP + 0
   \   000047   85..83       MOV     DPH,?XSP + 1
   \   00004A   F0           MOVX    @DPTR,A
     75             unData.stDoubleOctet.ucOctet1 = ucInPort(uiAdresse);
   \   00004B                ; Setup parameters for call to function CLInOutBase::ucInPort(USI)
   \   00004B   EE           MOV     A,R6
   \   00004C   FC           MOV     R4,A
   \   00004D   EF           MOV     A,R7
   \   00004E   FD           MOV     R5,A
   \   00004F   AA..         MOV     R2,?V0 + 0
   \   000051   AB..         MOV     R3,?V0 + 1
   \   000053   12....       LCALL   ??ucInPort
   \   000056   E9           MOV     A,R1
   \   000057   85..82       MOV     DPL,?XSP + 0
   \   00005A   85..83       MOV     DPH,?XSP + 1
   \   00005D   F0           MOVX    @DPTR,A
     76            }
     77          
     78          if(ucTypeTransfert == SAMEMSB)
   \                     ??ucIn_2:
   \   00005E   7402         MOV     A,#0x2
   \   000060   65..         XRL     A,?V0 + 2
   \   000062   702C         JNZ     ??ucIn_3
     79            {
     80             unData.stDoubleOctet.ucOctet2 = ucInPort(uiAdresse);
   \   000064                ; Setup parameters for call to function CLInOutBase::ucInPort(USI)
   \   000064   EE           MOV     A,R6
   \   000065   FC           MOV     R4,A
   \   000066   EF           MOV     A,R7
   \   000067   FD           MOV     R5,A
   \   000068   AA..         MOV     R2,?V0 + 0
   \   00006A   AB..         MOV     R3,?V0 + 1
   \   00006C   12....       LCALL   ??ucInPort
   \   00006F   E9           MOV     A,R1
   \   000070   C0E0         PUSH    A
   \   000072   7401         MOV     A,#0x1
   \   000074   12....       LCALL   ?XSTACK_DISP0_8
   \   000077   D0E0         POP     A
   \   000079   F0           MOVX    @DPTR,A
     81             unData.stDoubleOctet.ucOctet2 = ucInPort(uiAdresse);
   \   00007A                ; Setup parameters for call to function CLInOutBase::ucInPort(USI)
   \   00007A   EE           MOV     A,R6
   \   00007B   FC           MOV     R4,A
   \   00007C   EF           MOV     A,R7
   \   00007D   FD           MOV     R5,A
   \   00007E   AA..         MOV     R2,?V0 + 0
   \   000080   AB..         MOV     R3,?V0 + 1
   \   000082   12....       LCALL   ??ucInPort
   \   000085   E9           MOV     A,R1
   \   000086   C0E0         PUSH    A
   \   000088   7401         MOV     A,#0x1
   \   00008A   12....       LCALL   ?XSTACK_DISP0_8
   \   00008D   D0E0         POP     A
   \   00008F   F0           MOVX    @DPTR,A
     82            }
     83          
     84          if(ucTypeTransfert == SUITELSB)
   \                     ??ucIn_3:
   \   000090   7403         MOV     A,#0x3
   \   000092   65..         XRL     A,?V0 + 2
   \   000094   7029         JNZ     ??ucIn_4
     85             {
     86              unData.stDoubleOctet.ucOctet1 = ucInPort(uiAdresse);
   \   000096                ; Setup parameters for call to function CLInOutBase::ucInPort(USI)
   \   000096   EE           MOV     A,R6
   \   000097   FC           MOV     R4,A
   \   000098   EF           MOV     A,R7
   \   000099   FD           MOV     R5,A
   \   00009A   AA..         MOV     R2,?V0 + 0
   \   00009C   AB..         MOV     R3,?V0 + 1
   \   00009E   12....       LCALL   ??ucInPort
   \   0000A1   E9           MOV     A,R1
   \   0000A2   85..82       MOV     DPL,?XSP + 0
   \   0000A5   85..83       MOV     DPH,?XSP + 1
   \   0000A8   F0           MOVX    @DPTR,A
     87              unData.stDoubleOctet.ucOctet2 = ucInPort(uiAdresse);
   \   0000A9                ; Setup parameters for call to function CLInOutBase::ucInPort(USI)
   \   0000A9   EE           MOV     A,R6
   \   0000AA   FC           MOV     R4,A
   \   0000AB   EF           MOV     A,R7
   \   0000AC   FD           MOV     R5,A
   \   0000AD   AA..         MOV     R2,?V0 + 0
   \   0000AF   AB..         MOV     R3,?V0 + 1
   \   0000B1   12....       LCALL   ??ucInPort
   \   0000B4   E9           MOV     A,R1
   \   0000B5   C0E0         PUSH    A
   \   0000B7   7401         MOV     A,#0x1
   \   0000B9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BC   D0E0         POP     A
   \   0000BE   F0           MOVX    @DPTR,A
     88             }
     89          
     90          if(ucTypeTransfert == SUITEMSB)
   \                     ??ucIn_4:
   \   0000BF   7404         MOV     A,#0x4
   \   0000C1   65..         XRL     A,?V0 + 2
   \   0000C3   7029         JNZ     ??ucIn_5
     91            {
     92             unData.stDoubleOctet.ucOctet2 = ucInPort(uiAdresse);
   \   0000C5                ; Setup parameters for call to function CLInOutBase::ucInPort(USI)
   \   0000C5   EE           MOV     A,R6
   \   0000C6   FC           MOV     R4,A
   \   0000C7   EF           MOV     A,R7
   \   0000C8   FD           MOV     R5,A
   \   0000C9   AA..         MOV     R2,?V0 + 0
   \   0000CB   AB..         MOV     R3,?V0 + 1
   \   0000CD   12....       LCALL   ??ucInPort
   \   0000D0   E9           MOV     A,R1
   \   0000D1   C0E0         PUSH    A
   \   0000D3   7401         MOV     A,#0x1
   \   0000D5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D8   D0E0         POP     A
   \   0000DA   F0           MOVX    @DPTR,A
     93             unData.stDoubleOctet.ucOctet1 = ucInPort(uiAdresse);
   \   0000DB                ; Setup parameters for call to function CLInOutBase::ucInPort(USI)
   \   0000DB   EE           MOV     A,R6
   \   0000DC   FC           MOV     R4,A
   \   0000DD   EF           MOV     A,R7
   \   0000DE   FD           MOV     R5,A
   \   0000DF   AA..         MOV     R2,?V0 + 0
   \   0000E1   AB..         MOV     R3,?V0 + 1
   \   0000E3   12....       LCALL   ??ucInPort
   \   0000E6   E9           MOV     A,R1
   \   0000E7   85..82       MOV     DPL,?XSP + 0
   \   0000EA   85..83       MOV     DPH,?XSP + 1
   \   0000ED   F0           MOVX    @DPTR,A
     94            }
     95          return unData.uiEntier;
   \                     ??ucIn_5:
   \   0000EE   85..82       MOV     DPL,?XSP + 0
   \   0000F1   85..83       MOV     DPH,?XSP + 1
   \   0000F4   E0           MOVX    A,@DPTR
   \   0000F5   F8           MOV     R0,A
   \   0000F6   A3           INC     DPTR
   \   0000F7   E0           MOVX    A,@DPTR
   \   0000F8   F9           MOV     R1,A
   \   0000F9   E8           MOV     A,R0
   \   0000FA   F9           MOV     R1,A
   \   0000FB   7402         MOV     A,#0x2
   \   0000FD   12....       LCALL   ?DEALLOC_XSTACK8
   \   000100   7F03         MOV     R7,#0x3
   \   000102   02....       LJMP    ?FUNC_LEAVE_XDATA
     96          }
     97          //LinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxTUX
     98          

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     CLInOutBase::ucIn(USI)             1      0      0
       -> CLInOutBase::ucInPort(USI)
                                        2      0      0
     CLInOutBase::ucIn(USI, UC)         1      0     12
       -> CLInOutBase::ucInPort(USI)
                                        0      0     24
       -> CLInOutBase::ucInPort(USI)
                                        0      0     24
       -> CLInOutBase::ucInPort(USI)
                                        0      0     24
       -> CLInOutBase::ucInPort(USI)
                                        0      0     24
       -> CLInOutBase::ucInPort(USI)
                                        0      0     24
       -> CLInOutBase::ucInPort(USI)
                                        0      0     24
       -> CLInOutBase::ucInPort(USI)
                                        0      0     24
       -> CLInOutBase::ucInPort(USI)
                                        0      0     24
     CLInOutBase::ucInPort(USI)         2      0     12
     CLInOutBase::vOut(USI, UC)         1      0      0
       -> CLInOutBase::vOutPort(USI, UC)
                                        2      0      0
     CLInOutBase::vOut(USI, USI, UC)
                                        0      0     14
       -> CLInOutBase::vOutPort(USI, UC)
                                        0      0     24
       -> CLInOutBase::vOutPort(USI, UC)
                                        0      0     24
       -> CLInOutBase::vOutPort(USI, UC)
                                        0      0     24
       -> CLInOutBase::vOutPort(USI, UC)
                                        0      0     24
       -> CLInOutBase::vOutPort(USI, UC)
                                        0      0     24
       -> CLInOutBase::vOutPort(USI, UC)
                                        0      0     24
       -> CLInOutBase::vOutPort(USI, UC)
                                        0      0     24
       -> CLInOutBase::vOutPort(USI, UC)
                                        0      0     24
     CLInOutBase::vOutPort(USI, UC)     3      0     12


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     CLInOutBase::vOutPort(USI, UC)   15
     CLInOutBase::ucInPort(USI)       17
     CLInOutBase::vOut(USI, UC)       13
     CLInOutBase::vOut(USI, USI, UC)
                                     223
     CLInOutBase::ucIn(USI)           15
     CLInOutBase::ucIn(USI, UC)      261

 
 544 bytes in segment NEAR_CODE
 
 544 bytes of CODE memory

Errors: none
Warnings: none
