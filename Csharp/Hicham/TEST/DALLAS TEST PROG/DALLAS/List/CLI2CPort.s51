///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.40194/W32 for 8051        14/Nov/2014  22:00:59 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  near                                              /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data                                              /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Synchro\Dropbox\Travaux\Automne                /
//                          2014\ProjetSession5\Csharp\TEST\DALLAS TEST       /
//                          PROG\CLI2CPort.Cpp                                /
//    Command line       =  "C:\Synchro\Dropbox\Travaux\Automne               /
//                          2014\ProjetSession5\Csharp\TEST\DALLAS TEST       /
//                          PROG\CLI2CPort.Cpp" -D DALLAS89C450               /
//                          --preprocess=cl "C:\Synchro\Dropbox\Travaux\Autom /
//                          ne 2014\ProjetSession5\Csharp\TEST\DALLAS TEST    /
//                          PROG\DALLAS\List\" -lC "C:\Synchro\Dropbox\Travau /
//                          x\Automne 2014\ProjetSession5\Csharp\TEST\DALLAS  /
//                          TEST PROG\DALLAS\List\" -lA                       /
//                          "C:\Synchro\Dropbox\Travaux\Automne               /
//                          2014\ProjetSession5\Csharp\TEST\DALLAS TEST       /
//                          PROG\DALLAS\List\" -o "C:\Synchro\Dropbox\Travaux /
//                          \Automne 2014\ProjetSession5\Csharp\TEST\DALLAS   /
//                          TEST PROG\DALLAS\Obj\" -e --no_cse --no_unroll    /
//                          --no_inline --no_code_motion --no_tbaa --debug    /
//                          --core=plain --dptr=16,1 --data_model=large       /
//                          --code_model=near --calling_convention=xdata_reen /
//                          trant --place_constants=data --nr_virtual_regs 8  /
//                          --dlib_config "C:\Program Files (x86)\IAR         /
//                          Systems\Embedded Workbench                        /
//                          6.0\8051\LIB\DLIB\dl8051Normal.h" -Ol --ec++      /
//    List file          =  C:\Synchro\Dropbox\Travaux\Automne                /
//                          2014\ProjetSession5\Csharp\TEST\DALLAS TEST       /
//                          PROG\DALLAS\List\CLI2CPort.s51                    /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME CLI2CPort

        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "near"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?FUNC_ENTER_XDATA
        EXTERN ?FUNC_LEAVE_XDATA
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8

        PUBLIC ??CLI2CPort
        FUNCTION ??CLI2CPort,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC `??delete ~CLI2CPort`
        FUNCTION `??delete ~CLI2CPort`,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        PUBLIC `??new CLI2CPort`
        FUNCTION `??new CLI2CPort`,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ??ucI2CLireDonnee
        FUNCTION ??ucI2CLireDonnee,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        PUBLIC ??vI2CEcrireDonnee
        FUNCTION ??vI2CEcrireDonnee,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        PUBLIC ??vI2CEcrireDonnee_1
        FUNCTION ??vI2CEcrireDonnee_1,021203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME XSTACK, 17, STACK
        PUBLIC ??vI2CLireDonnee
        FUNCTION ??vI2CLireDonnee,021203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC `?~CLI2CPort`
        FUNCTION `?~CLI2CPort`,021203H
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:16, ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        EXTERN `??operator new`
        FUNCTION `??operator new`,010202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN `??operator delete`
        FUNCTION `??operator delete`,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??CLI2CBase
        FUNCTION ??CLI2CBase,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN `?~CLI2CBase`
        FUNCTION `?~CLI2CBase`,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??vI2CStart
        FUNCTION ??vI2CStart,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??ucI2CEcrireOctet
        FUNCTION ??ucI2CEcrireOctet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??ucI2CLireOctet
        FUNCTION ??ucI2CLireOctet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??vI2CStop
        FUNCTION ??vI2CStop,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC


        RSEG NEAR_CODE:CODE:NOROOT(0)
// __near_func __xdata_reentrant CLI2CPort &CLI2CPort::new CLI2CPort()
`??new CLI2CPort`:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function `??new CLI2CPort`
        CODE
        FUNCALL `??new CLI2CPort`, `??operator new`
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL `??new CLI2CPort`, ??CLI2CPort
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    ?V0 + 0
        CFI V0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    ?V0 + 1
        CFI V1 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
        ; Setup parameters for call to function operator new(unsigned int)
        MOV     R2,#0x2
        MOV     R3,#0x0
        LCALL   `??operator new`
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R0
        ORL     A,R1
        JZ      `??new CLI2CPort_1`
        ; Setup parameters for call to function CLI2CPort::CLI2CPort()
        LCALL   ??CLI2CPort
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        SJMP    `??new CLI2CPort_2`
`??new CLI2CPort_1`:
        MOV     R2,#0x0
        MOV     R3,#0x0
`??new CLI2CPort_2`:
        POP     ?V0 + 1
        CFI V1 SameValue
        CFI CFA_SP SP+-3
        POP     ?V0 + 0
        CFI V0 SameValue
        CFI CFA_SP SP+-2
        RET
        CFI EndBlock cfiBlock0

        RSEG NEAR_CODE:CODE:NOROOT(0)
// __near_func __xdata_reentrant void CLI2CPort::delete ~CLI2CPort(CLI2CPort *)
`??delete ~CLI2CPort`:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function `??delete ~CLI2CPort`
        CODE
        FUNCALL `??delete ~CLI2CPort`, `?~CLI2CPort`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL `??delete ~CLI2CPort`, `??operator delete`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x8
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 8)
        ; Saved register size: 8
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     A,R6
        ORL     A,R7
        JZ      `??delete ~CLI2CPort_1`
        ; Setup parameters for call to function CLI2CPort::~CLI2CPort()
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `?~CLI2CPort`
        ; Setup parameters for call to function operator delete(void *)
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??operator delete`
`??delete ~CLI2CPort_1`:
        MOV     R7,#0x1
        LJMP    ?FUNC_LEAVE_XDATA
        CFI EndBlock cfiBlock1
// C:\Synchro\Dropbox\Travaux\Automne 2014\ProjetSession5\Csharp\TEST\DALLAS TEST PROG\CLI2CPort.Cpp
//    1 // ************************** FICHIER: CLI2CPORT.CPP ************************
//    2 #include "CLI2CPort.h"
//    3 
//    4 // *****************************************************************************
//    5 //                            LES CONSTRUCTEURS
//    6 // *****************************************************************************

        RSEG NEAR_CODE:CODE:NOROOT(0)
//    7 CLI2CPort :: CLI2CPort(void)
??CLI2CPort:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function ??CLI2CPort
        CODE
        FUNCALL ??CLI2CPort, ??CLI2CBase
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
        MOV     DPL,R2
        MOV     DPH,R3
//    8 {
        ; Setup parameters for call to function CLI2CBase::CLI2CBase()
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??CLI2CBase
//    9 
//   10 }
        MOV     R2,DPL
        MOV     R3,DPH
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-3
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-2
        RET
        CFI EndBlock cfiBlock2
//   11 
//   12 // *****************************************************************************
//   13 //                            LE DESTRUCTEUR
//   14 // *****************************************************************************

        RSEG NEAR_CODE:CODE:NOROOT(0)
//   15 CLI2CPort :: ~CLI2CPort(void)
`?~CLI2CPort`:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function `?~CLI2CPort`
        CODE
//   16 {
        FUNCALL `?~CLI2CPort`, `?~CLI2CBase`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        ; Saved register size: 0
        ; Auto size: 0
//   17 
//   18 }
        ; Setup parameters for call to function CLI2CBase::~CLI2CBase()
        LJMP    `?~CLI2CBase`
        CFI EndBlock cfiBlock3
//   19 
//   20 ///////////////////////////////////////////////////////////////////////////////
//   21 // UC CLI2CPort :: ucI2CLireDonnee(UC ucAdrBoitier, UC ucAdrRegistre)
//   22 ///////////////////////////////////////////////////////////////////////////////
//   23 //
//   24 // Description:
//   25 //
//   26 // Parametres d'entrees: null
//   27 //
//   28 // Parametres de sortie: null
//   29 //
//   30 // Appel de la fonction:
//   31 //
//   32 // Cree le  4 avril 2014 par Louis-Normand Ang Houle
//   33 //
//   34 // Modifications:
//   35 // -
//   36 //
//   37 ///////////////////////////////////////////////////////////////////////////////
//   38 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//   39 UC CLI2CPort :: ucI2CLireDonnee(UC ucAdrBoitier, UC ucAdrRegistre)
??ucI2CLireDonnee:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function ??ucI2CLireDonnee
        CODE
//   40  {
        FUNCALL ??ucI2CLireDonnee, ??vI2CStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??ucI2CLireDonnee, ??vI2CStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??ucI2CLireDonnee, ??ucI2CEcrireOctet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??ucI2CLireDonnee, ??ucI2CEcrireOctet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??ucI2CLireDonnee, ??vI2CStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??ucI2CLireDonnee, ??vI2CStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??ucI2CLireDonnee, ??ucI2CEcrireOctet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??ucI2CLireDonnee, ??ucI2CLireOctet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??ucI2CLireDonnee, ??vI2CStop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x8
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 8)
        ; Saved register size: 8
        ; Auto size: 0
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     ?V0 + 0,R1
        MOV     A,R4
        MOV     R7,A
//   41    UC ucReadOctet = 0;
        MOV     R6,#0x0
//   42 
//   43    vI2CStart();
        ; Setup parameters for call to function CLI2CBase::vI2CStart()
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??vI2CStart
        SJMP    ??ucI2CLireDonnee_1
//   44    while(ucI2CEcrireOctet(ucAdrBoitier + WRITE)== NACK)
//   45     {
//   46       vI2CStart();
??ucI2CLireDonnee_2:
        ; Setup parameters for call to function CLI2CBase::vI2CStart()
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??vI2CStart
//   47     }
??ucI2CLireDonnee_1:
        ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
        MOV     R1,?V0 + 0
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ucI2CEcrireOctet
        MOV     A,R1
        XRL     A,#0x1
        JZ      ??ucI2CLireDonnee_2
//   48    while(ucI2CEcrireOctet(ucAdrRegistre)       == NACK);
??ucI2CLireDonnee_3:
        ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
        MOV     A,R7
        MOV     R1,A
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ucI2CEcrireOctet
        MOV     A,R1
        XRL     A,#0x1
        JZ      ??ucI2CLireDonnee_3
//   49    vI2CStart();
        ; Setup parameters for call to function CLI2CBase::vI2CStart()
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??vI2CStart
        SJMP    ??ucI2CLireDonnee_4
//   50    while(ucI2CEcrireOctet(ucAdrBoitier + READ) == NACK)
//   51     {
//   52       vI2CStart();
??ucI2CLireDonnee_5:
        ; Setup parameters for call to function CLI2CBase::vI2CStart()
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??vI2CStart
//   53     }
??ucI2CLireDonnee_4:
        ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
        MOV     A,#0x1
        ADD     A,?V0 + 0
        MOV     R1,A
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ucI2CEcrireOctet
        MOV     A,R1
        XRL     A,#0x1
        JZ      ??ucI2CLireDonnee_5
//   54    ucReadOctet = ucI2CLireOctet(NACK);
        ; Setup parameters for call to function CLI2CBase::ucI2CLireOctet(UC)
        MOV     R1,#0x1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ucI2CLireOctet
        MOV     A,R1
        MOV     R6,A
//   55    vI2CStop();
        ; Setup parameters for call to function CLI2CBase::vI2CStop()
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??vI2CStop
//   56    return(ucReadOctet);
        MOV     A,R6
        MOV     R1,A
        MOV     R7,#0x1
        LJMP    ?FUNC_LEAVE_XDATA
        CFI EndBlock cfiBlock4
//   57  }
//   58 
//   59 ///////////////////////////////////////////////////////////////////////////////
//   60 //void CLI2CPort :: vI2CLireDonnee(UC ucAdrBoitier, USI uiAdrRegistre,
//   61 //                                 UC ucTypeAdr ,UC *ucpRecevoirDonnee,
//   62 //                                 UC ucNbrLectures)
//   63 ///////////////////////////////////////////////////////////////////////////////
//   64 //
//   65 // Description:
//   66 //
//   67 // Parametres d'entrees: null
//   68 //
//   69 // Parametres de sortie: null
//   70 //
//   71 // Appel de la fonction:
//   72 //
//   73 // Cree le  4 avril 2014 par Louis-Normand Ang Houle
//   74 //
//   75 // Modifications:
//   76 // -
//   77 //
//   78 ///////////////////////////////////////////////////////////////////////////////
//   79 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//   80 void CLI2CPort :: vI2CLireDonnee(UC ucAdrBoitier,USI uiAdrRegistre,UC ucTypeAdr
??vI2CLireDonnee:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function ??vI2CLireDonnee
        CODE
//   81                                  ,UC *ucpRecevoirDonnee ,UC ucNbrLectures)
//   82  {
        FUNCALL ??vI2CLireDonnee, ??vI2CStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??vI2CLireDonnee, ??vI2CStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??vI2CLireDonnee, ??ucI2CEcrireOctet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??vI2CLireDonnee, ??vI2CStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??vI2CLireDonnee, ??vI2CStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??vI2CLireDonnee, ??ucI2CEcrireOctet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??vI2CLireDonnee, ??ucI2CEcrireOctet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??vI2CLireDonnee, ??vI2CStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??vI2CLireDonnee, ??vI2CStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??vI2CLireDonnee, ??ucI2CEcrireOctet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??vI2CLireDonnee, ??vI2CStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??vI2CLireDonnee, ??vI2CStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??vI2CLireDonnee, ??ucI2CEcrireOctet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??vI2CLireDonnee, ??ucI2CEcrireOctet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??vI2CLireDonnee, ??ucI2CEcrireOctet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??vI2CLireDonnee, ??vI2CStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??vI2CLireDonnee, ??vI2CStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??vI2CLireDonnee, ??ucI2CEcrireOctet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??vI2CLireDonnee, ??ucI2CLireOctet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??vI2CLireDonnee, ??ucI2CLireOctet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??vI2CLireDonnee, ??vI2CStop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 1,R1
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 6,A
//   83    union UNEntierOctet unAdresse;
//   84 
//   85    unAdresse.uiEntier = uiAdrRegistre;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
//   86 
//   87 //----------------------------------------------------------------------
//   88    switch (ucTypeAdr)
        MOV     A,R0
        JZ      ??vI2CLireDonnee_1
        DEC     A
        JZ      ??vI2CLireDonnee_2
        DEC     A
        JZ      ??vI2CLireDonnee_3
        LJMP    ??vI2CLireDonnee_4
//   89      {
//   90       case PASADR:
//   91        vI2CStart();
??vI2CLireDonnee_1:
        ; Setup parameters for call to function CLI2CBase::vI2CStart()
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??vI2CStart
        SJMP    ??vI2CLireDonnee_5
//   92        while(ucI2CEcrireOctet(ucAdrBoitier + READ) == NACK)
//   93          {
//   94            vI2CStart();
??vI2CLireDonnee_6:
        ; Setup parameters for call to function CLI2CBase::vI2CStart()
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??vI2CStart
//   95          }
??vI2CLireDonnee_5:
        ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
        MOV     A,#0x1
        ADD     A,?V0 + 1
        MOV     R1,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ucI2CEcrireOctet
        MOV     A,R1
        XRL     A,#0x1
        JZ      ??vI2CLireDonnee_6
//   96       break;
        LJMP    ??vI2CLireDonnee_4
//   97 //----------------------------------------------------------------------
//   98       case ADR8BIT:
//   99        vI2CStart();
??vI2CLireDonnee_2:
        ; Setup parameters for call to function CLI2CBase::vI2CStart()
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??vI2CStart
        SJMP    ??vI2CLireDonnee_7
//  100        while(ucI2CEcrireOctet(ucAdrBoitier + WRITE)             == NACK)
//  101          {
//  102            vI2CStart();
??vI2CLireDonnee_8:
        ; Setup parameters for call to function CLI2CBase::vI2CStart()
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??vI2CStart
//  103          }
??vI2CLireDonnee_7:
        ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
        MOV     R1,?V0 + 1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ucI2CEcrireOctet
        MOV     A,R1
        XRL     A,#0x1
        JZ      ??vI2CLireDonnee_8
//  104        while(ucI2CEcrireOctet(unAdresse.stDoubleOctet.ucOctet1) == NACK);
??vI2CLireDonnee_9:
        ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ucI2CEcrireOctet
        MOV     A,R1
        XRL     A,#0x1
        JZ      ??vI2CLireDonnee_9
//  105        vI2CStart();
        ; Setup parameters for call to function CLI2CBase::vI2CStart()
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??vI2CStart
        SJMP    ??vI2CLireDonnee_10
//  106        while(ucI2CEcrireOctet(ucAdrBoitier + READ)              == NACK)
//  107          {
//  108            vI2CStart();
??vI2CLireDonnee_11:
        ; Setup parameters for call to function CLI2CBase::vI2CStart()
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??vI2CStart
//  109          }
??vI2CLireDonnee_10:
        ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
        MOV     A,#0x1
        ADD     A,?V0 + 1
        MOV     R1,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ucI2CEcrireOctet
        MOV     A,R1
        XRL     A,#0x1
        JZ      ??vI2CLireDonnee_11
//  110       break;
        SJMP    ??vI2CLireDonnee_4
//  111 //----------------------------------------------------------------------
//  112       case ADR16BIT:
//  113        vI2CStart();
??vI2CLireDonnee_3:
        ; Setup parameters for call to function CLI2CBase::vI2CStart()
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??vI2CStart
        SJMP    ??vI2CLireDonnee_12
//  114        while(ucI2CEcrireOctet(ucAdrBoitier + WRITE)             == NACK)
//  115          {
//  116            vI2CStart();
??vI2CLireDonnee_13:
        ; Setup parameters for call to function CLI2CBase::vI2CStart()
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??vI2CStart
//  117          }
??vI2CLireDonnee_12:
        ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
        MOV     R1,?V0 + 1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ucI2CEcrireOctet
        MOV     A,R1
        XRL     A,#0x1
        JZ      ??vI2CLireDonnee_13
//  118        while(ucI2CEcrireOctet(unAdresse.stDoubleOctet.ucOctet1) == NACK);
??vI2CLireDonnee_14:
        ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ucI2CEcrireOctet
        MOV     A,R1
        XRL     A,#0x1
        JZ      ??vI2CLireDonnee_14
//  119        while(ucI2CEcrireOctet(unAdresse.stDoubleOctet.ucOctet2) == NACK);
??vI2CLireDonnee_15:
        ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ucI2CEcrireOctet
        MOV     A,R1
        XRL     A,#0x1
        JZ      ??vI2CLireDonnee_15
//  120        vI2CStart();
        ; Setup parameters for call to function CLI2CBase::vI2CStart()
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??vI2CStart
        SJMP    ??vI2CLireDonnee_16
//  121        while(ucI2CEcrireOctet(ucAdrBoitier + READ)              == NACK)
//  122          {
//  123            vI2CStart();
??vI2CLireDonnee_17:
        ; Setup parameters for call to function CLI2CBase::vI2CStart()
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??vI2CStart
//  124          }
??vI2CLireDonnee_16:
        ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
        MOV     A,#0x1
        ADD     A,?V0 + 1
        MOV     R1,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ucI2CEcrireOctet
        MOV     A,R1
        XRL     A,#0x1
        JZ      ??vI2CLireDonnee_17
//  125       break;
//  126 //----------------------------------------------------------------------
//  127       default:
//  128       break;
//  129     }
//  130 //----------------------------------------------------------------------
//  131 
//  132    if(ucNbrLectures > 1)
??vI2CLireDonnee_4:
        MOV     A,?V0 + 6
        CLR     C
        SUBB    A,#0x2
        JC      ??vI2CLireDonnee_18
//  133     {
//  134       for(UC i = 0; i < ucNbrLectures - 1; i++)
        MOV     ?V0 + 0,#0x0
        SJMP    ??vI2CLireDonnee_19
//  135        {
//  136          ucpRecevoirDonnee[i] = ucI2CLireOctet(ACK);
??vI2CLireDonnee_20:
        ; Setup parameters for call to function CLI2CBase::ucI2CLireOctet(UC)
        MOV     R1,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ucI2CLireOctet
        MOV     A,R1
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,?V0 + 0
        MOV     R0,?V0 + 0
        MOV     R1,#0x0
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     DPL,R2
        MOV     DPH,A
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  137        }
        INC     ?V0 + 0
??vI2CLireDonnee_19:
        MOV     ?V0 + 2,?V0 + 0
        MOV     ?V0 + 3,#0x0
        MOV     ?V0 + 4,?V0 + 6
        MOV     ?V0 + 5,#0x0
        MOV     A,?V0 + 4
        ADD     A,#-0x1
        MOV     R0,A
        MOV     A,?V0 + 5
        ADDC    A,#-0x1
        MOV     R1,A
        CLR     C
        MOV     A,?V0 + 2
        SUBB    A,R0
        MOV     A,?V0 + 3
        SUBB    A,R1
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??vI2CLireDonnee_20
//  138     }
//  139    ucpRecevoirDonnee[ucNbrLectures - 1] = ucI2CLireOctet(NACK);
??vI2CLireDonnee_18:
        ; Setup parameters for call to function CLI2CBase::ucI2CLireOctet(UC)
        MOV     R1,#0x1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ucI2CLireOctet
        MOV     A,R1
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,?V0 + 6
        MOV     R0,?V0 + 6
        MOV     R1,#0x0
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        ADD     A,#-0x1
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     DPH,A
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  140    vI2CStop();
        ; Setup parameters for call to function CLI2CBase::vI2CStop()
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??vI2CStop
//  141   }
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R7,#0x7
        LJMP    ?FUNC_LEAVE_XDATA
        CFI EndBlock cfiBlock5
//  142 
//  143 ///////////////////////////////////////////////////////////////////////////////
//  144 // void CLI2CPort :: vI2CEcrireDonnee(UC ucAdrBoitier,UC ucAdrRegistre,
//  145 //                                    UC ucDonnee)
//  146 ///////////////////////////////////////////////////////////////////////////////
//  147 //
//  148 // Description:
//  149 //
//  150 // Parametres d'entrees: null
//  151 //
//  152 // Parametres de sortie: null
//  153 //
//  154 // Appel de la fonction:
//  155 //
//  156 // Cree le  4 avril 2014 par Louis-Normand Ang Houle
//  157 //
//  158 // Modifications:
//  159 // -
//  160 //
//  161 ///////////////////////////////////////////////////////////////////////////////

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  162 void CLI2CPort :: vI2CEcrireDonnee(UC ucAdrBoitier, UC ucAdrRegistre,
??vI2CEcrireDonnee:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function ??vI2CEcrireDonnee
        CODE
//  163                                    UC ucDonnee)
//  164  {
        FUNCALL ??vI2CEcrireDonnee, ??vI2CStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??vI2CEcrireDonnee, ??vI2CStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??vI2CEcrireDonnee, ??ucI2CEcrireOctet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??vI2CEcrireDonnee, ??ucI2CEcrireOctet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??vI2CEcrireDonnee, ??ucI2CEcrireOctet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??vI2CEcrireDonnee, ??vI2CStop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x8
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 8)
        ; Saved register size: 8
        ; Auto size: 0
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     ?V0 + 0,R1
        MOV     A,R4
        MOV     R7,A
        MOV     A,R5
        MOV     R6,A
//  165    vI2CStart();
        ; Setup parameters for call to function CLI2CBase::vI2CStart()
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??vI2CStart
        SJMP    ??vI2CEcrireDonnee_2
//  166    while(ucI2CEcrireOctet(ucAdrBoitier + WRITE) == NACK)
//  167     {
//  168       vI2CStart();
??vI2CEcrireDonnee_3:
        ; Setup parameters for call to function CLI2CBase::vI2CStart()
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??vI2CStart
//  169     }
??vI2CEcrireDonnee_2:
        ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
        MOV     R1,?V0 + 0
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ucI2CEcrireOctet
        MOV     A,R1
        XRL     A,#0x1
        JZ      ??vI2CEcrireDonnee_3
//  170    while(ucI2CEcrireOctet(ucAdrRegistre)        == NACK);
??vI2CEcrireDonnee_4:
        ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
        MOV     A,R7
        MOV     R1,A
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ucI2CEcrireOctet
        MOV     A,R1
        XRL     A,#0x1
        JZ      ??vI2CEcrireDonnee_4
//  171    while(ucI2CEcrireOctet(ucDonnee)             == NACK);
??vI2CEcrireDonnee_5:
        ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
        MOV     A,R6
        MOV     R1,A
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ucI2CEcrireOctet
        MOV     A,R1
        XRL     A,#0x1
        JZ      ??vI2CEcrireDonnee_5
//  172    vI2CStop();
        ; Setup parameters for call to function CLI2CBase::vI2CStop()
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??vI2CStop
//  173  }
        MOV     R7,#0x1
        LJMP    ?FUNC_LEAVE_XDATA
        CFI EndBlock cfiBlock6
//  174 
//  175 ///////////////////////////////////////////////////////////////////////////////
//  176 //void CLI2CPort :: vI2CEcrireDonnee(UC ucAdrBoitier, USI uiAdrRegistre,
//  177 //                                   UC ucTypeAdr, UC *ucpDonnee,
//  178 //                                   UC ucNbrEcritures)
//  179 ///////////////////////////////////////////////////////////////////////////////
//  180 //
//  181 // Description:
//  182 //
//  183 // Parametres d'entrees: null
//  184 //
//  185 // Parametres de sortie: null
//  186 //
//  187 // Appel de la fonction:
//  188 //
//  189 // Cree le  4 avril 2014 par Louis-Normand Ang Houle
//  190 //
//  191 // Modifications:
//  192 // -
//  193 //
//  194 ///////////////////////////////////////////////////////////////////////////////
//  195 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  196 void CLI2CPort :: vI2CEcrireDonnee(UC ucAdrBoitier, USI uiAdrRegistre,
??vI2CEcrireDonnee_1:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function ??vI2CEcrireDonnee_1
        CODE
//  197                                    UC ucTypeAdr,UC *ucpDonnee,UC ucNbrEcritures)
//  198  {
        FUNCALL ??vI2CEcrireDonnee_1, ??vI2CStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??vI2CEcrireDonnee_1, ??vI2CStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??vI2CEcrireDonnee_1, ??ucI2CEcrireOctet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??vI2CEcrireDonnee_1, ??vI2CStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??vI2CEcrireDonnee_1, ??vI2CStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??vI2CEcrireDonnee_1, ??ucI2CEcrireOctet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??vI2CEcrireDonnee_1, ??ucI2CEcrireOctet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??vI2CEcrireDonnee_1, ??vI2CStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??vI2CEcrireDonnee_1, ??vI2CStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??vI2CEcrireDonnee_1, ??ucI2CEcrireOctet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??vI2CEcrireDonnee_1, ??ucI2CEcrireOctet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??vI2CEcrireDonnee_1, ??ucI2CEcrireOctet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??vI2CEcrireDonnee_1, ??ucI2CEcrireOctet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??vI2CEcrireDonnee_1, ??ucI2CEcrireOctet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??vI2CEcrireDonnee_1, ??vI2CStop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xf
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 0,R1
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 7,A
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
//  199    union UNEntierOctet unAdresse;
//  200 
//  201    unAdresse.uiEntier = uiAdrRegistre;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
//  202 //----------------------------------------------------------------------
//  203    switch (ucTypeAdr)
        MOV     A,R0
        JZ      ??vI2CEcrireDonnee_6
        DEC     A
        JZ      ??vI2CEcrireDonnee_7
        DEC     A
        JZ      ??vI2CEcrireDonnee_8
        LJMP    ??vI2CEcrireDonnee_9
//  204     {
//  205       case PASADR:
//  206         vI2CStart();
??vI2CEcrireDonnee_6:
        ; Setup parameters for call to function CLI2CBase::vI2CStart()
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??vI2CStart
        SJMP    ??vI2CEcrireDonnee_10
//  207         while(ucI2CEcrireOctet(ucAdrBoitier + WRITE)             == NACK)
//  208          {
//  209            vI2CStart();
??vI2CEcrireDonnee_11:
        ; Setup parameters for call to function CLI2CBase::vI2CStart()
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??vI2CStart
//  210          }
??vI2CEcrireDonnee_10:
        ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
        MOV     R1,?V0 + 0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ucI2CEcrireOctet
        MOV     A,R1
        XRL     A,#0x1
        JZ      ??vI2CEcrireDonnee_11
//  211       break;
        SJMP    ??vI2CEcrireDonnee_9
//  212 //----------------------------------------------------------------------
//  213       case ADR8BIT:
//  214         vI2CStart();
??vI2CEcrireDonnee_7:
        ; Setup parameters for call to function CLI2CBase::vI2CStart()
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??vI2CStart
        SJMP    ??vI2CEcrireDonnee_12
//  215         while(ucI2CEcrireOctet(ucAdrBoitier + WRITE)             == NACK)
//  216          {
//  217            vI2CStart();
??vI2CEcrireDonnee_13:
        ; Setup parameters for call to function CLI2CBase::vI2CStart()
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??vI2CStart
//  218          }
??vI2CEcrireDonnee_12:
        ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
        MOV     R1,?V0 + 0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ucI2CEcrireOctet
        MOV     A,R1
        XRL     A,#0x1
        JZ      ??vI2CEcrireDonnee_13
//  219         while(ucI2CEcrireOctet(unAdresse.stDoubleOctet.ucOctet1) == NACK);
??vI2CEcrireDonnee_14:
        ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ucI2CEcrireOctet
        MOV     A,R1
        XRL     A,#0x1
        JZ      ??vI2CEcrireDonnee_14
//  220       break;
        SJMP    ??vI2CEcrireDonnee_9
//  221 //----------------------------------------------------------------------
//  222       case ADR16BIT:
//  223         vI2CStart();
??vI2CEcrireDonnee_8:
        ; Setup parameters for call to function CLI2CBase::vI2CStart()
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??vI2CStart
        SJMP    ??vI2CEcrireDonnee_15
//  224         while(ucI2CEcrireOctet(ucAdrBoitier + WRITE)             == NACK)
//  225          {
//  226            vI2CStart();
??vI2CEcrireDonnee_16:
        ; Setup parameters for call to function CLI2CBase::vI2CStart()
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??vI2CStart
//  227          }
??vI2CEcrireDonnee_15:
        ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
        MOV     R1,?V0 + 0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ucI2CEcrireOctet
        MOV     A,R1
        XRL     A,#0x1
        JZ      ??vI2CEcrireDonnee_16
//  228         while(ucI2CEcrireOctet(unAdresse.stDoubleOctet.ucOctet1) == NACK);
??vI2CEcrireDonnee_17:
        ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ucI2CEcrireOctet
        MOV     A,R1
        XRL     A,#0x1
        JZ      ??vI2CEcrireDonnee_17
//  229         while(ucI2CEcrireOctet(unAdresse.stDoubleOctet.ucOctet2) == NACK);
??vI2CEcrireDonnee_18:
        ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ucI2CEcrireOctet
        MOV     A,R1
        XRL     A,#0x1
        JZ      ??vI2CEcrireDonnee_18
//  230       break;
//  231 //----------------------------------------------------------------------
//  232       default:
//  233       break;
//  234     }
//  235 //----------------------------------------------------------------------
//  236    if(ucNbrEcritures > 1)
??vI2CEcrireDonnee_9:
        MOV     A,?V0 + 4
        CLR     C
        SUBB    A,#0x2
        JC      ??vI2CEcrireDonnee_19
//  237     {
//  238       for(UC i = 0; i < ucNbrEcritures; i++)
        MOV     ?V0 + 1,#0x0
??vI2CEcrireDonnee_20:
        MOV     A,?V0 + 1
        CLR     C
        SUBB    A,?V0 + 4
        JNC     ??vI2CEcrireDonnee_21
//  239        {
//  240          while(ucI2CEcrireOctet(ucpDonnee[i])== NACK);
??vI2CEcrireDonnee_22:
        ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
        MOV     ?V0 + 2,?V0 + 1
        MOV     ?V0 + 3,#0x0
        MOV     A,?V0 + 6
        ADD     A,?V0 + 2
        MOV     DPL,A
        MOV     A,?V0 + 7
        ADDC    A,?V0 + 3
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ucI2CEcrireOctet
        MOV     A,R1
        XRL     A,#0x1
        JZ      ??vI2CEcrireDonnee_22
//  241        }
        INC     ?V0 + 1
        SJMP    ??vI2CEcrireDonnee_20
//  242     }
//  243    else while(ucI2CEcrireOctet(ucpDonnee[0])== NACK);
??vI2CEcrireDonnee_19:
        ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
        MOV     DPL,?V0 + 6
        MOV     DPH,?V0 + 7
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ucI2CEcrireOctet
        MOV     A,R1
        XRL     A,#0x1
        JZ      ??vI2CEcrireDonnee_19
//  244    vI2CStop();
??vI2CEcrireDonnee_21:
        ; Setup parameters for call to function CLI2CBase::vI2CStop()
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??vI2CStop
//  245  }
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     R7,#0x8
        LJMP    ?FUNC_LEAVE_XDATA
        CFI EndBlock cfiBlock7

        END
//  246 //LinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxTUX
//  247 
// 
// 1 042 bytes in segment NEAR_CODE
// 
// 1 042 bytes of CODE memory
//
//Errors: none
//Warnings: none
