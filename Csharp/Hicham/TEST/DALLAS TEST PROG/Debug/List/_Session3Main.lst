###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.40194/W32 for 8051         26/Aug/2014  17:04:50 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  near                                               #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data                                               #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Dukto\ProjetDepart\_Session3Main.cpp            #
#    Command line       =  C:\Dukto\ProjetDepart\_Session3Main.cpp -lC        #
#                          C:\Dukto\ProjetDepart\Debug\List\ -lA              #
#                          C:\Dukto\ProjetDepart\Debug\List\ -o               #
#                          C:\Dukto\ProjetDepart\Debug\Obj\ -e --no_cse       #
#                          --no_unroll --no_inline --no_code_motion           #
#                          --no_tbaa --debug --core=plain --dptr=16,1         #
#                          --data_model=large --code_model=near               #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data --nr_virtual_regs 8         #
#                          --dlib_config "C:\Program Files (x86)\IAR          #
#                          Systems\Embedded Workbench                         #
#                          6.0\8051\LIB\DLIB\dl8051Normal.h" -Ol --ec++       #
#    List file          =  C:\Dukto\ProjetDepart\Debug\List\_Session3Main.lst #
#    Object file        =  C:\Dukto\ProjetDepart\Debug\Obj\_Session3Main.r51  #
#                                                                             #
#                                                                             #
###############################################################################

C:\Dukto\ProjetDepart\_Session3Main.cpp
      1          
      2          
      3          // ************************** FICHIER: ProjetSessionCinqMain.CPP  ****
      4          //  Application realisee avec IAR C++ 8.10
      5          //  LABORATOIRE PROJET FIN SESSION
      6          //
      7          //  VITESSE DE COMMUNICATION 19200
      8          //
      9          //  LIMITATION DU COMPILATEUR:
     10          //    Impossible de faire de l'heritage multiple.
     11          //
     12          //  Programme principal.
     13          //
     14          //  Note on peut utiliser XAR pour creer des librairies.
     15          //  On peut mettre les librairies dans le projets et Exclure de la compilation
     16          //  les modules qui sont contenus dans la librairie.
     17          //
     18          //  Pour Windows 7 on utilise la VMware pour programmer le upsd 3254A avec CAPS.
     19          //
     20          //  AUTEUR : DANIEL BRETON
     21          //  DATE CREATION :    2012-12-20       VERSION: 1.0
     22          //  DATE MODIFICATION: ****-**-**
     23          //
     24          // ************************************************************************
     25          #include "_DeclarationGenerale.h"

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IE
   \                     _A_IE:
   \   000000                DS 1
     26          
     27          #include "_Session3Main.h"
     28          
     29          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
     30          void main (void)
   \                     main:
     31          {
   \   000000                ; Auto size: 0
     32          
     33          
     34          
     35          EA = 0;                            // Disable interrupt.
   \   000000   C2AF         CLR     0xa8.7
     36          vInit_CPU();                       // Disable WatchDog.
   \   000002                ; Setup parameters for call to function vInit_CPU()
   \   000002   12....       LCALL   ??vInit_CPU
     37          
     38          
     39          
     40          
     41          
     42          EA = 1;                            // Enable interrupt.
   \   000005   D2AF         SETB    0xa8.7
     43          while (VRAI)
   \                     ??main_0:
   \   000007   80FE         SJMP    ??main_0
   \   000009                REQUIRE _A_IE
     44            {
     45          
     46          
     47          
     48            }// while (VRAI)
     49          }// void main (void)
     50          
     51          
     52          //************************ TITRE : vInit_CPU    ***************************
     53          //
     54          //  DESCRIPTION :Initialisation du microcontroleur
     55          //
     56          //  NOM: void vInit_CPU (void)
     57          //
     58          //  PARAMETRE D'ENTREE:  AUCUN
     59          //
     60          //  PARAMETRE DE SORTIE: AUCUN
     61          //
     62          //  MEMBRES UTILISES:
     63          //       Fonctions       : AUCUNE
     64          //       Donnees         : AUCUNE
     65          //                      :
     66          //  AUTEUR : DANIEL BRETON
     67          //  DATE CREATION :    2012-12-20       VERSION: 1.0
     68          //  DATE MODIFICATION: ****-**-**
     69          //
     70          // ****************************************************************************

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
     71          void vInit_CPU (void)
   \                     ??vInit_CPU:
     72          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     73          
     74          
     75          } // void vInit_CPU (void)
   \   000000   22           RET
     76          
     77          
     78          
     79          // ****************************************************************************
     80          
     81          
     82          
     83          
     84          
     85          
     86          

   Maximum stack usage in bytes:

     Function         ISTACK PSTACK XSTACK
     --------         ------ ------ ------
     main()               0      0      0
       -> vInit_CPU()     0      0      0
     vInit_CPU()          0      0      0


   Segment part sizes:

     Function/Label Bytes
     -------------- -----
     _A_IE             1
     main()            9
     vInit_CPU()       1

 
 10 bytes in segment NEAR_CODE
  1 byte  in segment SFR_AN
 
 10 bytes of CODE memory
  0 bytes of DATA memory (+ 1 byte shared)

Errors: none
Warnings: none
