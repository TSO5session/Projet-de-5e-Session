###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.40194/W32 for 8051         24/Oct/2014  02:25:56 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  near                                               #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data                                               #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Synchro\Dropbox\Travaux\Automne                 #
#                          2014\Fonctions\Projet Accumulatif                  #
#                          IAR\CLClavier.cpp                                  #
#    Command line       =  "C:\Synchro\Dropbox\Travaux\Automne                #
#                          2014\Fonctions\Projet Accumulatif                  #
#                          IAR\CLClavier.cpp" -lC "C:\Synchro\Dropbox\Travaux #
#                          \Automne 2014\Fonctions\Projet Accumulatif         #
#                          IAR\Debug\List\" -lA "C:\Synchro\Dropbox\Travaux\A #
#                          utomne 2014\Fonctions\Projet Accumulatif           #
#                          IAR\Debug\List\" -o "C:\Synchro\Dropbox\Travaux\Au #
#                          tomne 2014\Fonctions\Projet Accumulatif            #
#                          IAR\Debug\Obj\" -e --no_cse --no_unroll            #
#                          --no_inline --no_code_motion --no_tbaa --debug     #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=near --calling_convention=xdata_reent #
#                          rant --place_constants=data --nr_virtual_regs 8    #
#                          --dlib_config "C:\Program Files (x86)\IAR          #
#                          Systems\Embedded Workbench                         #
#                          6.0\8051\LIB\DLIB\dl8051Normal.h" -Ol --ec++       #
#    List file          =  C:\Synchro\Dropbox\Travaux\Automne                 #
#                          2014\Fonctions\Projet Accumulatif                  #
#                          IAR\Debug\List\CLClavier.lst                       #
#    Object file        =  C:\Synchro\Dropbox\Travaux\Automne                 #
#                          2014\Fonctions\Projet Accumulatif                  #
#                          IAR\Debug\Obj\CLClavier.r51                        #
#                                                                             #
#                                                                             #
###############################################################################

C:\Synchro\Dropbox\Travaux\Automne 2014\Fonctions\Projet Accumulatif IAR\CLClavier.cpp
      1          // **************************CLClavier.cpp
      2          // Auteur:      Vincent Chouinard
      3          // Date:        17 avril 2014
      4          // Version :    1.0
      5          //
      6          // Compilateur: IAR 8.1
      7          //
      8          // Description: Fichier permettant d'utiliser le clavier de l'uPSD
      9          //
     10          ///////////////////////////////////////////////////////////////////////////////
     11          //                     Infos relatives au montage du clavier sur le uPSD     
     12          // Utilise un 74HCC922                                                       
     13          // 74HCC922     uPSD
     14          //        A sur D0
     15          //        B sur D1
     16          //        C sur D2
     17          //        D sur D3                                                          
     18          //       OE sur CS1     (OutputEnable sur chip select 1)                     
     19          //       DA sur INT0    (DataAvailible sur interrupt0)                       
     20          ///////////////////////////////////////////////////////////////////////////////
     21          #include "CLClavier.h"            // Fichier de definitions du clavier
     22          
     23          UC  CLClavier  :: ucEtatClavier = INACTIF;
     24          
     25          //******************************************************************************
     26          //                            LE CONSTRUCTEUR PAR DEFAUT
     27          // *****************************************************************************
     28          CLClavier :: CLClavier(void)           
     29          {
     30          EX0 = 1;
                 ^
Error[Pe020]: identifier "EX0" is undefined
     31          IT0 = 1;
                 ^
Error[Pe020]: identifier "IT0" is undefined
     32          }
     33          
     34          // *****************************************************************************
     35          //                            LE DESTRUCTEUR
     36          // *****************************************************************************
     37          CLClavier :: ~CLClavier(void)
     38          {
     39          
     40          }
     41          
     42          // ********************** FONCTION: ucBoutonAppuye()
     43          //
     44          // DESCRIPTION:         Fonction pour transmettre un caractere
     45          //
     46          // INCLUDE:             "Clavier.h"
     47          //
     48          // PROTOTYPE:           UC ucBoutonAppuye(void)
     49          //
     50          // PROCEDURE D'APPEL:   UC = ucBoutonAppuye()
     51          //
     52          // PARAMETRE D'ENTREE:  AUCUN
     53          //
     54          // PARAMETRE DE SORTIE: UC ---> Contient le bouton appuye
     55          //
     56          // Auteur:              Vincent Chouinard
     57          // Date:                17 avril 2014 (Version 1.0)
     58          // *****************************************************************************
     59          UC CLClavier :: ucBoutonAppuye(void)
     60          {
     61          UC ucEtat;
     62          if(ucEtatClavier == ACTIF)
     63            {
     64             ucEtat = ACTIF;
     65            }
     66          else
     67            {
     68             ucEtat = INACTIF;
     69            }
     70          return(ucEtat);
     71          }
     72          
     73          UC CLClavier:: ucLireClavier(void)
     74          {
     75          UC  uctTouche[]={         // Tableau des correspondances des
     76              '1','2','3','A',      // touches du clavier et de leurs
     77              '4','5','6','B',      // positions.
     78              '7','8','9','C',      //
     79              '*','0','#','D'};     //
     80            
     81          ucToucheClavier = ucIn(0xF900)    ;
     82          ucEtatClavier   = INACTIF         ;
     83          return(uctTouche[ucToucheClavier]); 
     84          }
     85          
     86          // ********************** FONCTION: vkeyboardInterrupt()
     87          //
     88          // DESCRIPTION:         Fonction d'interruption pour lire le clavier
     89          //
     90          // INCLUDE:             "Clavier.h"
     91          //
     92          // PROTOTYPE:           __interrupt void vkeyboardInterrupt(void)
     93          //
     94          // PROCEDURE D'APPEL:   #pragma vector = 0x03 (Seul un interrupt0 peut appeler
     95          //                                             cette fonction)
     96          //
     97          // PARAMETRE D'ENTREE:  AUCUN
     98          //
     99          // PARAMETRE DE SORTIE: AUCUN
    100          //
    101          // Auteur:              Vincent Chouinard
    102          // Date:                17 avril 2014 (Version 1.0)
    103          // *****************************************************************************
    104          #pragma vector = 0x03 // Lors d'une interruption de type INTERRUPT 0
    105          __interrupt void CLClavier :: vKeyboardInterrupt(void)
    106          {
    107          EA = 0;
                 ^
Error[Pe020]: identifier "EA" is undefined
    108          ucEtatClavier = ACTIF;
    109          EA = 1;
    110          }
    111          //LinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxTUX

Errors: 3
Warnings: none
