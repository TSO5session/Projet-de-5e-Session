###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.40194/W32 for 8051         14/Nov/2014  22:00:58 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  near                                               #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data                                               #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Synchro\Dropbox\Travaux\Automne                 #
#                          2014\ProjetSession5\Csharp\TEST\DALLAS TEST        #
#                          PROG\NomDuProjet.cpp                               #
#    Command line       =  "C:\Synchro\Dropbox\Travaux\Automne                #
#                          2014\ProjetSession5\Csharp\TEST\DALLAS TEST        #
#                          PROG\NomDuProjet.cpp" -D DALLAS89C450              #
#                          --preprocess=cl "C:\Synchro\Dropbox\Travaux\Automn #
#                          e 2014\ProjetSession5\Csharp\TEST\DALLAS TEST      #
#                          PROG\DALLAS\List\" -lC "C:\Synchro\Dropbox\Travaux #
#                          \Automne 2014\ProjetSession5\Csharp\TEST\DALLAS    #
#                          TEST PROG\DALLAS\List\" -lA                        #
#                          "C:\Synchro\Dropbox\Travaux\Automne                #
#                          2014\ProjetSession5\Csharp\TEST\DALLAS TEST        #
#                          PROG\DALLAS\List\" -o "C:\Synchro\Dropbox\Travaux\ #
#                          Automne 2014\ProjetSession5\Csharp\TEST\DALLAS     #
#                          TEST PROG\DALLAS\Obj\" -e --no_cse --no_unroll     #
#                          --no_inline --no_code_motion --no_tbaa --debug     #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=near --calling_convention=xdata_reent #
#                          rant --place_constants=data --nr_virtual_regs 8    #
#                          --dlib_config "C:\Program Files (x86)\IAR          #
#                          Systems\Embedded Workbench                         #
#                          6.0\8051\LIB\DLIB\dl8051Normal.h" -Ol --ec++       #
#    List file          =  C:\Synchro\Dropbox\Travaux\Automne                 #
#                          2014\ProjetSession5\Csharp\TEST\DALLAS TEST        #
#                          PROG\DALLAS\List\NomDuProjet.lst                   #
#    Object file        =  C:\Synchro\Dropbox\Travaux\Automne                 #
#                          2014\ProjetSession5\Csharp\TEST\DALLAS TEST        #
#                          PROG\DALLAS\Obj\NomDuProjet.r51                    #
#                                                                             #
#                                                                             #
###############################################################################

C:\Synchro\Dropbox\Travaux\Automne 2014\ProjetSession5\Csharp\TEST\DALLAS TEST PROG\NomDuProjet.cpp
      1          // **************************Main.cpp
      2          // Auteur:      Vincent Chouinard
      3          // Date:        26 octobre 2014
      4          // Version :    1.0
      5          //
      6          // Compilateur: IAR 8.10
      7          //
      8          // Description: Fichier principal
      9          //
     10          // *****************************************************************************
     11          // **** LES INCLUDES ****************//
     12          #include "CLI2CPort.h"               // Pour utiliser le bus I2C Software
     13          //#include "CLI2CHard.h"             // Pour utiliser le bus I2C Hardware (uPSD Only)
     14          #include "CLSPI.h"                   // Pour utiliser le bus SPI
     15          #include "CLClavier.h"               // Pour utiliser le clavier
     16          #include "CLEcran.h"                 // Pour utiliser l'écran
     17          #include "Timer0.h"                  // Pour utiliser le timer 0
     18          #include "Optik.h"                   // Pour utiliser l'encodeur Optique
     19          #include "CANBUS.h"                  // Pour utiliser un bus CAN
     20          #include "MCP2515.h"                 // Define des registres du MCP2515
     21          #include "CLSortieLatch.h"           // Pour faire des conversion DAC <===> ADC
     22          #include "CLCommunic.h"              // Pour utiliser le port série du Dallas
     23          //#include "CLCommunicUpsdPort1.h"   // Pour utiliser le port série du uPSD (uPSD Only)
     24          #include "_DeclarationGenerale.h"    // Raccourcis Linguistiques utiles
     25          #include "ConversionKeilToIAR.h"     // Compatbilité avec Keil
     26          #include "NomDuProjet.h"             //
     27          // **** LES DEFINES *****************//
     28          #define PCF8574Adress 0x40           // Adresse I2C du PCD8574
     29          // **** LES CLASSES *****************//
     30          //class CLCommunic Serial  ;         // Initialise la communication série uPSD  
     31          //class CLI2CPort  I2CSoft ;         // Initialise le communication I2C Software
     32          //class CLI2CHARD  I2CHard ;         // Initialise le communication I2C Hardware
     33          //class Encodeur   Optik   ;         // Pour lire l'encodeur Optique
     34          //class CLClavier  Keyboard;         // Initialise le clavier
     35          //class DAC_ADC    Convert ;         // Initialise la conversion DAC <===> ADC
     36          //class Timer0     Timer   ;         // Pour utiliser le timer 0 (Default = 1ms)

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \   static __intrinsic __near_func __xdata_reentrant void __sti__routine()
   \                     ??__sti__routine:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     37          class RS232        Serial  ;         // Initialise la communication série Dallas
   \   000000                ; Setup parameters for call to function RS232::RS232()
   \   000000   7A..         MOV     R2,#Serial & 0xff
   \   000002   7B..         MOV     R3,#(Serial >> 8) & 0xff
   \   000004   12....       LCALL   ??RS232
   \   000007                ; Setup parameters for call to function __record_needed_destruction
   \   000007   7A..         MOV     R2,#?_0 & 0xff
   \   000009   7B..         MOV     R3,#(?_0 >> 8) & 0xff
   \   00000B   12....       LCALL   __record_needed_destruction
     38          class CLEcran      LCD     ;         // Initialise l' ecran LCD
   \   00000E                ; Setup parameters for call to function CLEcran::CLEcran()
   \   00000E   7A..         MOV     R2,#LCD & 0xff
   \   000010   7B..         MOV     R3,#(LCD >> 8) & 0xff
   \   000012   12....       LCALL   ??CLEcran
   \   000015                ; Setup parameters for call to function __record_needed_destruction
   \   000015   7A..         MOV     R2,#?_2 & 0xff
   \   000017   7B..         MOV     R3,#(?_2 >> 8) & 0xff
   \   000019   12....       LCALL   __record_needed_destruction
     39          class CLSPI        SPI     ;         // Initialise la communication SPI
   \   00001C                ; Setup parameters for call to function CLSPI::CLSPI()
   \   00001C   7A..         MOV     R2,#SPI & 0xff
   \   00001E   7B..         MOV     R3,#(SPI >> 8) & 0xff
   \   000020   12....       LCALL   ??CLSPI
   \   000023                ; Setup parameters for call to function __record_needed_destruction
   \   000023   7A..         MOV     R2,#?_4 & 0xff
   \   000025   7B..         MOV     R3,#(?_4 >> 8) & 0xff
   \   000027   12....       LCALL   __record_needed_destruction
     40          class CanBus       CAN     ;         // Initialise le bus CAN
   \   00002A                ; Setup parameters for call to function CanBus::CanBus()
   \   00002A   7A..         MOV     R2,#CAN & 0xff
   \   00002C   7B..         MOV     R3,#(CAN >> 8) & 0xff
   \   00002E   12....       LCALL   ??CanBus
   \   000031                ; Setup parameters for call to function __record_needed_destruction
   \   000031   7A..         MOV     R2,#?_6 & 0xff
   \   000033   7B..         MOV     R3,#(?_6 >> 8) & 0xff
   \   000035   02....       LJMP    __record_needed_destruction

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     Serial:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     LCD:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     SPI:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     CAN:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     41          // **** LES FONCTIONS DU MAIN *******//
     42          
     43          // **** PROGRAMME PRINCIPAL *********//

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
     44          void main(void)
   \                     main:
     45          {
   \   000000                ; Auto size: 0
     46          LCD.vLCDCursor(0,1)        ;  
   \   000000                ; Setup parameters for call to function CLEcran::vLCDCursor(UC, UC)
   \   000000   7C01         MOV     R4,#0x1
   \   000002   7900         MOV     R1,#0x0
   \   000004   7A..         MOV     R2,#LCD & 0xff
   \   000006   7B..         MOV     R3,#(LCD >> 8) & 0xff
   \   000008   12....       LCALL   ??vLCDCursor
     47          LCD.String    ("125K, PCI2, ID = 000");
   \   00000B                ; Setup parameters for call to function CLEcran::String(char const *)
   \   00000B   7C..         MOV     R4,#`?<Constant "125K, PCI2, ID = 000">` & 0xff
   \   00000D   7D..         MOV     R5,#(`?<Constant "125K, PCI2, ID = 000">` >> 8) & 0xff
   \   00000F   7A..         MOV     R2,#LCD & 0xff
   \   000011   7B..         MOV     R3,#(LCD >> 8) & 0xff
   \   000013   12....       LCALL   ??String
     48          LCD.vLCDCursor(0,2)        ;
   \   000016                ; Setup parameters for call to function CLEcran::vLCDCursor(UC, UC)
   \   000016   7C02         MOV     R4,#0x2
   \   000018   7900         MOV     R1,#0x0
   \   00001A   7A..         MOV     R2,#LCD & 0xff
   \   00001C   7B..         MOV     R3,#(LCD >> 8) & 0xff
   \   00001E   12....       LCALL   ??vLCDCursor
     49          //LCD.String    ("04 020 FF (send)");
     50          LCD.vLCDCursor(0,3)        ;
   \   000021                ; Setup parameters for call to function CLEcran::vLCDCursor(UC, UC)
   \   000021   7C03         MOV     R4,#0x3
   \   000023   7900         MOV     R1,#0x0
   \   000025   7A..         MOV     R2,#LCD & 0xff
   \   000027   7B..         MOV     R3,#(LCD >> 8) & 0xff
   \   000029   12....       LCALL   ??vLCDCursor
     51          LCD.String    ("CAN BUS Demo");
   \   00002C                ; Setup parameters for call to function CLEcran::String(char const *)
   \   00002C   7C..         MOV     R4,#`?<Constant "CAN BUS Demo">` & 0xff
   \   00002E   7D..         MOV     R5,#(`?<Constant "CAN BUS Demo">` >> 8) & 0xff
   \   000030   7A..         MOV     R2,#LCD & 0xff
   \   000032   7B..         MOV     R3,#(LCD >> 8) & 0xff
   \   000034   12....       LCALL   ??String
   \   000037   801D         SJMP    ??main_0
     52          
     53          while(1)
     54            {
     55          //   CAN.SendMCP("0100FF"); // Arrêté
     56          //   CAN.SendMCP("0400FF"); // Bloc métallique
     57          //   CAN.SendMCP("0401FF"); // Bloc noire
     58          //   CAN.SendMCP("0700FF"); // Rendu à la station 1
     59          //   CAN.SendMCP("0702FF"); // Rendu à la station 3    
     60          //   CAN.SendMCP("0102FF"); // Hors circuit
     61              
     62             CAN.SendMCP("0101FF"); // En marche   
     63             CAN.SendMCP("0264FF"); // Vitesse maximale
     64             CAN.SendMCP("0364FF"); // Battrie pleine
     65             CAN.SendMCP("0402FF"); // Bloc orange
     66             CAN.SendMCP("0564FF"); // Le bloc est lourd
     67             CAN.SendMCP("0701FF"); // Rendu à la station 2   
     68          
     69          // Envoyer un HeartBeat par seconde, ralentit l'envoie de trames CAN    
     70          unsigned long k; for(k = 0; k < 65555; k++); Serial.SendString("Allo");
   \                     ??main_1:
   \   000039   90....       MOV     DPTR,#__Constant_1
   \   00003C   78..         MOV     R0,#?V0 + 0
   \   00003E   12....       LCALL   ?L_ADD_X
   \                     ??main_2:
   \   000041   90....       MOV     DPTR,#__Constant_10013
   \   000044   78..         MOV     R0,#?V0 + 0
   \   000046   12....       LCALL   ?UL_GE_X
   \   000049   50EE         JNC     ??main_1
   \   00004B                ; Setup parameters for call to function RS232::SendString(char const *)
   \   00004B   7C..         MOV     R4,#`?<Constant "Allo">` & 0xff
   \   00004D   7D..         MOV     R5,#(`?<Constant "Allo">` >> 8) & 0xff
   \   00004F   7A..         MOV     R2,#Serial & 0xff
   \   000051   7B..         MOV     R3,#(Serial >> 8) & 0xff
   \   000053   12....       LCALL   ??SendString
   \                     ??main_0:
   \   000056                ; Setup parameters for call to function CanBus::SendMCP(UC const *)
   \   000056   7C..         MOV     R4,#`?<Constant "0101FF">` & 0xff
   \   000058   7D..         MOV     R5,#(`?<Constant "0101FF">` >> 8) & 0xff
   \   00005A   7A..         MOV     R2,#CAN & 0xff
   \   00005C   7B..         MOV     R3,#(CAN >> 8) & 0xff
   \   00005E   12....       LCALL   ??SendMCP
   \   000061                ; Setup parameters for call to function CanBus::SendMCP(UC const *)
   \   000061   7C..         MOV     R4,#`?<Constant "0264FF">` & 0xff
   \   000063   7D..         MOV     R5,#(`?<Constant "0264FF">` >> 8) & 0xff
   \   000065   7A..         MOV     R2,#CAN & 0xff
   \   000067   7B..         MOV     R3,#(CAN >> 8) & 0xff
   \   000069   12....       LCALL   ??SendMCP
   \   00006C                ; Setup parameters for call to function CanBus::SendMCP(UC const *)
   \   00006C   7C..         MOV     R4,#`?<Constant "0364FF">` & 0xff
   \   00006E   7D..         MOV     R5,#(`?<Constant "0364FF">` >> 8) & 0xff
   \   000070   7A..         MOV     R2,#CAN & 0xff
   \   000072   7B..         MOV     R3,#(CAN >> 8) & 0xff
   \   000074   12....       LCALL   ??SendMCP
   \   000077                ; Setup parameters for call to function CanBus::SendMCP(UC const *)
   \   000077   7C..         MOV     R4,#`?<Constant "0402FF">` & 0xff
   \   000079   7D..         MOV     R5,#(`?<Constant "0402FF">` >> 8) & 0xff
   \   00007B   7A..         MOV     R2,#CAN & 0xff
   \   00007D   7B..         MOV     R3,#(CAN >> 8) & 0xff
   \   00007F   12....       LCALL   ??SendMCP
   \   000082                ; Setup parameters for call to function CanBus::SendMCP(UC const *)
   \   000082   7C..         MOV     R4,#`?<Constant "0564FF">` & 0xff
   \   000084   7D..         MOV     R5,#(`?<Constant "0564FF">` >> 8) & 0xff
   \   000086   7A..         MOV     R2,#CAN & 0xff
   \   000088   7B..         MOV     R3,#(CAN >> 8) & 0xff
   \   00008A   12....       LCALL   ??SendMCP
   \   00008D                ; Setup parameters for call to function CanBus::SendMCP(UC const *)
   \   00008D   7C..         MOV     R4,#`?<Constant "0701FF">` & 0xff
   \   00008F   7D..         MOV     R5,#(`?<Constant "0701FF">` >> 8) & 0xff
   \   000091   7A..         MOV     R2,#CAN & 0xff
   \   000093   7B..         MOV     R3,#(CAN >> 8) & 0xff
   \   000095   12....       LCALL   ??SendMCP
   \   000098   90....       MOV     DPTR,#__Constant_0
   \   00009B   78..         MOV     R0,#?V0 + 0
   \   00009D   12....       LCALL   ?L_MOV_X
   \   0000A0   809F         SJMP    ??main_2
     71            }
     72          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "125K, PCI2, ID = `:
   \   000000   3132354B     DB "125K, PCI2, ID = 000"
   \            2C205043
   \            49322C20
   \            4944203D
   \            20303030
   \            00      

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "CAN BUS Demo">>`:
   \   000000   43414E20     DB "CAN BUS Demo"
   \            42555320
   \            44656D6F
   \            00      

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "0101FF">>`:
   \   000000   30313031     DB "0101FF"
   \            464600  

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "0264FF">>`:
   \   000000   30323634     DB "0264FF"
   \            464600  

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "0364FF">>`:
   \   000000   30333634     DB "0364FF"
   \            464600  

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "0402FF">>`:
   \   000000   30343032     DB "0402FF"
   \            464600  

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "0564FF">>`:
   \   000000   30353634     DB "0564FF"
   \            464600  

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "0701FF">>`:
   \   000000   30373031     DB "0701FF"
   \            464600  

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "Allo">>`:
   \   000000   416C6C6F     DB "Allo"
   \            00      

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for >`:
   \   000000   ....         DW ?_1
   \   000002   ....         DW Serial
   \   000004   ....         DW `?~RS232`

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for >_1`:
   \   000000   ....         DW ?_3
   \   000002   ....         DW LCD
   \   000004   ....         DW `?~CLEcran`

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for >_2`:
   \   000000   ....         DW ?_5
   \   000002   ....         DW SPI
   \   000004   ....         DW `?~CLSPI`

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for >_3`:
   \   000000   ....         DW ?_7
   \   000002   ....         DW CAN
   \   000004   ....         DW `?~CanBus`

   \                                 In  segment DIFUNCT, align 1, keep-with-next, root
   \   000000                REQUIRE ?cstart_call_ctors
   \   000000   ....         DC16    ??__sti__routine

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __Constant_1>`:
   \   000000   01000000     DD 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __Constant_10013>`:
   \   000000   13000100     DD 65555

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __Constant_0>`:
   \   000000   00000000     DD 0

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "125K, PCI2, ID = 000">`:
   \   000000                DS 21
   \   000015                REQUIRE `?<Initializer for <Constant "125K, PCI2, ID = `
   \   000015                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "CAN BUS Demo">`:
   \   000000                DS 13
   \   00000D                REQUIRE `?<Initializer for <Constant "CAN BUS Demo">>`
   \   00000D                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "0101FF">`:
   \   000000                DS 7
   \   000007                REQUIRE `?<Initializer for <Constant "0101FF">>`
   \   000007                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "0264FF">`:
   \   000000                DS 7
   \   000007                REQUIRE `?<Initializer for <Constant "0264FF">>`
   \   000007                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "0364FF">`:
   \   000000                DS 7
   \   000007                REQUIRE `?<Initializer for <Constant "0364FF">>`
   \   000007                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "0402FF">`:
   \   000000                DS 7
   \   000007                REQUIRE `?<Initializer for <Constant "0402FF">>`
   \   000007                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "0564FF">`:
   \   000000                DS 7
   \   000007                REQUIRE `?<Initializer for <Constant "0564FF">>`
   \   000007                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "0701FF">`:
   \   000000                DS 7
   \   000007                REQUIRE `?<Initializer for <Constant "0701FF">>`
   \   000007                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "Allo">`:
   \   000000                DS 5
   \   000005                REQUIRE `?<Initializer for <Constant "Allo">>`
   \   000005                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     __Constant_1:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for __Constant_1>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     __Constant_10013:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for __Constant_10013>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     __Constant_0:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for __Constant_0>`
   \   000004                REQUIRE __INIT_XDATA_I
     73          //LinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxTUX

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     __sti__routine()                   0      0      0
       -> RS232::RS232()                0      0      0
       -> __record_needed_destruction
                                        0      0      0
       -> CLEcran::CLEcran()            0      0      0
       -> __record_needed_destruction
                                        0      0      0
       -> CLSPI::CLSPI()                0      0      0
       -> __record_needed_destruction
                                        0      0      0
       -> CanBus::CanBus()              0      0      0
       -> __record_needed_destruction
                                        0      0      0
     main()                             0      0      0
       -> CLEcran::vLCDCursor(UC, UC)
                                        0      0      0
       -> CLEcran::String(char const *)
                                        0      0      0
       -> CLEcran::vLCDCursor(UC, UC)
                                        0      0      0
       -> CLEcran::vLCDCursor(UC, UC)
                                        0      0      0
       -> CLEcran::String(char const *)
                                        0      0      0
       -> RS232::SendString(char const *)
                                        0      0      0
       -> CanBus::SendMCP(UC const *)
                                        0      0      0
       -> CanBus::SendMCP(UC const *)
                                        0      0      0
       -> CanBus::SendMCP(UC const *)
                                        0      0      0
       -> CanBus::SendMCP(UC const *)
                                        0      0      0
       -> CanBus::SendMCP(UC const *)
                                        0      0      0
       -> CanBus::SendMCP(UC const *)
                                        0      0      0


   Segment part sizes:

     Function/Label                                 Bytes
     --------------                                 -----
     __sti__routine()                                 56
     Serial                                            1
     LCD                                               2
     SPI                                               1
     CAN                                               1
     main()                                          162
     ?<Initializer for <Constant "125K, PCI2, ID =    21
     ?<Initializer for <Constant "CAN BUS Demo">>     13
     ?<Initializer for <Constant "0101FF">>            7
     ?<Initializer for <Constant "0264FF">>            7
     ?<Initializer for <Constant "0364FF">>            7
     ?<Initializer for <Constant "0402FF">>            7
     ?<Initializer for <Constant "0564FF">>            7
     ?<Initializer for <Constant "0701FF">>            7
     ?<Initializer for <Constant "Allo">>              5
     ?<Initializer for >                               6
     ?<Initializer for >_1                             6
     ?<Initializer for >_2                             6
     ?<Initializer for >_3                             6
     ?<Initializer for __Constant_1>                   4
     ?<Initializer for __Constant_10013>               4
     ?<Initializer for __Constant_0>                   4
     ?<Constant "125K, PCI2, ID = 000">               21
     ?<Constant "CAN BUS Demo">                       13
     ?<Constant "0101FF">                              7
     ?<Constant "0264FF">                              7
     ?<Constant "0364FF">                              7
     ?<Constant "0402FF">                              7
     ?<Constant "0564FF">                              7
     ?<Constant "0701FF">                              7
     ?<Constant "Allo">                                5
     __Constant_1                                      4
     __Constant_10013                                  4
     __Constant_0                                      4
      Others                                          34

 
   2 bytes in segment DIFUNCT
 218 bytes in segment NEAR_CODE
 117 bytes in segment XDATA_I
 117 bytes in segment XDATA_ID
  13 bytes in segment XDATA_Z
 
 325 bytes of CODE  memory (+ 12 bytes shared)
 118 bytes of XDATA memory (+ 12 bytes shared)

Errors: none
Warnings: none
