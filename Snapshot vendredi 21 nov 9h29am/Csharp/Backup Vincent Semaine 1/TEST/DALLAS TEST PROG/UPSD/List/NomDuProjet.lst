###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.40194/W32 for 8051         27/Oct/2014  20:17:46 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  near                                               #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data                                               #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Synchro\Dropbox\Travaux\Automne                 #
#                          2014\Prog\Labo6\Programme\NomDuProjet.cpp          #
#    Command line       =  "C:\Synchro\Dropbox\Travaux\Automne                #
#                          2014\Prog\Labo6\Programme\NomDuProjet.cpp" -D      #
#                          UPSD3254A --preprocess=cl                          #
#                          "C:\Synchro\Dropbox\Travaux\Automne                #
#                          2014\Prog\Labo6\Programme\UPSD\List\" -lC          #
#                          "C:\Synchro\Dropbox\Travaux\Automne                #
#                          2014\Prog\Labo6\Programme\UPSD\List\" -lA          #
#                          "C:\Synchro\Dropbox\Travaux\Automne                #
#                          2014\Prog\Labo6\Programme\UPSD\List\" -o           #
#                          "C:\Synchro\Dropbox\Travaux\Automne                #
#                          2014\Prog\Labo6\Programme\UPSD\Obj\" -e --no_cse   #
#                          --no_unroll --no_inline --no_code_motion           #
#                          --no_tbaa --debug --core=plain --dptr=16,1         #
#                          --data_model=large --code_model=near               #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data --nr_virtual_regs 8         #
#                          --dlib_config "C:\Program Files (x86)\IAR          #
#                          Systems\Embedded Workbench                         #
#                          6.0\8051\LIB\DLIB\dl8051Normal.h" -Ol --eec++      #
#    List file          =  C:\Synchro\Dropbox\Travaux\Automne                 #
#                          2014\Prog\Labo6\Programme\UPSD\List\NomDuProjet.ls #
#                          t                                                  #
#    Object file        =  C:\Synchro\Dropbox\Travaux\Automne                 #
#                          2014\Prog\Labo6\Programme\UPSD\Obj\NomDuProjet.r51 #
#                                                                             #
#                                                                             #
###############################################################################

C:\Synchro\Dropbox\Travaux\Automne 2014\Prog\Labo6\Programme\NomDuProjet.cpp
      1          // **************************Main.c
      2          // Auteur:      Vincent Chouinard
      3          // Date:        26 octobre 2014
      4          // Version :    1.0
      5          //
      6          // Compilateur: IAR 8.10
      7          //
      8          // Description: Fichier principal
      9          //
     10          // *****************************************************************************
     11          // **** LES INCLUDES ****************//
     12          #include "CLI2CPort.h"               // Pour utiliser le bus I2C Software

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IE
   \                     _A_IE:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xae
   \   unsigned char volatile __sfr WDKEY
   \                     WDKEY:
   \   000000                DS 1
     13          #include "CLI2CHard.h"               // Pour utiliser le bus I2C Hardware
     14          #include "CLSPI.h"                   // Pour utiliser le bus SPI
     15          #include "CLClavier.h"               // Pour utiliser le clavier
     16          #include "CLEcran.h"                 // Pour utiliser l'écran
     17          #include "Timer0.h"                  // Pour utiliser le timer 0
     18          #include "Optik.h"                   // Pour utiliser l'encodeur Optique
     19          #include "CANBUS.h"                  // Pour utiliser un bus CAN
     20          #include "MCP2515.h"                 // Define des registres du MCP2515
     21          #include "CLSortieLatch.h"           // Pour faire des conversion DAC <===> ADC
     22          //#include "CLCommunic.h"            // Pour utiliser le port série du Dallas
     23          #include "CLCommunicUpsdPort1.h"     // Pour utiliser le port série du uPSD
     24          #include "_DeclarationGenerale.h"    // Raccourcis Linguistiques utiles
     25          #include "ConversionKeilToIAR.h"     // Compatbilité avec Keil
     26          #include "NomDuProjet.h"             //
     27          // **** LES DEFINES *****************//
     28          #define PCF8574Adress 0x40           // Adresse I2C du PCD8574
     29          // **** LES CLASSES *****************//
     30          //class RS232      Serial  ;         // Initialise la communication série Dallas 
     31          //class CLCommunic Serial  ;           // Initialise la communication série uPSD  
     32          //class CLI2CPort  I2CSoft ;           // Initialise le communication I2C Software
     33          //class CLI2CHARD  I2CHard ;           // Initialise le communication I2C Hardware

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \   static __intrinsic __near_func __xdata_reentrant void __sti__routine()
   \                     ??__sti__routine:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     34          class CLEcran    LCD     ;           // Initialise l' ecran LCD
   \   000000                ; Setup parameters for call to function CLEcran::CLEcran()
   \   000000   7A..         MOV     R2,#LCD & 0xff
   \   000002   7B..         MOV     R3,#(LCD >> 8) & 0xff
   \   000004   12....       LCALL   ??CLEcran
   \   000007                ; Setup parameters for call to function __record_needed_destruction
   \   000007   7A..         MOV     R2,#?_0 & 0xff
   \   000009   7B..         MOV     R3,#(?_0 >> 8) & 0xff
   \   00000B   12....       LCALL   __record_needed_destruction
     35          //class Encodeur   Optik   ;           // Pour lire l'encodeur Optique
     36          //class CLClavier  Keyboard;           // Initialise le clavier
     37          //class DAC_ADC    Convert ;           // Initialise la conversion DAC <===> ADC
     38          //class Timer0     Timer   ;           // Pour utiliser le timer 0 (Default = 1ms)
     39          //class CLSPI      SPI     ;           // Initialise la communication SPI
     40          class CanBus     CAN     ;           // Initialise le bus CAN
   \   00000E                ; Setup parameters for call to function CanBus::CanBus()
   \   00000E   7A..         MOV     R2,#CAN & 0xff
   \   000010   7B..         MOV     R3,#(CAN >> 8) & 0xff
   \   000012   12....       LCALL   ??CanBus
   \   000015                ; Setup parameters for call to function __record_needed_destruction
   \   000015   7A..         MOV     R2,#?_2 & 0xff
   \   000017   7B..         MOV     R3,#(?_2 >> 8) & 0xff
   \   000019   02....       LJMP    __record_needed_destruction

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     LCD:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     CAN:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     41          // **** LES FONCTIONS DU MAIN *******//
     42          
     43          // **** PROGRAMME PRINCIPAL *********//

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
     44          void main(void)
   \                     main:
     45          {
   \   000000                ; Auto size: 0
     46          EA    = 0   ;  // Disable interrupt.
   \   000000   C2AF         CLR     0xa8.7
     47          WDKEY = 0x55;  // Disable WatchDog.
   \   000002   75AE55       MOV     0xae,#0x55
     48          EA    = 1   ;  // Enable Interrupt
   \   000005   D2AF         SETB    0xa8.7
     49          
     50          
     51          LCD.vLCDCursor(0,1)      ;  
   \   000007                ; Setup parameters for call to function CLEcran::vLCDCursor(UC, UC)
   \   000007   7C01         MOV     R4,#0x1
   \   000009   7900         MOV     R1,#0x0
   \   00000B   7A..         MOV     R2,#LCD & 0xff
   \   00000D   7B..         MOV     R3,#(LCD >> 8) & 0xff
   \   00000F   12....       LCALL   ??vLCDCursor
     52          LCD.String("Class.CAN")  ;
   \   000012                ; Setup parameters for call to function CLEcran::String(char const *)
   \   000012   7C..         MOV     R4,#`?<Constant "Class.CAN">` & 0xff
   \   000014   7D..         MOV     R5,#(`?<Constant "Class.CAN">` >> 8) & 0xff
   \   000016   7A..         MOV     R2,#LCD & 0xff
   \   000018   7B..         MOV     R3,#(LCD >> 8) & 0xff
   \   00001A   12....       LCALL   ??String
     53          LCD.vLCDCursor(0,2)      ;
   \   00001D                ; Setup parameters for call to function CLEcran::vLCDCursor(UC, UC)
   \   00001D   7C02         MOV     R4,#0x2
   \   00001F   7900         MOV     R1,#0x0
   \   000021   7A..         MOV     R2,#LCD & 0xff
   \   000023   7B..         MOV     R3,#(LCD >> 8) & 0xff
   \   000025   12....       LCALL   ??vLCDCursor
     54          LCD.String("Class.SPI")  ;
   \   000028                ; Setup parameters for call to function CLEcran::String(char const *)
   \   000028   7C..         MOV     R4,#`?<Constant "Class.SPI">` & 0xff
   \   00002A   7D..         MOV     R5,#(`?<Constant "Class.SPI">` >> 8) & 0xff
   \   00002C   7A..         MOV     R2,#LCD & 0xff
   \   00002E   7B..         MOV     R3,#(LCD >> 8) & 0xff
   \   000030   12....       LCALL   ??String
     55          LCD.vLCDCursor(0,3)      ;
   \   000033                ; Setup parameters for call to function CLEcran::vLCDCursor(UC, UC)
   \   000033   7C03         MOV     R4,#0x3
   \   000035   7900         MOV     R1,#0x0
   \   000037   7A..         MOV     R2,#LCD & 0xff
   \   000039   7B..         MOV     R3,#(LCD >> 8) & 0xff
   \   00003B   12....       LCALL   ??vLCDCursor
     56          LCD.String("Class.LCD")  ;
   \   00003E                ; Setup parameters for call to function CLEcran::String(char const *)
   \   00003E   7C..         MOV     R4,#`?<Constant "Class.LCD">` & 0xff
   \   000040   7D..         MOV     R5,#(`?<Constant "Class.LCD">` >> 8) & 0xff
   \   000042   7A..         MOV     R2,#LCD & 0xff
   \   000044   7B..         MOV     R3,#(LCD >> 8) & 0xff
   \   000046   12....       LCALL   ??String
     57          LCD.vLCDCursor(0,3)      ;
   \   000049                ; Setup parameters for call to function CLEcran::vLCDCursor(UC, UC)
   \   000049   7C03         MOV     R4,#0x3
   \   00004B   7900         MOV     R1,#0x0
   \   00004D   7A..         MOV     R2,#LCD & 0xff
   \   00004F   7B..         MOV     R3,#(LCD >> 8) & 0xff
   \   000051   12....       LCALL   ??vLCDCursor
     58          LCD.String("Class.I2C")  ;
   \   000054                ; Setup parameters for call to function CLEcran::String(char const *)
   \   000054   7C..         MOV     R4,#`?<Constant "Class.I2C">` & 0xff
   \   000056   7D..         MOV     R5,#(`?<Constant "Class.I2C">` >> 8) & 0xff
   \   000058   7A..         MOV     R2,#LCD & 0xff
   \   00005A   7B..         MOV     R3,#(LCD >> 8) & 0xff
   \   00005C   12....       LCALL   ??String
     59          
     60          while(1)
     61            {
     62             CAN.SendMCP2515("Coucou");
   \                     ??main_0:
   \   00005F                ; Setup parameters for call to function CanBus::SendMCP2515(UC const *)
   \   00005F   7C..         MOV     R4,#`?<Constant "Coucou">` & 0xff
   \   000061   7D..         MOV     R5,#(`?<Constant "Coucou">` >> 8) & 0xff
   \   000063   7A..         MOV     R2,#CAN & 0xff
   \   000065   7B..         MOV     R3,#(CAN >> 8) & 0xff
   \   000067   12....       LCALL   ??SendMCP2515
   \   00006A   80F3         SJMP    ??main_0
   \   00006C                REQUIRE _A_IE
   \   00006C                REQUIRE WDKEY
     63            }
     64          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "Class.CAN">>`:
   \   000000   436C6173     DB "Class.CAN"
   \            732E4341
   \            4E00    

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "Class.SPI">>`:
   \   000000   436C6173     DB "Class.SPI"
   \            732E5350
   \            4900    

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "Class.LCD">>`:
   \   000000   436C6173     DB "Class.LCD"
   \            732E4C43
   \            4400    

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "Class.I2C">>`:
   \   000000   436C6173     DB "Class.I2C"
   \            732E4932
   \            4300    

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "Coucou">>`:
   \   000000   436F7563     DB "Coucou"
   \            6F7500  

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for >`:
   \   000000   ....         DW ?_1
   \   000002   ....         DW LCD
   \   000004   ....         DW `?~CLEcran`

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for >_1`:
   \   000000   ....         DW ?_3
   \   000002   ....         DW CAN
   \   000004   ....         DW `?~CanBus`

   \                                 In  segment DIFUNCT, align 1, keep-with-next, root
   \   000000                REQUIRE ?cstart_call_ctors
   \   000000   ....         DC16    ??__sti__routine

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "Class.CAN">`:
   \   000000                DS 10
   \   00000A                REQUIRE `?<Initializer for <Constant "Class.CAN">>`
   \   00000A                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "Class.SPI">`:
   \   000000                DS 10
   \   00000A                REQUIRE `?<Initializer for <Constant "Class.SPI">>`
   \   00000A                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "Class.LCD">`:
   \   000000                DS 10
   \   00000A                REQUIRE `?<Initializer for <Constant "Class.LCD">>`
   \   00000A                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "Class.I2C">`:
   \   000000                DS 10
   \   00000A                REQUIRE `?<Initializer for <Constant "Class.I2C">>`
   \   00000A                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "Coucou">`:
   \   000000                DS 7
   \   000007                REQUIRE `?<Initializer for <Constant "Coucou">>`
   \   000007                REQUIRE __INIT_XDATA_I
     65          //LinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxTUX

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     __sti__routine()                   0      0      0
       -> CLEcran::CLEcran()            0      0      0
       -> __record_needed_destruction
                                        0      0      0
       -> CanBus::CanBus()              0      0      0
       -> __record_needed_destruction
                                        0      0      0
     main()                             0      0      0
       -> CLEcran::vLCDCursor(UC, UC)
                                        0      0      0
       -> CLEcran::String(char const *)
                                        0      0      0
       -> CLEcran::vLCDCursor(UC, UC)
                                        0      0      0
       -> CLEcran::String(char const *)
                                        0      0      0
       -> CLEcran::vLCDCursor(UC, UC)
                                        0      0      0
       -> CLEcran::String(char const *)
                                        0      0      0
       -> CLEcran::vLCDCursor(UC, UC)
                                        0      0      0
       -> CLEcran::String(char const *)
                                        0      0      0
       -> CanBus::SendMCP2515(UC const *)
                                        0      0      0


   Segment part sizes:

     Function/Label                            Bytes
     --------------                            -----
     _A_IE                                        1
     WDKEY                                        1
     __sti__routine()                            28
     LCD                                          2
     CAN                                          1
     main()                                     108
     ?<Initializer for <Constant "Class.CAN">>   10
     ?<Initializer for <Constant "Class.SPI">>   10
     ?<Initializer for <Constant "Class.LCD">>   10
     ?<Initializer for <Constant "Class.I2C">>   10
     ?<Initializer for <Constant "Coucou">>       7
     ?<Initializer for >                          6
     ?<Initializer for >_1                        6
     ?<Constant "Class.CAN">                     10
     ?<Constant "Class.SPI">                     10
     ?<Constant "Class.LCD">                     10
     ?<Constant "Class.I2C">                     10
     ?<Constant "Coucou">                         7
      Others                                     18

 
   2 bytes in segment DIFUNCT
 136 bytes in segment NEAR_CODE
   2 bytes in segment SFR_AN
  59 bytes in segment XDATA_I
  59 bytes in segment XDATA_ID
   7 bytes in segment XDATA_Z
 
 197 bytes of CODE  memory
   0 bytes of DATA  memory (+ 2 bytes shared)
  66 bytes of XDATA memory

Errors: none
Warnings: none
