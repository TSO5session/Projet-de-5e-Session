///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.40194/W32 for 8051        27/Oct/2014  20:17:46 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  near                                              /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data                                              /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Synchro\Dropbox\Travaux\Automne                /
//                          2014\Prog\Labo6\Programme\Optik.cpp               /
//    Command line       =  "C:\Synchro\Dropbox\Travaux\Automne               /
//                          2014\Prog\Labo6\Programme\Optik.cpp" -D           /
//                          UPSD3254A --preprocess=cl                         /
//                          "C:\Synchro\Dropbox\Travaux\Automne               /
//                          2014\Prog\Labo6\Programme\UPSD\List\" -lC         /
//                          "C:\Synchro\Dropbox\Travaux\Automne               /
//                          2014\Prog\Labo6\Programme\UPSD\List\" -lA         /
//                          "C:\Synchro\Dropbox\Travaux\Automne               /
//                          2014\Prog\Labo6\Programme\UPSD\List\" -o          /
//                          "C:\Synchro\Dropbox\Travaux\Automne               /
//                          2014\Prog\Labo6\Programme\UPSD\Obj\" -e --no_cse  /
//                          --no_unroll --no_inline --no_code_motion          /
//                          --no_tbaa --debug --core=plain --dptr=16,1        /
//                          --data_model=large --code_model=near              /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data --nr_virtual_regs 8        /
//                          --dlib_config "C:\Program Files (x86)\IAR         /
//                          Systems\Embedded Workbench                        /
//                          6.0\8051\LIB\DLIB\dl8051Normal.h" -Ol --eec++     /
//    List file          =  C:\Synchro\Dropbox\Travaux\Automne                /
//                          2014\Prog\Labo6\Programme\UPSD\List\Optik.s51     /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME Optik

        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "near"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        EXTERN ?FUNC_ENTER_XDATA
        EXTERN ?FUNC_LEAVE_XDATA
        EXTERN ?V0
        EXTERN __INIT_XDATA_I

        PUBLIC ??Encodeur
        FUNCTION ??Encodeur,0203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ??Encodeur_1
        FUNCTION ??Encodeur_1,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC ??LastState
        PUBLIC ??LogicAnalyser
        FUNCTION ??LogicAnalyser,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC `??delete ~Encodeur`
        FUNCTION `??delete ~Encodeur`,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        PUBLIC `??new Encodeur`
        FUNCTION `??new Encodeur`,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC `??new Encodeur_1`
        FUNCTION `??new Encodeur_1`,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC `?~Encodeur`
        FUNCTION `?~Encodeur`,0203H
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBWEAK _A_P1
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:16, ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
`?<Name Encodeur 4>` SYMBOL "Encodeur"
??LastState         SYMBOL "LastState", `?<Name Encodeur 4>`

        EXTERN `??operator new`
        FUNCTION `??operator new`,010202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN `??operator delete`
        FUNCTION `??operator delete`,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Synchro\Dropbox\Travaux\Automne 2014\Prog\Labo6\Programme\Optik.cpp
//    1 // **************************Fichier.cpp
//    2 // Auteur:       Vincent Chouinard
//    3 // Date:         20 juillet 2014
//    4 // Version:      1.0
//    5 // Modification: Aucune
//    6 //
//    7 // Compilateur:  IAR 8.1
//    8 //
//    9 // Description:
//   10 // *****************************************************************************
//   11 #include "_DeclarationGenerale.h"  // Raccourcis de programmation & variables

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1
//   12 #include "Optik.h"               // Fichier de definitions du clavier
//   13 

        RSEG XDATA_I:XDATA:NOROOT(0)
//   14 char Encodeur :: LastState = 'Z';      // Trame incomplete.
??LastState:
        DATA8
        DS 1
        REQUIRE `?<Initializer for LastState>`
        REQUIRE __INIT_XDATA_I

        RSEG NEAR_CODE:CODE:NOROOT(0)
// __near_func __xdata_reentrant Encodeur &Encodeur::new Encodeur()
`??new Encodeur`:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function `??new Encodeur`
        CODE
        FUNCALL `??new Encodeur`, `??operator new`
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL `??new Encodeur`, ??Encodeur
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    ?V0 + 0
        CFI V0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    ?V0 + 1
        CFI V1 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
        ; Setup parameters for call to function operator new(unsigned int)
        MOV     R2,#0x1
        MOV     R3,#0x0
        LCALL   `??operator new`
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R0
        ORL     A,R1
        JZ      `??new Encodeur_2`
        ; Setup parameters for call to function Encodeur::Encodeur()
        LCALL   ??Encodeur
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        SJMP    `??new Encodeur_3`
`??new Encodeur_2`:
        MOV     R2,#0x0
        MOV     R3,#0x0
`??new Encodeur_3`:
        POP     ?V0 + 1
        CFI V1 SameValue
        CFI CFA_SP SP+-3
        POP     ?V0 + 0
        CFI V0 SameValue
        CFI CFA_SP SP+-2
        RET
        CFI EndBlock cfiBlock0

        RSEG NEAR_CODE:CODE:NOROOT(0)
// __near_func __xdata_reentrant Encodeur &Encodeur::new Encodeur(UC)
`??new Encodeur_1`:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function `??new Encodeur_1`
        CODE
        FUNCALL `??new Encodeur_1`, `??operator new`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL `??new Encodeur_1`, ??Encodeur_1
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
        ; Setup parameters for call to function operator new(unsigned int)
        MOV     R2,#0x1
        MOV     R3,#0x0
        LCALL   `??operator new`
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R0
        ORL     A,R1
        JZ      `??new Encodeur_4`
        ; Setup parameters for call to function Encodeur::Encodeur(UC)
        MOV     A,R6
        MOV     R1,A
        LCALL   ??Encodeur_1
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        SJMP    `??new Encodeur_5`
`??new Encodeur_4`:
        MOV     R2,#0x0
        MOV     R3,#0x0
`??new Encodeur_5`:
        MOV     R7,#0x2
        LJMP    ?FUNC_LEAVE_XDATA
        CFI EndBlock cfiBlock1

        RSEG NEAR_CODE:CODE:NOROOT(0)
// __near_func __xdata_reentrant void Encodeur::delete ~Encodeur(Encodeur *)
`??delete ~Encodeur`:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function `??delete ~Encodeur`
        CODE
        FUNCALL `??delete ~Encodeur`, `?~Encodeur`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL `??delete ~Encodeur`, `??operator delete`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x8
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 8)
        ; Saved register size: 8
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     A,R6
        ORL     A,R7
        JZ      `??delete ~Encodeur_1`
        ; Setup parameters for call to function Encodeur::~Encodeur()
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `?~Encodeur`
        ; Setup parameters for call to function operator delete(void *)
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??operator delete`
`??delete ~Encodeur_1`:
        MOV     R7,#0x1
        LJMP    ?FUNC_LEAVE_XDATA
        CFI EndBlock cfiBlock2
//   15 
//   16 
//   17 
//   18 //******************************************************************************
//   19 //                            LE CONSTRUCTEUR PAR DEFAUT
//   20 // *****************************************************************************

        RSEG NEAR_CODE:CODE:NOROOT(0)
//   21 Encodeur :: Encodeur(void)
??Encodeur:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function ??Encodeur
        CODE
//   22 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
//   23 LastState = P1_7;
        MOV     C,0x90.7
        CLR     A
        RLC     A
        MOV     DPTR,#??LastState
        MOVX    @DPTR,A
//   24 }
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-3
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-2
        RET
        CFI EndBlock cfiBlock3
        REQUIRE _A_P1
//   25 
//   26 //******************************************************************************
//   27 //                            LE CONSTRUCTEUR PAR DEFAUT
//   28 // *****************************************************************************

        RSEG NEAR_CODE:CODE:NOROOT(0)
//   29 Encodeur :: Encodeur(UC ucParametre)
??Encodeur_1:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function ??Encodeur_1
        CODE
//   30 {
        ; Saved register size: 0
        ; Auto size: 0
//   31 
//   32 }
        RET
        CFI EndBlock cfiBlock4
//   33 
//   34 // *****************************************************************************
//   35 //                            LE DESTRUCTEUR
//   36 // *****************************************************************************

        RSEG NEAR_CODE:CODE:NOROOT(0)
//   37 Encodeur :: ~Encodeur(void)
`?~Encodeur`:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function `?~Encodeur`
        CODE
//   38 {
        ; Saved register size: 0
        ; Auto size: 0
//   39 
//   40 }
        RET
        CFI EndBlock cfiBlock5
//   41 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//   42 char Encodeur :: LogicAnalyser(void)
??LogicAnalyser:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function ??LogicAnalyser
        CODE
//   43 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
//   44 char Code = 'Z'; 
        MOV     R1,#0x5a
//   45 
//   46 UC ChanelA = P1_7;
        MOV     C,0x90.7
        CLR     A
        RLC     A
        MOV     R0,A
//   47 UC ChanelB = P1_6;
        MOV     C,0x90.6
        CLR     A
        RLC     A
        MOV     R2,A
//   48 
//   49 if((LastState == 0) && (ChanelA == HIGH)) // Si il  a une montee sur P1_7
        MOV     DPTR,#??LastState
        MOVX    A,@DPTR
        JNZ     ??LogicAnalyser_1
        MOV     A,#0x1
        XRL     A,R0
        JNZ     ??LogicAnalyser_1
//   50   {
//   51    if(ChanelB == LOW) // Est-ce que P1_6 est a LOW?
        MOV     A,R2
        JNZ     ??LogicAnalyser_2
//   52      {                // Si oui
//   53       Code = 'A';
        MOV     R1,#0x41
        SJMP    ??LogicAnalyser_1
//   54      }
//   55    else               // Si non
//   56     {
//   57      Code = 'B';
??LogicAnalyser_2:
        MOV     R1,#0x42
//   58     }
//   59 }
//   60 LastState = P1_7;
??LogicAnalyser_1:
        MOV     C,0x90.7
        CLR     A
        RLC     A
        MOV     DPTR,#??LastState
        MOVX    @DPTR,A
//   61 return(Code);
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-3
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-2
        RET
        CFI EndBlock cfiBlock6
        REQUIRE _A_P1
//   62 }

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for LastState>`:
        DATA8
        DB 90

        END
//   63 
//   64 //LinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxTUX
// 
// 203 bytes in segment NEAR_CODE
//   1 byte  in segment SFR_AN
//   1 byte  in segment XDATA_I
//   1 byte  in segment XDATA_ID
// 
// 204 bytes of CODE  memory
//   0 bytes of DATA  memory (+ 1 byte shared)
//   1 byte  of XDATA memory
//
//Errors: none
//Warnings: none
