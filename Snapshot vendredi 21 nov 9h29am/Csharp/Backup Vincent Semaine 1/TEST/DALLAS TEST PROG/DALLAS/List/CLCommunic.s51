///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.40194/W32 for 8051        14/Nov/2014  22:00:59 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  near                                              /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data                                              /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Synchro\Dropbox\Travaux\Automne                /
//                          2014\ProjetSession5\Csharp\TEST\DALLAS TEST       /
//                          PROG\CLCommunic.cpp                               /
//    Command line       =  "C:\Synchro\Dropbox\Travaux\Automne               /
//                          2014\ProjetSession5\Csharp\TEST\DALLAS TEST       /
//                          PROG\CLCommunic.cpp" -D DALLAS89C450              /
//                          --preprocess=cl "C:\Synchro\Dropbox\Travaux\Autom /
//                          ne 2014\ProjetSession5\Csharp\TEST\DALLAS TEST    /
//                          PROG\DALLAS\List\" -lC "C:\Synchro\Dropbox\Travau /
//                          x\Automne 2014\ProjetSession5\Csharp\TEST\DALLAS  /
//                          TEST PROG\DALLAS\List\" -lA                       /
//                          "C:\Synchro\Dropbox\Travaux\Automne               /
//                          2014\ProjetSession5\Csharp\TEST\DALLAS TEST       /
//                          PROG\DALLAS\List\" -o "C:\Synchro\Dropbox\Travaux /
//                          \Automne 2014\ProjetSession5\Csharp\TEST\DALLAS   /
//                          TEST PROG\DALLAS\Obj\" -e --no_cse --no_unroll    /
//                          --no_inline --no_code_motion --no_tbaa --debug    /
//                          --core=plain --dptr=16,1 --data_model=large       /
//                          --code_model=near --calling_convention=xdata_reen /
//                          trant --place_constants=data --nr_virtual_regs 8  /
//                          --dlib_config "C:\Program Files (x86)\IAR         /
//                          Systems\Embedded Workbench                        /
//                          6.0\8051\LIB\DLIB\dl8051Normal.h" -Ol --ec++      /
//    List file          =  C:\Synchro\Dropbox\Travaux\Automne                /
//                          2014\ProjetSession5\Csharp\TEST\DALLAS TEST       /
//                          PROG\DALLAS\List\CLCommunic.s51                   /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME CLCommunic

        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "near"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?FUNC_ENTER_XDATA
        EXTERN ?FUNC_LEAVE_XDATA
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?V0

        PUBLIC ??GetCar
        FUNCTION ??GetCar,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ??RS232
        FUNCTION ??RS232,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ??RS232_1
        FUNCTION ??RS232_1,0203H
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC ??SendCar
        FUNCTION ??SendCar,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ??SendString
        FUNCTION ??SendString,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ??SetConfig
        FUNCTION ??SetConfig,0203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC `??delete ~RS232`
        FUNCTION `??delete ~RS232`,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        PUBLIC `??new RS232`
        FUNCTION `??new RS232`,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC `??new RS232_1`
        FUNCTION `??new RS232_1`,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC `?~RS232`
        FUNCTION `?~RS232`,0203H
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBWEAK SBUF0
        PUBWEAK TH1
        PUBWEAK _A_PCON
        PUBWEAK _A_SCON0
        PUBWEAK _A_TCON
        PUBWEAK _A_TMOD
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:16, ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        EXTERN `??operator new`
        FUNCTION `??operator new`,010202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN `??operator delete`
        FUNCTION `??operator delete`,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Synchro\Dropbox\Travaux\Automne 2014\ProjetSession5\Csharp\TEST\DALLAS TEST PROG\CLCommunic.cpp
//    1 #include "CLCommunic.h"             //inclue RS232.h.

        ASEGN SFR_AN:DATA:NOROOT,099H
// unsigned char volatile __sfr SBUF0
SBUF0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,088H
// union <unnamed> volatile __sfr _A_TCON
_A_TCON:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,08dH
// unsigned char volatile __sfr TH1
TH1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,089H
// union <unnamed> volatile __sfr _A_TMOD
_A_TMOD:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,098H
// union <unnamed> volatile __sfr _A_SCON0
_A_SCON0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,087H
// union <unnamed> volatile __sfr _A_PCON
_A_PCON:
        DATA8
        DS 1

        RSEG NEAR_CODE:CODE:NOROOT(0)
// __near_func __xdata_reentrant RS232 &RS232::new RS232()
`??new RS232`:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function `??new RS232`
        CODE
        FUNCALL `??new RS232`, `??operator new`
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL `??new RS232`, ??RS232
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    ?V0 + 0
        CFI V0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    ?V0 + 1
        CFI V1 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
        ; Setup parameters for call to function operator new(unsigned int)
        MOV     R2,#0x1
        MOV     R3,#0x0
        LCALL   `??operator new`
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R0
        ORL     A,R1
        JZ      `??new RS232_2`
        ; Setup parameters for call to function RS232::RS232()
        LCALL   ??RS232
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        SJMP    `??new RS232_3`
`??new RS232_2`:
        MOV     R2,#0x0
        MOV     R3,#0x0
`??new RS232_3`:
        POP     ?V0 + 1
        CFI V1 SameValue
        CFI CFA_SP SP+-3
        POP     ?V0 + 0
        CFI V0 SameValue
        CFI CFA_SP SP+-2
        RET
        CFI EndBlock cfiBlock0

        RSEG NEAR_CODE:CODE:NOROOT(0)
// __near_func __xdata_reentrant RS232 &RS232::new RS232(UC, UC, UI)
`??new RS232_1`:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function `??new RS232_1`
        CODE
        FUNCALL `??new RS232_1`, `??operator new`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL `??new RS232_1`, ??RS232_1
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
        MOV     R7,A
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        ; Setup parameters for call to function operator new(unsigned int)
        MOV     R2,#0x1
        MOV     R3,#0x0
        LCALL   `??operator new`
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R0,?V0 + 2
        MOV     R1,?V0 + 3
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R0
        ORL     A,R1
        JZ      `??new RS232_4`
        ; Setup parameters for call to function RS232::RS232(UC, UC, UI)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     A,R7
        MOV     R4,A
        MOV     A,R6
        MOV     R1,A
        LCALL   ??RS232_1
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        SJMP    `??new RS232_5`
`??new RS232_4`:
        MOV     R2,#0x0
        MOV     R3,#0x0
`??new RS232_5`:
        MOV     R7,#0x4
        LJMP    ?FUNC_LEAVE_XDATA
        CFI EndBlock cfiBlock1

        RSEG NEAR_CODE:CODE:NOROOT(0)
// __near_func __xdata_reentrant void RS232::delete ~RS232(RS232 *)
`??delete ~RS232`:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function `??delete ~RS232`
        CODE
        FUNCALL `??delete ~RS232`, `?~RS232`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL `??delete ~RS232`, `??operator delete`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x8
        LCALL   ?FUNC_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 8)
        ; Saved register size: 8
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     A,R6
        ORL     A,R7
        JZ      `??delete ~RS232_1`
        ; Setup parameters for call to function RS232::~RS232()
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `?~RS232`
        ; Setup parameters for call to function operator delete(void *)
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??operator delete`
`??delete ~RS232_1`:
        MOV     R7,#0x1
        LJMP    ?FUNC_LEAVE_XDATA
        CFI EndBlock cfiBlock2
//    2 #include "ConversionKeilToIAR.h"
//    3 #include "stdio.h"
//    4 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//    5 RS232 :: RS232(void)
??RS232:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function ??RS232
        CODE
//    6 {
        FUNCALL ??RS232, ??SetConfig
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
        MOV     DPL,R2
        MOV     DPH,R3
//    7 SetConfig();   // Initialise le port serie.
        ; Setup parameters for call to function RS232::SetConfig()
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??SetConfig
//    8 }
        MOV     R2,DPL
        MOV     R3,DPH
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-3
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-2
        RET
        CFI EndBlock cfiBlock3
//    9 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//   10 RS232 :: RS232(UC ucLongBuf, UC ucLongTrame, UI uiBaud)
??RS232_1:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function ??RS232_1
        CODE
//   11 {
        ; Saved register size: 0
        ; Auto size: 0
//   12 
//   13                                           // communication.
//   14 }
        RET
        CFI EndBlock cfiBlock4
//   15 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//   16 RS232 :: ~RS232(void)
`?~RS232`:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function `?~RS232`
        CODE
//   17 {
        ; Saved register size: 0
        ; Auto size: 0
//   18 
//   19 }
        RET
        CFI EndBlock cfiBlock5
//   20 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//   21 void RS232 :: SendString(char const *ucpMessage)
??SendString:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function ??SendString
        CODE
//   22 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
        SJMP    ??SendString_1
//   23 while(*ucpMessage != 0x00)          // Tant qu'on a pas atteint la fin de 
//   24   {                                 // la chaine.
//   25    SBUF0 = *ucpMessage;             // Envoye le caractere dans SBUF0 pour le transmetre sur TX                     
??SendString_2:
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        MOV     0x99,A
//   26    while(TI_0 ==0);                 // Si le flag TI_0 se met a 1 (termine)
??SendString_3:
        MOV     C,0x98.1
        JNC     ??SendString_3
//   27    TI_0  = 0;                       // Remet le flag a 0. 
        CLR     0x98.1
//   28    ucpMessage++;                    // Passe au caractere suivant.
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        MOV     R4,DPL
        MOV     R5,DPH
//   29   }
??SendString_1:
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        JNZ     ??SendString_2
//   30 }
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-3
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-2
        RET
        CFI EndBlock cfiBlock6
        REQUIRE SBUF0
        REQUIRE _A_SCON0
//   31 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//   32 void RS232 :: SendCar(char Caractere)
??SendCar:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function ??SendCar
        CODE
//   33 {
        ; Saved register size: 0
        ; Auto size: 0
//   34 SBUF0 = Caractere;         // Envoye le caractere dans SBUF0 pour le transmetre sur TX                     
        MOV     0x99,R1
//   35 while(TI_0 ==0);           // Si le flag TI_0 se met a 1 (termine)
??SendCar_1:
        MOV     C,0x98.1
        JNC     ??SendCar_1
//   36 TI_0  = 0;                 // Remet le flag a 0.  
        CLR     0x98.1
//   37 }
        RET
        CFI EndBlock cfiBlock7
        REQUIRE SBUF0
        REQUIRE _A_SCON0
//   38 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//   39 char RS232 :: GetCar(void)
??GetCar:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function ??GetCar
        CODE
//   40 {
        ; Saved register size: 0
        ; Auto size: 0
//   41 return(SBUF0);
        MOV     R1,0x99
        RET
        CFI EndBlock cfiBlock8
        REQUIRE SBUF0
//   42 }
//   43 
//   44 
//   45 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//   46 void RS232 :: SetConfig(void)
??SetConfig:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function ??SetConfig
        CODE
//   47 {
        ; Saved register size: 0
        ; Auto size: 0
//   48 // Setup port serie 0 du Dallas pour 57600 baud a 11.059MHz.
//   49 SCON0 = 0x50;            // SCON: mode 1, 8-bit UART, enable rcvr.
        MOV     0x98,#0x50
//   50 TMOD |= 0x20;            // TMOD: timer 1, mode 2, 8-bit reload.
        ORL     0x89,#0x20
//   51 TH1   = 255;             // TH1: reload value for 57600 baud a 11.059MHz.
        MOV     0x8d,#-0x1
//   52 PCON  = 0x80;            // SMOD_0 = 1 (doubleur de baud).
        MOV     0x87,#-0x80
//   53 TR1   = 1;               // TR1: Part le timer 1.
        SETB    0x88.6
//   54 TI_0  = 1;               // TI: set TI to send first char of UART.  
        SETB    0x98.1
//   55 }
        RET
        CFI EndBlock cfiBlock9
        REQUIRE _A_SCON0
        REQUIRE _A_TMOD
        REQUIRE TH1
        REQUIRE _A_PCON
        REQUIRE _A_TCON

        END
//   56 //LinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxLinuxTUX
//   57 
//   58 
//   59 
//   60 
//   61 
//   62 
// 
// 248 bytes in segment NEAR_CODE
//   6 bytes in segment SFR_AN
// 
// 248 bytes of CODE memory
//   0 bytes of DATA memory (+ 6 bytes shared)
//
//Errors: none
//Warnings: none
