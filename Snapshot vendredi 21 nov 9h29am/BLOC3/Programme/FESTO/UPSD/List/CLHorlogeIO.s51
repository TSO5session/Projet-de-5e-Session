///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.20.2.41139 for 8051            11/Nov/2014  11:41:09 /
// Copyright 2004-2013 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  near                                              /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data                                              /
//    Dptr setup         =  1,16                                              /
//                                                                            /
//    Source file        =  C:\Users\1230838\Desktop\PROJETSESSION5\BLOC3\Pro /
//                          gramme\FESTO\Libraire\CLHorlogeIO.cpp             /
//    Command line       =  C:\Users\1230838\Desktop\PROJETSESSION5\BLOC3\Pro /
//                          gramme\FESTO\Libraire\CLHorlogeIO.cpp -D          /
//                          UPSD3254A --preprocess=cl                         /
//                          C:\Users\1230838\Desktop\PROJETSESSION5\BLOC3\Pro /
//                          gramme\FESTO\UPSD\List\ -lC                       /
//                          C:\Users\1230838\Desktop\PROJETSESSION5\BLOC3\Pro /
//                          gramme\FESTO\UPSD\List\ -lA                       /
//                          C:\Users\1230838\Desktop\PROJETSESSION5\BLOC3\Pro /
//                          gramme\FESTO\UPSD\List\ -o                        /
//                          C:\Users\1230838\Desktop\PROJETSESSION5\BLOC3\Pro /
//                          gramme\FESTO\UPSD\Obj\ -e --no_cse --no_unroll    /
//                          --no_inline --no_code_motion --no_tbaa --debug    /
//                          --core=plain --dptr=16,1 --data_model=large       /
//                          --code_model=near --calling_convention=xdata_reen /
//                          trant --place_constants=data --nr_virtual_regs 8  /
//                          --dlib_config "C:\Program Files\IAR               /
//                          Systems\Embedded Workbench                        /
//                          6.4\8051\LIB\DLIB\dl8051Normal.h" -Ol --eec++     /
//    List file          =  C:\Users\1230838\Desktop\PROJETSESSION5\BLOC3\Pro /
//                          gramme\FESTO\UPSD\List\CLHorlogeIO.s51            /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME CLHorlogeIO

        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "near"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        EXTERN ?FUNC_ENTER_XDATA
        EXTERN ?FUNC_LEAVE_XDATA
        EXTERN ?V0

        PUBLIC ??CLHorlogeIO
        FUNCTION ??CLHorlogeIO,0203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ??CLHorlogeIO_1
        FUNCTION ??CLHorlogeIO_1,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC `??delete ~CLHorlogeIO`
        FUNCTION `??delete ~CLHorlogeIO`,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        PUBLIC `??new CLHorlogeIO`
        FUNCTION `??new CLHorlogeIO`,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC `??new CLHorlogeIO_1`
        FUNCTION `??new CLHorlogeIO_1`,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ??vReadTime
        FUNCTION ??vReadTime,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 8, STACK
        PUBLIC ??vWriteTime
        FUNCTION ??vWriteTime,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        PUBLIC `?~CLHorlogeIO`
        FUNCTION `?~CLHorlogeIO`,0203H
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:16, ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        EXTERN `??operator delete`
        FUNCTION `??operator delete`,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN `??operator new`
        FUNCTION `??operator new`,010202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??ucIn
        FUNCTION ??ucIn,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??vOut
        FUNCTION ??vOut,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC


        RSEG NEAR_CODE:CODE:NOROOT(0)
// __near_func __xdata_reentrant CLHorlogeIO &CLHorlogeIO::new CLHorlogeIO()
`??new CLHorlogeIO`:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function `??new CLHorlogeIO`
        CODE
        FUNCALL `??new CLHorlogeIO`, `??operator new`
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL `??new CLHorlogeIO`, ??CLHorlogeIO
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    ?V0 + 0
          CFI V0 Frame(CFA_SP, 3)
          CFI CFA_SP SP+-3
        PUSH    ?V0 + 1
          CFI V1 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
        ; Setup parameters for call to function operator new(unsigned int)
        MOV     R2,#0x9
        MOV     R3,#0x0
        LCALL   `??operator new`
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R0
        ORL     A,R1
        JZ      `??new CLHorlogeIO_2`
        ; Setup parameters for call to function CLHorlogeIO::CLHorlogeIO()
        LCALL   ??CLHorlogeIO
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        SJMP    `??new CLHorlogeIO_3`
`??new CLHorlogeIO_2`:
        MOV     R2,#0x0
        MOV     R3,#0x0
`??new CLHorlogeIO_3`:
        POP     ?V0 + 1
          CFI V1 SameValue
          CFI CFA_SP SP+-3
        POP     ?V0 + 0
          CFI V0 SameValue
          CFI CFA_SP SP+-2
        RET
          CFI EndBlock cfiBlock0

        RSEG NEAR_CODE:CODE:NOROOT(0)
// __near_func __xdata_reentrant CLHorlogeIO &CLHorlogeIO::new CLHorlogeIO(USI)
`??new CLHorlogeIO_1`:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function `??new CLHorlogeIO_1`
        CODE
        FUNCALL `??new CLHorlogeIO_1`, `??operator new`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL `??new CLHorlogeIO_1`, ??CLHorlogeIO_1
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?FUNC_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        ; Setup parameters for call to function operator new(unsigned int)
        MOV     R2,#0x9
        MOV     R3,#0x0
        LCALL   `??operator new`
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R0
        ORL     A,R1
        JZ      `??new CLHorlogeIO_4`
        ; Setup parameters for call to function CLHorlogeIO::CLHorlogeIO(USI)
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        LCALL   ??CLHorlogeIO_1
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        SJMP    `??new CLHorlogeIO_5`
`??new CLHorlogeIO_4`:
        MOV     R2,#0x0
        MOV     R3,#0x0
`??new CLHorlogeIO_5`:
        MOV     R7,#0x2
        LJMP    ?FUNC_LEAVE_XDATA
          CFI EndBlock cfiBlock1

        RSEG NEAR_CODE:CODE:NOROOT(0)
// __near_func __xdata_reentrant void CLHorlogeIO::delete ~CLHorlogeIO(CLHorlogeIO *)
`??delete ~CLHorlogeIO`:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function `??delete ~CLHorlogeIO`
        CODE
        FUNCALL `??delete ~CLHorlogeIO`, `?~CLHorlogeIO`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL `??delete ~CLHorlogeIO`, `??operator delete`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x8
        LCALL   ?FUNC_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 8)
        ; Saved register size: 8
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     A,R6
        ORL     A,R7
        JZ      `??delete ~CLHorlogeIO_1`
        ; Setup parameters for call to function CLHorlogeIO::~CLHorlogeIO()
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `?~CLHorlogeIO`
        ; Setup parameters for call to function operator delete(void *)
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??operator delete`
`??delete ~CLHorlogeIO_1`:
        MOV     R7,#0x1
        LJMP    ?FUNC_LEAVE_XDATA
          CFI EndBlock cfiBlock2
// C:\Users\1230838\Desktop\PROJETSESSION5\BLOC3\Programme\FESTO\Libraire\CLHorlogeIO.cpp
//    1 // ***************** FICHIER:CLHorlogeIO.cpp
//    2 //
//    3 //  Description: Contient les definitions de fonction pour communiquer avec 
//    4 //               le materiel d une horloge
//    5 //
//    6 //  Application realisee avec IAR
//    7 //
//    8 //  AUTEUR : Gabriel Fortin-Belanger
//    9 //  DATE CREATION :    2014-02-07		 VERSION: 1.0
//   10 //  DATE MODIFICATION: ****-**-**
//   11 //
//   12 //******************************************************************************
//   13 #include "CLInOutBase.h"
//   14 #include "_DeclarationGenerale.h"
//   15 #include "CLHorlogeIO.h"
//   16 
//   17 
//   18 
//   19 //***********************CLHorlogeIO(void)
//   20 //
//   21 //Description:Ce constructeur met l addresse de l horlogr a 0xFC00 par defaut
//   22 //            lors de la creation d un objet 
//   23 //
//   24 // Nom:CLPiece :: CLHorlogeIO(void)
//   25 //           
//   26 // PARAMETRE D'ENTREE: -
//   27 //                  
//   28 // 
//   29 //
//   30 // PARAMETRE DE SORTIE: -             
//   31 //
//   32 //    
//   33 // Membre utilise:  usiAdresseHorloge
//   34 //
//   35 //
//   36 // DATE DE CREATION: 10 octobre 2013    AUTEUR: Gabriel Fortin-B
//   37 // DATE DE MODIFICATION:	
//   38 //*****************************************************************************

        RSEG NEAR_CODE:CODE:NOROOT(0)
//   39 CLHorlogeIO :: CLHorlogeIO(void)
??CLHorlogeIO:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function ??CLHorlogeIO
        CODE
//   40 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 3)
          CFI CFA_SP SP+-3
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
//   41   usiAdresseHorloge = 0xFC00;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x4
        MOVX    @DPTR,A
//   42 }
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-2
        RET
          CFI EndBlock cfiBlock3
//   43 
//   44 //***********************CLHorlogeIO(USI usiAdresse)
//   45 //
//   46 //Description:Ce constructeur met l addresse de l horlogr addresse choisit 
//   47 //            lors de la creation d un objet 
//   48 //
//   49 // Nom:CLPiece :: CLHorlogeIO(USI usiAdresse)
//   50 //           
//   51 // PARAMETRE D'ENTREE: usiAdresse
//   52 //                  
//   53 // 
//   54 //
//   55 // PARAMETRE DE SORTIE: -             
//   56 //
//   57 //    
//   58 // Membre utilise:  usiAdresseHorloge
//   59 //
//   60 //
//   61 // DATE DE CREATION: 10 octobre 2013    AUTEUR: Gabriel Fortin-B
//   62 // DATE DE MODIFICATION:	
//   63 //*****************************************************************************

        RSEG NEAR_CODE:CODE:NOROOT(0)
//   64 CLHorlogeIO :: CLHorlogeIO(USI usiAdresse)
??CLHorlogeIO_1:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function ??CLHorlogeIO_1
        CODE
//   65 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 3)
          CFI CFA_SP SP+-3
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
//   66   
//   67   usiAdresseHorloge = usiAdresse;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
//   68 
//   69 }
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-2
        RET
          CFI EndBlock cfiBlock4
//   70 
//   71 //***********************~CLHorlogeIO(void)
//   72 //
//   73 //Description:Destructeur ne fait rien
//   74 //           
//   75 //
//   76 // Nom:CLPiece :: ~CLHorlogeIO(void)
//   77 //           
//   78 // PARAMETRE D'ENTREE: -
//   79 //                  
//   80 // 
//   81 //
//   82 // PARAMETRE DE SORTIE: -             
//   83 //
//   84 //    
//   85 // Membre utilise:  -
//   86 //
//   87 //
//   88 // DATE DE CREATION: 10 octobre 2013    AUTEUR: Gabriel Fortin-B
//   89 // DATE DE MODIFICATION:	
//   90 //*****************************************************************************

        RSEG NEAR_CODE:CODE:NOROOT(0)
//   91 CLHorlogeIO :: ~CLHorlogeIO(void)
`?~CLHorlogeIO`:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function `?~CLHorlogeIO`
        CODE
//   92 {
        ; Saved register size: 0
        ; Auto size: 0
//   93 
//   94 
//   95 }
        RET
          CFI EndBlock cfiBlock5
//   96 
//   97 //***********************vReadTime(void)
//   98 //
//   99 //Description:Cette fonction permet de lire Heure HMS d une horloge
//  100 //            
//  101 //
//  102 // Nom:CLPiece :: vReadTime(void)
//  103 //           
//  104 // PARAMETRE D'ENTREE:-
//  105 //                  
//  106 // 
//  107 //
//  108 // PARAMETRE DE SORTIE: -             
//  109 //
//  110 //    
//  111 // Membre utilise: ucIn()
//  112 //                 stHorlogeHMS.ucHeure
//  113 //                 stHorlogeHMS.ucMinute
//  114 //                 stHorlogeHMS.ucSeconde
//  115 //                 usiAdresseHorloge
//  116 //
//  117 //
//  118 // DATE DE CREATION: 10 octobre 2013    AUTEUR: Gabriel Fortin-B
//  119 // DATE DE MODIFICATION:	
//  120 //*****************************************************************************

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  121 void CLHorlogeIO :: vReadTime(void)
??vReadTime:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function ??vReadTime
        CODE
//  122 {
        FUNCALL ??vReadTime, ??ucIn
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??vReadTime, ??ucIn
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??vReadTime, ??ucIn
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x8
        LCALL   ?FUNC_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 8)
        ; Saved register size: 8
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  123   stHorlogeHMS.ucHeure = ucIn(usiAdresseHorloge);
        ; Setup parameters for call to function CLInOutBase::ucIn(unsigned short)
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ucIn
        MOV     A,R1
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
//  124   stHorlogeHMS.ucMinute = ucIn(usiAdresseHorloge + 1);
        ; Setup parameters for call to function CLInOutBase::ucIn(unsigned short)
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R5,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ucIn
        MOV     A,R1
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
//  125   stHorlogeHMS.ucSeconde = ucIn(usiAdresseHorloge + 0x0100);
        ; Setup parameters for call to function CLInOutBase::ucIn(unsigned short)
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ADD     A,#0x0
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x1
        MOV     R5,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ucIn
        MOV     A,R1
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
//  126 
//  127 }
        MOV     R7,#0x1
        LJMP    ?FUNC_LEAVE_XDATA
          CFI EndBlock cfiBlock6
//  128 
//  129 //***********************vWriteTime(void)
//  130 //
//  131 //Description:Cette fonction permet d ecrire l Heure HMS d une horloge
//  132 //            
//  133 //
//  134 // Nom:CLPiece :: vWriteTime(void)
//  135 //           
//  136 // PARAMETRE D'ENTREE:-
//  137 //                  
//  138 // 
//  139 //
//  140 // PARAMETRE DE SORTIE: -             
//  141 //
//  142 //    
//  143 // Membre utilise: ucOut()
//  144 //                 stHorlogeHMS.ucHeure
//  145 //                 stHorlogeHMS.ucMinute
//  146 //                 stHorlogeHMS.ucSeconde
//  147 //                 usiAdresseHorloge
//  148 //                 
//  149 //
//  150 //
//  151 // DATE DE CREATION: 10 octobre 2013    AUTEUR: Gabriel Fortin-B
//  152 // DATE DE MODIFICATION:	
//  153 //*****************************************************************************

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  154 void CLHorlogeIO :: vWriteTime(void)
??vWriteTime:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function ??vWriteTime
        CODE
//  155 {
        FUNCALL ??vWriteTime, ??vOut
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??vWriteTime, ??vOut
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??vWriteTime, ??vOut
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x8
        LCALL   ?FUNC_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 8)
        ; Saved register size: 8
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  156   vOut(usiAdresseHorloge ,stHorlogeHMS.ucHeure);
        ; Setup parameters for call to function CLInOutBase::vOut(unsigned short, unsigned char)
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??vOut
//  157   vOut(usiAdresseHorloge + 1 ,stHorlogeHMS.ucMinute);
        ; Setup parameters for call to function CLInOutBase::vOut(unsigned short, unsigned char)
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R5,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??vOut
//  158   vOut(usiAdresseHorloge + 0x0100 ,stHorlogeHMS.ucSeconde);
        ; Setup parameters for call to function CLInOutBase::vOut(unsigned short, unsigned char)
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ADD     A,#0x0
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x1
        MOV     R5,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??vOut
//  159   
//  160 }
        MOV     R7,#0x1
        LJMP    ?FUNC_LEAVE_XDATA
          CFI EndBlock cfiBlock7

        END
//  161 
//  162 //@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
// 
// 428 bytes in segment NEAR_CODE
// 
// 428 bytes of CODE memory
//
//Errors: none
//Warnings: none
