###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             11/Nov/2014  11:41:10 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  near                                               #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data                                               #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  C:\Users\1230838\Desktop\PROJETSESSION5\BLOC3\Prog #
#                          ramme\FESTO\Libraire\CLI2CPort.cpp                 #
#    Command line       =  C:\Users\1230838\Desktop\PROJETSESSION5\BLOC3\Prog #
#                          ramme\FESTO\Libraire\CLI2CPort.cpp -D UPSD3254A    #
#                          --preprocess=cl C:\Users\1230838\Desktop\PROJETSES #
#                          SION5\BLOC3\Programme\FESTO\UPSD\List\ -lC         #
#                          C:\Users\1230838\Desktop\PROJETSESSION5\BLOC3\Prog #
#                          ramme\FESTO\UPSD\List\ -lA                         #
#                          C:\Users\1230838\Desktop\PROJETSESSION5\BLOC3\Prog #
#                          ramme\FESTO\UPSD\List\ -o                          #
#                          C:\Users\1230838\Desktop\PROJETSESSION5\BLOC3\Prog #
#                          ramme\FESTO\UPSD\Obj\ -e --no_cse --no_unroll      #
#                          --no_inline --no_code_motion --no_tbaa --debug     #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=near --calling_convention=xdata_reent #
#                          rant --place_constants=data --nr_virtual_regs 8    #
#                          --dlib_config "C:\Program Files\IAR                #
#                          Systems\Embedded Workbench                         #
#                          6.4\8051\LIB\DLIB\dl8051Normal.h" -Ol --eec++      #
#    List file          =  C:\Users\1230838\Desktop\PROJETSESSION5\BLOC3\Prog #
#                          ramme\FESTO\UPSD\List\CLI2CPort.lst                #
#    Object file        =  C:\Users\1230838\Desktop\PROJETSESSION5\BLOC3\Prog #
#                          ramme\FESTO\UPSD\Obj\CLI2CPort.r51                 #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\1230838\Desktop\PROJETSESSION5\BLOC3\Programme\FESTO\Libraire\CLI2CPort.cpp
      1          // ***************** FICHIER:CLI2CPort.cpp
      2          //
      3          //  Description:Contient les fonctions haut niveau pour communiquer avec 
      4          //              l I2C.
      5          //             
      6          //
      7          //  Application realisee avec IAR
      8          //
      9          //  AUTEUR : Gabriel Fortin-Belanger
     10          //  DATE CREATION :    2014-02-07		 VERSION: 1.0
     11          //  DATE MODIFICATION: ****-**-**
     12          //
     13          //******************************************************************************
     14          #include "CLInOutBase.h"
     15          #include "_DeclarationGenerale.h"
     16          #include "CLI2CPort.h"
     17          
     18          
     19          //*******************************Constantes************************************
     20          #define PASADRESSE 0
     21          #define ADR8BIT    1
     22          #define ADR16BIT   2
     23          //******************************************************************************
     24          
     25          //***********************CLI2CPort(void)
     26          //
     27          //Description:Ce constructeur par defaut est appeler lors de la creation 
     28          // d un objet 
     29          //
     30          // Nom:CLPiece :: CLPiece(void)
     31          //           et ne fais rien
     32          // PARAMETRE D'ENTREE: -
     33          //                  
     34          // 
     35          //
     36          // PARAMETRE DE SORTIE: -             
     37          //
     38          //    
     39          // Membre utilise: 
     40          //
     41          //
     42          // DATE DE CREATION: 10 octobre 2013    AUTEUR: Gabriel Fortin-B
     43          // DATE DE MODIFICATION:	
     44          //*****************************************************************************

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
     45          CLI2CPort:: CLI2CPort(void)   //Constructeur defaut
   \                     ??CLI2CPort:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
     46          {
   \   000008                ; Setup parameters for call to function CLI2CBase::CLI2CBase()
   \   000008   AA82         MOV     R2,DPL
   \   00000A   AB83         MOV     R3,DPH
   \   00000C   12....       LCALL   ??CLI2CBase
     47            
     48          }
   \   00000F   AA82         MOV     R2,DPL
   \   000011   AB83         MOV     R3,DPH
   \   000013   D083         POP     DPH
   \   000015   D082         POP     DPL
   \   000017   22           RET
     49          
     50          //***********************~CLI2CPort(void) 
     51          //
     52          //Description:Destructeur de CLI2cPort. Ne fais rien
     53          //          
     54          //
     55          // Nom:CLPiece :: ~CLI2CPort(void)
     56          //           
     57          // PARAMETRE D'ENTREE:  -
     58          //                        
     59          //                  
     60          // 
     61          //
     62          // PARAMETRE DE SORTIE: -             
     63          //
     64          //    
     65          // Membre utilise: 
     66          //
     67          //
     68          // DATE DE CREATION: 10 octobre 2013    AUTEUR: Gabriel Fortin-B
     69          // DATE DE MODIFICATION:	
     70          //*****************************************************************************

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
     71          CLI2CPort :: ~CLI2CPort(void)   
   \                     `?~CLI2CPort`:
     72          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     73           
     74            
     75          }
   \   000000                ; Setup parameters for call to function CLI2CBase::~CLI2CBase()
   \   000000   02....       LJMP    `?~CLI2CBase`
     76          
     77          
     78          //***********************Fonction:ucI2CEcrireDonnee
     79          //
     80          //Description:Cette fonction permet d'ecrire une donnee a une adresse 
     81          //            precise dans un slave precis en choisisant le type d'addresse
     82          //
     83          // NOM:void CLI2CPort :: vI2CEcrireDonnee(UC ucAdrChip,US usiAdrDepart,
     84          //                                        UC ucTypeAdr,UC ucDonnee)
     85          //
     86          // 
     87          // PARAMETRE D'ENTREE:ucAdrChip:Adresse du slave
     88          //                    usiAdrDepart:Adresse de la case memoire a ecrire 
     89          //                    ucDonnee:Donnee a ecrire
     90          //                    ucTypeAdr: type d'addrese peut prendre 3 valeur
     91          //                                Pas addresse, 8 bit ,16 bit
     92          // PARAMETRE DE SORTIE:Aucun              
     93          //
     94          // PROCEDURES APPELEES: ucI2CEcrireDonneeType()
     95          //
     96          // DATE DE CREATION: 3 septembre 2013    AUTEUR: Gabriel Fortin-B
     97          // DATE DE MODIFICATION:	
     98          //***************************************************************************** 

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
     99          void CLI2CPort :: vI2CEcrireDonnee(UC ucAdrChip,US usiAdrDepart,UC ucTypeAdr,
   \                     ??vI2CEcrireDonnee:
    100                                             UC ucDonnee)
    101          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   89..         MOV     ?V0 + 4,R1
   \   00000B   EC           MOV     A,R4
   \   00000C   FE           MOV     R6,A
   \   00000D   ED           MOV     A,R5
   \   00000E   FF           MOV     R7,A
   \   00000F   740C         MOV     A,#0xc
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V0 + 3,A
   \   000017   740D         MOV     A,#0xd
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V0 + 2,A
    102          
    103             unsigned char ucAdrHaute;
    104             unsigned char ucAdrBas;
    105             unsigned char ucAck;
                                  ^
Warning[Pe550]: variable "ucAck" was set but never used
    106          	    
    107             vI2CStart();                         //Start la communication i2c
   \   00001F                ; Setup parameters for call to function CLI2CBase::vI2CStart()
   \   00001F   AA..         MOV     R2,?V0 + 0
   \   000021   AB..         MOV     R3,?V0 + 1
   \   000023   12....       LCALL   ??vI2CStart
    108             ucAck =  ucI2CEcrireOctet(ucAdrChip);//Ecrit l'adresse du chip en write
   \   000026                ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
   \   000026   A9..         MOV     R1,?V0 + 4
   \   000028   AA..         MOV     R2,?V0 + 0
   \   00002A   AB..         MOV     R3,?V0 + 1
   \   00002C   12....       LCALL   ??ucI2CEcrireOctet
   \   00002F   E9           MOV     A,R1
   \   000030   F8           MOV     R0,A
    109             //while(ucAck == 1)
    110             // {
    111             //   vI2CStart();
    112             //   ucAck = ucI2CEcrireOctet(ucAdrChip);//adresse chip en write,verifier Ack
    113             // }
    114          
    115             switch(ucTypeAdr)
   \   000031   E5..         MOV     A,?V0 + 3
   \   000033   6028         JZ      ??vI2CEcrireDonnee_1
   \   000035   14           DEC     A
   \   000036   6005         JZ      ??vI2CEcrireDonnee_2
   \   000038   14           DEC     A
   \   000039   600E         JZ      ??vI2CEcrireDonnee_3
   \   00003B   8020         SJMP    ??vI2CEcrireDonnee_1
    116              {
    117              
    118                 case PASADRESSE:
    119                    break;
    120                 
    121                 case ADR8BIT:
    122                   ucAdrBas = usiAdrDepart & 0x00FF; //Isole la partie Basse de l adresse
   \                     ??vI2CEcrireDonnee_2:
   \   00003D   EE           MOV     A,R6
   \   00003E   F9           MOV     R1,A
    123                   ucI2CEcrireOctet(ucAdrBas);//Ecrit L'adresse Basse de case memoire 0x10
   \   00003F                ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
   \   00003F   AA..         MOV     R2,?V0 + 0
   \   000041   AB..         MOV     R3,?V0 + 1
   \   000043   12....       LCALL   ??ucI2CEcrireOctet
   \   000046   E9           MOV     A,R1
    124                   break;
   \   000047   8014         SJMP    ??vI2CEcrireDonnee_1
    125                 
    126                 case ADR16BIT:
    127                   ucAdrHaute = usiAdrDepart & 0xFF00; //Isole la partie haute de l adresse
   \                     ??vI2CEcrireDonnee_3:
   \   000049   7900         MOV     R1,#0x0
    128                   ucI2CEcrireOctet(ucAdrHaute);//Ecrit Adreese haute de case memoire 0x00
   \   00004B                ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
   \   00004B   AA..         MOV     R2,?V0 + 0
   \   00004D   AB..         MOV     R3,?V0 + 1
   \   00004F   12....       LCALL   ??ucI2CEcrireOctet
   \   000052   E9           MOV     A,R1
    129                   ucAdrBas = usiAdrDepart & 0x00FF; //Isole la partie Basse de l adresse
   \   000053   EE           MOV     A,R6
   \   000054   F9           MOV     R1,A
    130                   ucI2CEcrireOctet(ucAdrBas);//Ecrit L'adresse Basse de case memoire 0x10
   \   000055                ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
   \   000055   AA..         MOV     R2,?V0 + 0
   \   000057   AB..         MOV     R3,?V0 + 1
   \   000059   12....       LCALL   ??ucI2CEcrireOctet
   \   00005C   E9           MOV     A,R1
    131                   break;
    132           
    133              }
    134             ucI2CEcrireOctet(ucDonnee);//Ecrit la donnee a memoriser 0x34 verifier Ack
   \                     ??vI2CEcrireDonnee_1:
   \   00005D                ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
   \   00005D   A9..         MOV     R1,?V0 + 2
   \   00005F   AA..         MOV     R2,?V0 + 0
   \   000061   AB..         MOV     R3,?V0 + 1
   \   000063   12....       LCALL   ??ucI2CEcrireOctet
   \   000066   E9           MOV     A,R1
    135             vI2CStop();                //Stop la communication
   \   000067                ; Setup parameters for call to function CLI2CBase::vI2CStop()
   \   000067   AA..         MOV     R2,?V0 + 0
   \   000069   AB..         MOV     R3,?V0 + 1
   \   00006B   12....       LCALL   ??vI2CStop
    136          
    137          
    138          }
   \   00006E   7F05         MOV     R7,#0x5
   \   000070   02....       LJMP    ?FUNC_LEAVE_XDATA
    139          
    140          
    141          //***********************Fonction:ucI2CLireDonnee
    142          //
    143          //Description:Cette fonction permet de Lire une donnee a une adresse
    144          //            precise dans un slave precis avec un type d'addresse choisit
    145          //
    146          //NOM:unsigned char CLI2CPort :: ucI2CLireDonnee(UC ucAdrChip, US usiAdrDepart,
    147          //                               UC ucTypeAdr)
    148          
    149          //
    150          //           
    151          // PARAMETRE D'ENTREE:ucAdrChip:Adresse du chip a contacter
    152          //                    usiAdrDepart:Adresse de la case interne ou il faut lire
    153          //                    ucTypeAdr: type d'addrese peut prendre 3 valeur
    154          //                                Pas addresse, 8 bit ,16 bit
    155          //
    156          // PARAMETRE DE SORTIE:ucDonnee: Valeur de l'octet lue                
    157          //
    158          //
    159          // PROCEDURES APPELEES:ucI2CLireDonneeType()
    160          //
    161          // DATE DE CREATION: 3 septembre 2013    AUTEUR: Gabriel Fortin-B
    162          // DATE DE MODIFICATION:	
    163          //*****************************************************************************

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    164          unsigned char CLI2CPort :: ucI2CLireDonnee(UC ucAdrChip, US usiAdrDepart,
   \                     ??ucI2CLireDonnee:
    165                                                     UC ucTypeAdr)
    166          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   89..         MOV     ?V0 + 2,R1
   \   00000B   EC           MOV     A,R4
   \   00000C   FE           MOV     R6,A
   \   00000D   ED           MOV     A,R5
   \   00000E   FF           MOV     R7,A
   \   00000F   740B         MOV     A,#0xb
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V0 + 3,A
    167             unsigned char ucAdrHaute;
    168             unsigned char ucAdrBas;
    169             unsigned char ucDonnee;
    170          		 
    171             vI2CStart();                 //Start la communication i2C
   \   000017                ; Setup parameters for call to function CLI2CBase::vI2CStart()
   \   000017   AA..         MOV     R2,?V0 + 0
   \   000019   AB..         MOV     R3,?V0 + 1
   \   00001B   12....       LCALL   ??vI2CStart
    172             ucI2CEcrireOctet(ucAdrChip); //Ecrit l'adresse du chip en write
   \   00001E                ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
   \   00001E   A9..         MOV     R1,?V0 + 2
   \   000020   AA..         MOV     R2,?V0 + 0
   \   000022   AB..         MOV     R3,?V0 + 1
   \   000024   12....       LCALL   ??ucI2CEcrireOctet
   \   000027   E9           MOV     A,R1
    173             switch(ucTypeAdr)
   \   000028   E5..         MOV     A,?V0 + 3
   \   00002A   6028         JZ      ??ucI2CLireDonnee_1
   \   00002C   14           DEC     A
   \   00002D   6005         JZ      ??ucI2CLireDonnee_2
   \   00002F   14           DEC     A
   \   000030   600E         JZ      ??ucI2CLireDonnee_3
   \   000032   8020         SJMP    ??ucI2CLireDonnee_1
    174              {
    175                 case PASADRESSE:
    176                    break;
    177                 
    178                 case ADR8BIT:
    179                   ucAdrBas = usiAdrDepart & 0x00FF; //Isole la partie Basse de l adresse
   \                     ??ucI2CLireDonnee_2:
   \   000034   EE           MOV     A,R6
   \   000035   F9           MOV     R1,A
    180                   ucI2CEcrireOctet(ucAdrBas);//Ecrit L'adresse Basse de case memoire 0x10
   \   000036                ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
   \   000036   AA..         MOV     R2,?V0 + 0
   \   000038   AB..         MOV     R3,?V0 + 1
   \   00003A   12....       LCALL   ??ucI2CEcrireOctet
   \   00003D   E9           MOV     A,R1
    181                   break;
   \   00003E   8014         SJMP    ??ucI2CLireDonnee_1
    182                 
    183                 case ADR16BIT:
    184                   ucAdrHaute = usiAdrDepart & 0xFF00; //Isole la partie haute de l adresse
   \                     ??ucI2CLireDonnee_3:
   \   000040   7900         MOV     R1,#0x0
    185                   ucI2CEcrireOctet(ucAdrHaute);//Ecrit Adreese haute de case memoire 0x00
   \   000042                ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
   \   000042   AA..         MOV     R2,?V0 + 0
   \   000044   AB..         MOV     R3,?V0 + 1
   \   000046   12....       LCALL   ??ucI2CEcrireOctet
   \   000049   E9           MOV     A,R1
    186                   ucAdrBas = usiAdrDepart & 0x00FF; //Isole la partie Basse de l adresse
   \   00004A   EE           MOV     A,R6
   \   00004B   F9           MOV     R1,A
    187                   ucI2CEcrireOctet(ucAdrBas);//Ecrit L'adresse Basse de case memoire 0x10
   \   00004C                ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
   \   00004C   AA..         MOV     R2,?V0 + 0
   \   00004E   AB..         MOV     R3,?V0 + 1
   \   000050   12....       LCALL   ??ucI2CEcrireOctet
   \   000053   E9           MOV     A,R1
    188                   break;
    189           
    190              }
    191          	                             //
    192             vI2CStart();                 //Start la communication i2C
   \                     ??ucI2CLireDonnee_1:
   \   000054                ; Setup parameters for call to function CLI2CBase::vI2CStart()
   \   000054   AA..         MOV     R2,?V0 + 0
   \   000056   AB..         MOV     R3,?V0 + 1
   \   000058   12....       LCALL   ??vI2CStart
    193             ucI2CEcrireOctet(ucAdrChip + 1 ); //Ecrit l'adresse du chip mode read
   \   00005B                ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
   \   00005B   7401         MOV     A,#0x1
   \   00005D   25..         ADD     A,?V0 + 2
   \   00005F   F9           MOV     R1,A
   \   000060   AA..         MOV     R2,?V0 + 0
   \   000062   AB..         MOV     R3,?V0 + 1
   \   000064   12....       LCALL   ??ucI2CEcrireOctet
   \   000067   E9           MOV     A,R1
    194             ucDonnee = ucI2CLireOctet(0);//Lit la donnee et stocke dans cVar1
   \   000068                ; Setup parameters for call to function CLI2CBase::ucI2CLireOctet(UC)
   \   000068   7900         MOV     R1,#0x0
   \   00006A   AA..         MOV     R2,?V0 + 0
   \   00006C   AB..         MOV     R3,?V0 + 1
   \   00006E   12....       LCALL   ??ucI2CLireOctet
   \   000071   E9           MOV     A,R1
   \   000072   FE           MOV     R6,A
    195             vI2CStop();
   \   000073                ; Setup parameters for call to function CLI2CBase::vI2CStop()
   \   000073   AA..         MOV     R2,?V0 + 0
   \   000075   AB..         MOV     R3,?V0 + 1
   \   000077   12....       LCALL   ??vI2CStop
    196             
    197             return(ucDonnee);       //retourne la donnee lu
   \   00007A   EE           MOV     A,R6
   \   00007B   F9           MOV     R1,A
   \   00007C   7F04         MOV     R7,#0x4
   \   00007E   02....       LJMP    ?FUNC_LEAVE_XDATA
    198          
    199          
    200          
    201          
    202          }

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \   __near_func __xdata_reentrant CLI2CPort &CLI2CPort::new CLI2CPort()
   \                     `??new CLI2CPort`:
   \   000000   C0..         PUSH    ?V0 + 0
   \   000002   C0..         PUSH    ?V0 + 1
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004                ; Setup parameters for call to function operator new(unsigned int)
   \   000004   7A01         MOV     R2,#0x1
   \   000006   7B00         MOV     R3,#0x0
   \   000008   12....       LCALL   `??operator new`
   \   00000B   8A..         MOV     ?V0 + 0,R2
   \   00000D   8B..         MOV     ?V0 + 1,R3
   \   00000F   A8..         MOV     R0,?V0 + 0
   \   000011   A9..         MOV     R1,?V0 + 1
   \   000013   E8           MOV     A,R0
   \   000014   FA           MOV     R2,A
   \   000015   E9           MOV     A,R1
   \   000016   FB           MOV     R3,A
   \   000017   E8           MOV     A,R0
   \   000018   49           ORL     A,R1
   \   000019   600D         JZ      `??new CLI2CPort_1`
   \   00001B                ; Setup parameters for call to function CLI2CPort::CLI2CPort()
   \   00001B   12....       LCALL   ??CLI2CPort
   \   00001E   8A..         MOV     ?V0 + 0,R2
   \   000020   8B..         MOV     ?V0 + 1,R3
   \   000022   AA..         MOV     R2,?V0 + 0
   \   000024   AB..         MOV     R3,?V0 + 1
   \   000026   8004         SJMP    `??new CLI2CPort_2`
   \                     `??new CLI2CPort_1`:
   \   000028   7A00         MOV     R2,#0x0
   \   00002A   7B00         MOV     R3,#0x0
   \                     `??new CLI2CPort_2`:
   \   00002C   D0..         POP     ?V0 + 1
   \   00002E   D0..         POP     ?V0 + 0
   \   000030   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \   __near_func __xdata_reentrant void CLI2CPort::delete ~CLI2CPort(CLI2CPort *)
   \                     `??delete ~CLI2CPort`:
   \   000000   74F8         MOV     A,#-0x8
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 8
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   EE           MOV     A,R6
   \   00000A   4F           ORL     A,R7
   \   00000B   600E         JZ      `??delete ~CLI2CPort_1`
   \   00000D                ; Setup parameters for call to function CLI2CPort::~CLI2CPort()
   \   00000D   EE           MOV     A,R6
   \   00000E   FA           MOV     R2,A
   \   00000F   EF           MOV     A,R7
   \   000010   FB           MOV     R3,A
   \   000011   12....       LCALL   `?~CLI2CPort`
   \   000014                ; Setup parameters for call to function operator delete(void *)
   \   000014   EE           MOV     A,R6
   \   000015   FA           MOV     R2,A
   \   000016   EF           MOV     A,R7
   \   000017   FB           MOV     R3,A
   \   000018   12....       LCALL   `??operator delete`
   \                     `??delete ~CLI2CPort_1`:
   \   00001B   7F01         MOV     R7,#0x1
   \   00001D   02....       LJMP    ?FUNC_LEAVE_XDATA
    203          
    204          //@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       2      0      0  CLI2CPort::CLI2CPort()
                          2 0  0 -> CLI2CBase::CLI2CBase()
       0      0      8  CLI2CPort::delete ~CLI2CPort(CLI2CPort *)
                          0 0  8 -> CLI2CPort::~CLI2CPort()
                          0 0  8 -> operator delete(void *)
       2      0      0  CLI2CPort::new CLI2CPort()
                          2 0  0 -> CLI2CPort::CLI2CPort()
                          2 0  0 -> operator new(unsigned int)
       0      0     12  CLI2CPort::ucI2CLireDonnee(UC, US, UC)
                          0 0 11 -> CLI2CBase::ucI2CEcrireOctet(UC)
                          0 0 11 -> CLI2CBase::ucI2CLireOctet(UC)
                          0 0 11 -> CLI2CBase::vI2CStart()
                          0 0 11 -> CLI2CBase::vI2CStop()
       0      0     14  CLI2CPort::vI2CEcrireDonnee(UC, US, UC, UC)
                          0 0 12 -> CLI2CBase::ucI2CEcrireOctet(UC)
                          0 0 12 -> CLI2CBase::vI2CStart()
                          0 0 12 -> CLI2CBase::vI2CStop()
       0      0      8  CLI2CPort::~CLI2CPort()
                          0 0  0 -> CLI2CBase::~CLI2CBase()


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      24  CLI2CPort::CLI2CPort()
      32  CLI2CPort::delete ~CLI2CPort(CLI2CPort *)
      49  CLI2CPort::new CLI2CPort()
     129  CLI2CPort::ucI2CLireDonnee(UC, US, UC)
     115  CLI2CPort::vI2CEcrireDonnee(UC, US, UC, UC)
       3  CLI2CPort::~CLI2CPort()

 
 352 bytes in segment NEAR_CODE
 
 352 bytes of CODE memory

Errors: none
Warnings: 1
