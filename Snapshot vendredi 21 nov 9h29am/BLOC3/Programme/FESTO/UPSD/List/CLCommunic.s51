///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.20.2.41139 for 8051            11/Nov/2014  11:41:09 /
// Copyright 2004-2013 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  near                                              /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data                                              /
//    Dptr setup         =  1,16                                              /
//                                                                            /
//    Source file        =  C:\Users\1230838\Desktop\PROJETSESSION5\BLOC3\Pro /
//                          gramme\FESTO\Libraire\CLCommunic.cpp              /
//    Command line       =  C:\Users\1230838\Desktop\PROJETSESSION5\BLOC3\Pro /
//                          gramme\FESTO\Libraire\CLCommunic.cpp -D           /
//                          UPSD3254A --preprocess=cl                         /
//                          C:\Users\1230838\Desktop\PROJETSESSION5\BLOC3\Pro /
//                          gramme\FESTO\UPSD\List\ -lC                       /
//                          C:\Users\1230838\Desktop\PROJETSESSION5\BLOC3\Pro /
//                          gramme\FESTO\UPSD\List\ -lA                       /
//                          C:\Users\1230838\Desktop\PROJETSESSION5\BLOC3\Pro /
//                          gramme\FESTO\UPSD\List\ -o                        /
//                          C:\Users\1230838\Desktop\PROJETSESSION5\BLOC3\Pro /
//                          gramme\FESTO\UPSD\Obj\ -e --no_cse --no_unroll    /
//                          --no_inline --no_code_motion --no_tbaa --debug    /
//                          --core=plain --dptr=16,1 --data_model=large       /
//                          --code_model=near --calling_convention=xdata_reen /
//                          trant --place_constants=data --nr_virtual_regs 8  /
//                          --dlib_config "C:\Program Files\IAR               /
//                          Systems\Embedded Workbench                        /
//                          6.4\8051\LIB\DLIB\dl8051Normal.h" -Ol --eec++     /
//    List file          =  C:\Users\1230838\Desktop\PROJETSESSION5\BLOC3\Pro /
//                          gramme\FESTO\UPSD\List\CLCommunic.s51             /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME CLCommunic

        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "near"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?FUNC_ENTER_XDATA
        EXTERN ?FUNC_LEAVE_XDATA
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_SWITCH_SPARSE
        EXTERN ?V0
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        PUBLIC ??CLCommunic
        FUNCTION ??CLCommunic,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 8, STACK
        PUBLIC ??CLCommunic_1
        FUNCTION ??CLCommunic_1,021203H
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 11, STACK
        PUBLIC `??delete ~CLCommunic`
        FUNCTION `??delete ~CLCommunic`,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        PUBLIC `??new CLCommunic`
        FUNCTION `??new CLCommunic`,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC `??new CLCommunic_1`
        FUNCTION `??new CLCommunic_1`,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC ??ucCompteurCarac
        PUBLIC ??ucInitLongTrame
        FUNCTION ??ucInitLongTrame,0203H
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ??ucLireEtatTrame
        FUNCTION ??ucLireEtatTrame,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ??ucLireNbCaractRecu
        FUNCTION ??ucLireNbCaractRecu,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ??ucLongeurTampon
        PUBLIC ??ucLongeurTrame
        PUBLIC ??ucTrameRecu
        PUBLIC ??ucValideTrame
        FUNCTION ??ucValideTrame,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 4, STACK
        PUBLIC ??ucpDebutTampon
        PUBLIC ??ucpEcritureTampon
        PUBLIC ??ucpFinTampon
        PUBLIC ??ucpLireTampon
        PUBLIC ??ucpLireTrame
        FUNCTION ??ucpLireTrame,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ??vInitBaudRate
        FUNCTION ??vInitBaudRate,080203H
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ??vTransCaractere
        FUNCTION ??vTransCaractere,0203H
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC ??vTransString
        FUNCTION ??vTransString,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        PUBLIC `?~CLCommunic`
        FUNCTION `?~CLCommunic`,021203H
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBWEAK SBUF
        PUBWEAK TH1
        PUBWEAK TL1
        PUBWEAK _A_IE
        PUBWEAK _A_PCON
        PUBWEAK _A_SCON
        PUBWEAK _A_TCON
        PUBWEAK _A_TMOD
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:16, ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
`?<Name CLCommunic 8>` SYMBOL "CLCommunic"
??ucCompteurCarac   SYMBOL "ucCompteurCarac", `?<Name CLCommunic 8>`
??ucLongeurTampon   SYMBOL "ucLongeurTampon", `?<Name CLCommunic 8>`
??ucLongeurTrame    SYMBOL "ucLongeurTrame", `?<Name CLCommunic 8>`
??ucTrameRecu       SYMBOL "ucTrameRecu", `?<Name CLCommunic 8>`
??ucpDebutTampon    SYMBOL "ucpDebutTampon", `?<Name CLCommunic 8>`
??ucpEcritureTampon SYMBOL "ucpEcritureTampon", `?<Name CLCommunic 8>`
??ucpFinTampon      SYMBOL "ucpFinTampon", `?<Name CLCommunic 8>`
??ucpLireTampon     SYMBOL "ucpLireTampon", `?<Name CLCommunic 8>`

        EXTERN `??operator delete`
        FUNCTION `??operator delete`,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN `??operator delete[]`
        FUNCTION `??operator delete[]`,010202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN `??operator new`
        FUNCTION `??operator new`,010202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN `??operator new[]`
        FUNCTION `??operator new[]`,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Users\1230838\Desktop\PROJETSESSION5\BLOC3\Programme\FESTO\Libraire\CLCommunic.cpp
//    1 // ********************** FICHIER: CLCommunic.cpp ******************************
//    2 // Descrtiption : La classe contient des fonctions pour controler le port
//    3 //                serie du uPSD ou du DALLAS.
//    4 //
//    5 // Fonctions    : ucInitLongTrame -- Initialise longueur trame
//    6 //                vTransCaractere -- Envoie caractere sur port
//    7 //                vTransChaine    -- Envoie chaine sur port
//    8 //                *ucpLireTrame   -- Pointeur sur la trame
//    9 //                ucLireNbCaract  -- Retourne nombre caract recu
//   10 //                ucLireEtatTrame -- Retourne etat reception trame
//   11 //                vInitBaudRate   -- Initialise Baud
//   12 //                ucValideTrame   -- Retourne etat trame valide
//   13 //                __interrupt void CLCommunic :: vInterruptSerial (void)
//   14 //                
//   15 //                
//   16 //                
//   17 //
//   18 //  AUTEUR :Gabriel Fortin-Belanger
//   19 //  DATE CREATION :    27/03/2014		 VERSION: 1.0
//   20 //
//   21 // ****************************************************************************
//   22 #include "CLInOutBase.h"

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IE
_A_IE:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,099H
// unsigned char volatile __sfr SBUF
SBUF:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,098H
// union <unnamed> volatile __sfr _A_SCON
_A_SCON:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,087H
// union <unnamed> volatile __sfr _A_PCON
_A_PCON:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,088H
// union <unnamed> volatile __sfr _A_TCON
_A_TCON:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,08dH
// unsigned char volatile __sfr TH1
TH1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,089H
// union <unnamed> volatile __sfr _A_TMOD
_A_TMOD:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,08bH
// unsigned char volatile __sfr TL1
TL1:
        DATA8
        DS 1
//   23 #include "_DeclarationGenerale.h"
//   24 #include "CLCommunic.h"
//   25 
//   26 
//   27 
//   28 //***********************************Constante**********************************
//   29 #define LONGEURTRAME  7
//   30 #define LONGEURBUFFER 8
//   31 //******************************************************************************
//   32 
//   33 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   34  UC * CLCommunic::ucpDebutTampon = 0;
??ucpDebutTampon:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   35  UC * CLCommunic::ucpFinTampon = 0;
??ucpFinTampon:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   36  UC * CLCommunic::ucpEcritureTampon = 0;
??ucpEcritureTampon:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   37  UC * CLCommunic::ucpLireTampon = 0;
??ucpLireTampon:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   38  UC   CLCommunic::ucLongeurTampon = 0;
??ucLongeurTampon:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   39  UC   CLCommunic::ucLongeurTrame = 0;
??ucLongeurTrame:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   40  UC   CLCommunic::ucCompteurCarac = 0;
??ucCompteurCarac:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   41  UC   CLCommunic::ucTrameRecu = 0;
??ucTrameRecu:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG NEAR_CODE:CODE:NOROOT(0)
// __near_func __xdata_reentrant CLCommunic &CLCommunic::new CLCommunic()
`??new CLCommunic`:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function `??new CLCommunic`
        CODE
        FUNCALL `??new CLCommunic`, `??operator new`
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL `??new CLCommunic`, ??CLCommunic
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    ?V0 + 0
          CFI V0 Frame(CFA_SP, 3)
          CFI CFA_SP SP+-3
        PUSH    ?V0 + 1
          CFI V1 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
        ; Setup parameters for call to function operator new(unsigned int)
        MOV     R2,#0x1
        MOV     R3,#0x0
        LCALL   `??operator new`
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R0
        ORL     A,R1
        JZ      `??new CLCommunic_2`
        ; Setup parameters for call to function CLCommunic::CLCommunic()
        LCALL   ??CLCommunic
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        SJMP    `??new CLCommunic_3`
`??new CLCommunic_2`:
        MOV     R2,#0x0
        MOV     R3,#0x0
`??new CLCommunic_3`:
        POP     ?V0 + 1
          CFI V1 SameValue
          CFI CFA_SP SP+-3
        POP     ?V0 + 0
          CFI V0 SameValue
          CFI CFA_SP SP+-2
        RET
          CFI EndBlock cfiBlock0

        RSEG NEAR_CODE:CODE:NOROOT(0)
// __near_func __xdata_reentrant CLCommunic &CLCommunic::new CLCommunic(UC, UC, UINT)
`??new CLCommunic_1`:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function `??new CLCommunic_1`
        CODE
        FUNCALL `??new CLCommunic_1`, `??operator new`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL `??new CLCommunic_1`, ??CLCommunic_1
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?FUNC_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
        MOV     R7,A
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        ; Setup parameters for call to function operator new(unsigned int)
        MOV     R2,#0x1
        MOV     R3,#0x0
        LCALL   `??operator new`
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R0,?V0 + 2
        MOV     R1,?V0 + 3
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R0
        ORL     A,R1
        JZ      `??new CLCommunic_4`
        ; Setup parameters for call to function CLCommunic::CLCommunic(UC, UC, UINT)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     A,R7
        MOV     R4,A
        MOV     A,R6
        MOV     R1,A
        LCALL   ??CLCommunic_1
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        SJMP    `??new CLCommunic_5`
`??new CLCommunic_4`:
        MOV     R2,#0x0
        MOV     R3,#0x0
`??new CLCommunic_5`:
        MOV     R7,#0x4
        LJMP    ?FUNC_LEAVE_XDATA
          CFI EndBlock cfiBlock1

        RSEG NEAR_CODE:CODE:NOROOT(0)
// __near_func __xdata_reentrant void CLCommunic::delete ~CLCommunic(CLCommunic *)
`??delete ~CLCommunic`:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function `??delete ~CLCommunic`
        CODE
        FUNCALL `??delete ~CLCommunic`, `?~CLCommunic`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL `??delete ~CLCommunic`, `??operator delete`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x8
        LCALL   ?FUNC_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 8)
        ; Saved register size: 8
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     A,R6
        ORL     A,R7
        JZ      `??delete ~CLCommunic_1`
        ; Setup parameters for call to function CLCommunic::~CLCommunic()
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `?~CLCommunic`
        ; Setup parameters for call to function operator delete(void *)
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??operator delete`
`??delete ~CLCommunic_1`:
        MOV     R7,#0x1
        LJMP    ?FUNC_LEAVE_XDATA
          CFI EndBlock cfiBlock2
//   42 
//   43 
//   44 
//   45 //***********************CLCommunic(void)
//   46 //
//   47 //Description:Constructeur par defaut initialise la longeur du buffer, de la 
//   48 //            trame et positionne les pointeur  de la memoire allouer.
//   49 //           
//   50 //           
//   51 // NOM: CLCommunic::CLCommunic(void)
//   52 //           
//   53 // PARAMETRE D'ENTREE: Aucun
//   54 //                   
//   55 // 
//   56 //
//   57 // PARAMETRE DE SORTIE: Aucun              
//   58 //
//   59 //    
//   60 //
//   61 // DATE DE CREATION: 10 octobre 2013    AUTEUR: Gabriel Fortin-B
//   62 // DATE DE MODIFICATION:	
//   63 //*****************************************************************************

        RSEG NEAR_CODE:CODE:NOROOT(0)
//   64 CLCommunic::CLCommunic(void)
??CLCommunic:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function ??CLCommunic
        CODE
//   65 {
        FUNCALL ??CLCommunic, ??ucInitLongTrame
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??CLCommunic, `??operator new[]`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??CLCommunic, ??vInitBaudRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x8
        LCALL   ?FUNC_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 8)
        ; Saved register size: 8
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//   66   ucInitLongTrame(LONGEURTRAME);
        ; Setup parameters for call to function CLCommunic::ucInitLongTrame(UC)
        MOV     R1,#0x7
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ucInitLongTrame
        MOV     A,R1
//   67   
//   68   ucLongeurTampon = LONGEURBUFFER;
        MOV     DPTR,#??ucLongeurTampon
        MOV     A,#0x8
        MOVX    @DPTR,A
//   69   ucpDebutTampon = new(UC[LONGEURBUFFER]);
        ; Setup parameters for call to function operator new[](unsigned int)
        MOV     R2,#0x8
        MOV     R3,#0x0
        LCALL   `??operator new[]`
        MOV     DPTR,#??ucpDebutTampon
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//   70   ucpFinTampon = ucLongeurTrame + ucpDebutTampon;
        MOV     DPTR,#??ucLongeurTrame
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        MOV     DPTR,#??ucpDebutTampon
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     R1,A
        MOV     DPTR,#??ucpFinTampon
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//   71   ucpEcritureTampon = ucpDebutTampon;
        MOV     DPTR,#??ucpDebutTampon
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#??ucpEcritureTampon
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//   72   ucpLireTampon  = ucpDebutTampon;
        MOV     DPTR,#??ucpDebutTampon
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#??ucpLireTampon
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//   73  
//   74   vInitBaudRate(19200);
        ; Setup parameters for call to function CLCommunic::vInitBaudRate(UINT)
        MOV     R4,#0x0
        MOV     R5,#0x4b
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??vInitBaudRate
//   75 
//   76 }
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R7,#0x1
        LJMP    ?FUNC_LEAVE_XDATA
          CFI EndBlock cfiBlock3
//   77 
//   78 //***********************CLCommunic(UC ucLongBuf, UC ucLongTrame,UINT uiBaud)
//   79 //
//   80 //Description:Constructeur par defaut initialise la longeur du buffer, de la 
//   81 //            trame et positionne les pointeur  de la memoire allouer.
//   82 //           
//   83 //           
//   84 // NOM: CLCommunic::CLCommunic(UC ucLongBuf, UC ucLongTrame,UINT uiBaud)
//   85 //           
//   86 // PARAMETRE D'ENTREE: Aucun
//   87 //                   
//   88 // 
//   89 //
//   90 // PARAMETRE DE SORTIE: Aucun              
//   91 //
//   92 //    
//   93 //
//   94 // DATE DE CREATION: 10 octobre 2013    AUTEUR: Gabriel Fortin-B
//   95 // DATE DE MODIFICATION:	
//   96 //*****************************************************************************
//   97 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//   98 CLCommunic::CLCommunic(UC ucLongBuf, UC ucLongTrame,UINT uiBaud)
??CLCommunic_1:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function ??CLCommunic_1
        CODE
//   99 {
        FUNCALL ??CLCommunic_1, ??ucInitLongTrame
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??CLCommunic_1, `??operator new[]`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??CLCommunic_1, ??vInitBaudRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?FUNC_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 3,R1
        MOV     ?V0 + 2,R4
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
//  100   ucLongeurTampon = ucLongBuf;
        MOV     A,?V0 + 3
        MOV     DPTR,#??ucLongeurTampon
        MOVX    @DPTR,A
//  101   ucInitLongTrame(ucLongTrame);
        ; Setup parameters for call to function CLCommunic::ucInitLongTrame(UC)
        MOV     R1,?V0 + 2
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??ucInitLongTrame
        MOV     A,R1
//  102   
//  103   ucpDebutTampon = new(UC[ucLongeurTampon]);
        ; Setup parameters for call to function operator new[](unsigned int)
        MOV     DPTR,#??ucLongeurTampon
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        LCALL   `??operator new[]`
        MOV     DPTR,#??ucpDebutTampon
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  104   ucpFinTampon = (ucLongeurTampon + ucpDebutTampon) ;
        MOV     DPTR,#??ucLongeurTampon
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        MOV     DPTR,#??ucpDebutTampon
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     R1,A
        MOV     DPTR,#??ucpFinTampon
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  105   ucpEcritureTampon = ucpDebutTampon;
        MOV     DPTR,#??ucpDebutTampon
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#??ucpEcritureTampon
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  106   ucpLireTampon  = ucpDebutTampon;
        MOV     DPTR,#??ucpDebutTampon
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#??ucpLireTampon
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  107   vInitBaudRate(uiBaud);
        ; Setup parameters for call to function CLCommunic::vInitBaudRate(UINT)
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??vInitBaudRate
//  108 
//  109 }
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R7,#0x4
        LJMP    ?FUNC_LEAVE_XDATA
          CFI EndBlock cfiBlock4
//  110 
//  111 //***********************~CLCommunic(void)
//  112 //
//  113 //Description:Destructeur qui desalloue lA MEMOIRE
//  114 //           
//  115 //           
//  116 // NOM: CLCommunic::~CLCommunic(void)
//  117 //           
//  118 // PARAMETRE D'ENTREE: Aucun
//  119 //                   
//  120 // 
//  121 //
//  122 // PARAMETRE DE SORTIE: Aucun              
//  123 //
//  124 //    
//  125 //
//  126 // DATE DE CREATION: 10 octobre 2013    AUTEUR: Gabriel Fortin-B
//  127 // DATE DE MODIFICATION:	
//  128 //***************************************************************************** 
//  129 
//  130 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  131 CLCommunic::~CLCommunic(void)
`?~CLCommunic`:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function `?~CLCommunic`
        CODE
//  132 {
        FUNCALL `?~CLCommunic`, `??operator delete[]`
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 3)
          CFI CFA_SP SP+-3
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
//  133   delete[] ucpDebutTampon; 
        ; Setup parameters for call to function operator delete[](void *)
        MOV     DPTR,#??ucpDebutTampon
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??operator delete[]`
//  134 
//  135 }
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-2
        RET
          CFI EndBlock cfiBlock5
//  136 
//  137 
//  138 //***********************Fonction:ucInitLongTrame**************************
//  139 //
//  140 // Description:     Cette fonction initialise 
//  141 //
//  142 // Prototype: UC CLCommunic :: ucInitLongTrame(UC ucLong)
//  143 // 
//  144 // PARAMETRE D'ENTREE:Aucun
//  145 //
//  146 // PARAMETRE DE SORTIE:true or False            
//  147 //
//  148 //
//  149 //
//  150 // DATE DE CREATION: 26 septembre 2013    AUTEUR: Gabriel Fortin-B
//  151 // DATE DE MODIFICATION:	
//  152 //***************************************************************************** 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  153 UC CLCommunic :: ucInitLongTrame(UC ucLong)
??ucInitLongTrame:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function ??ucInitLongTrame
        CODE
//  154 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 3)
          CFI CFA_SP SP+-3
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,R1
        MOV     R2,A
//  155   if(ucLong < ucLongeurTampon)
        MOV     DPTR,#??ucLongeurTampon
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,R2
        CLR     C
        SUBB    A,R0
        JNC     ??ucInitLongTrame_1
//  156   {
//  157     ucLongeurTrame = ucLong;
        MOV     A,R2
        MOV     DPTR,#??ucLongeurTrame
        MOVX    @DPTR,A
//  158     return(1);    
        MOV     R1,#0x1
        SJMP    ??ucInitLongTrame_2
//  159   }
//  160   else
//  161   {
//  162    
//  163   return(0);
??ucInitLongTrame_1:
        MOV     R1,#0x0
??ucInitLongTrame_2:
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-2
        RET
          CFI EndBlock cfiBlock6
//  164   }
//  165 
//  166 }
//  167 
//  168 
//  169 //***********************Fonction:ucLireNbCaractRecu**************************
//  170 //
//  171 // Description:     Cette fonction retourne le nombre de caractere recu
//  172 //
//  173 // Prototype: UC ucLireNbCaractRecu(void);
//  174 // 
//  175 // PARAMETRE D'ENTREE:Aucun
//  176 //
//  177 // PARAMETRE DE SORTIE: ucNbCarctRecu              
//  178 //
//  179 //
//  180 //
//  181 // DATE DE CREATION: 26 septembre 2013    AUTEUR: Gabriel Fortin-B
//  182 // DATE DE MODIFICATION:	
//  183 //***************************************************************************** 
//  184 
//  185 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  186 UC CLCommunic :: ucLireNbCaractRecu(void)
??ucLireNbCaractRecu:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function ??ucLireNbCaractRecu
        CODE
//  187 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 3)
          CFI CFA_SP SP+-3
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
//  188 
//  189   return(ucCompteurCarac);
        MOV     DPTR,#??ucCompteurCarac
        MOVX    A,@DPTR
        MOV     R1,A
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-2
        RET
          CFI EndBlock cfiBlock7
//  190 
//  191 }
//  192 
//  193 
//  194 //***********************Fonction:ucLireEtatTrame******************************
//  195 //
//  196 // Description: Cette fonction retourne une variable contenant l'etat 
//  197 //              de trame qui indique si elle est recu         
//  198 //
//  199 // Prototype:UC CLCommunic :: ucLireEtatTrame(void);
//  200 // 
//  201 // PARAMETRE D'ENTREE:Aucun
//  202 //
//  203 // PARAMETRE DE SORTIE: ucTrameComplete              
//  204 //
//  205 //
//  206 //
//  207 // DATE DE CREATION: 26 septembre 2013    AUTEUR: Gabriel Fortin-B
//  208 // DATE DE MODIFICATION:	
//  209 //*****************************************************************************  
//  210 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  211 UC CLCommunic :: ucLireEtatTrame(void)
??ucLireEtatTrame:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function ??ucLireEtatTrame
        CODE
//  212 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 3)
          CFI CFA_SP SP+-3
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
//  213   return(ucTrameRecu);
        MOV     DPTR,#??ucTrameRecu
        MOVX    A,@DPTR
        MOV     R1,A
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-2
        RET
          CFI EndBlock cfiBlock8
//  214 
//  215 }
//  216 
//  217 
//  218 //***********************Fonction:*ucpLireTrame********************************
//  219 //
//  220 // Description:     Cette fonction retourne un pointeur sur le debut d'une 
//  221 //                  trame recu
//  222 //
//  223 // Prototype: UC * CLCommunic :: ucpLireTrame(void)
//  224 // 
//  225 // PARAMETRE D'ENTREE:Aucun
//  226 //
//  227 // PARAMETRE DE SORTIE: ucTampon              
//  228 //
//  229 //
//  230 //
//  231 // DATE DE CREATION: 26 septembre 2013    AUTEUR: Gabriel Fortin-B
//  232 // DATE DE MODIFICATION:	
//  233 //*****************************************************************************

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  234 UC * CLCommunic :: ucpLireTrame(void)
??ucpLireTrame:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function ??ucpLireTrame
        CODE
//  235 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 3)
          CFI CFA_SP SP+-3
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
//  236   
//  237    ucTrameRecu = INCOMPLETE;
        MOV     DPTR,#??ucTrameRecu
        MOV     A,#0x0
        MOVX    @DPTR,A
//  238   //if(ucValideTrame())
//  239   //{
//  240     return(ucpDebutTampon);
        MOV     DPTR,#??ucpDebutTampon
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-2
        RET
          CFI EndBlock cfiBlock9
//  241   //}
//  242   //else
//  243   //{
//  244   //  return(NULL);
//  245   
//  246   //}
//  247 
//  248 }
//  249 
//  250 
//  251 //***********************Fonction:vTransCaractere******************************
//  252 //
//  253 // Description:     Cette fonction permet D'envoyer un caractere sur le 
//  254 //                  port serie
//  255 //
//  256 // Prototype:void CLCommunic :: vTransCaractere(UC ucCar)
//  257 // 
//  258 // PARAMETRE D'ENTREE:ucCar 
//  259 //
//  260 // PARAMETRE DE SORTIE:Aucun              
//  261 //
//  262 //
//  263 // PROCEDURES APPELEES: vTransCaractere(ucCar);
//  264 //
//  265 // DATE DE CREATION: 26 septembre 2013    AUTEUR: Gabriel Fortin-B
//  266 // DATE DE MODIFICATION:	
//  267 //*****************************************************************************
//  268 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  269 void CLCommunic :: vTransCaractere(UC ucCar)
??vTransCaractere:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function ??vTransCaractere
        CODE
//  270 {
        ; Saved register size: 0
        ; Auto size: 0
//  271 
//  272    SBUF = ucCar;	   //place le caractere dans le buffer
        MOV     0x99,R1
//  273    while(TI_0 == 0);  //Polling du flag de transmission
??vTransCaractere_1:
        MOV     C,0x98.1
        JNC     ??vTransCaractere_1
//  274    TI_0 = 0;		   //Remise Flag a 0;
        CLR     0x98.1
//  275    
//  276    
//  277 }
        RET
          CFI EndBlock cfiBlock10
        REQUIRE SBUF
        REQUIRE _A_SCON
//  278 
//  279 
//  280 
//  281 //***********************Fonction:vTransCaractere******************************
//  282 //
//  283 // Description:     Cette fonction permet D'envoyer une chaine sur le 
//  284 //                  port serie
//  285 //
//  286 // 
//  287 // Prototype:void CLCommunic :: vTransCaractere(UC ucCar)
//  288 // 
//  289 // PARAMETRE D'ENTREE:char const * ucChaine)
//  290 //
//  291 // PARAMETRE DE SORTIE:Aucun              
//  292 //
//  293 //
//  294 //
//  295 // DATE DE CREATION: 26 septembre 2013    AUTEUR: Gabriel Fortin-B
//  296 // DATE DE MODIFICATION:	
//  297 //*****************************************************************************
//  298 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  299 void CLCommunic :: vTransString(char const * ucChaine)
??vTransString:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI Function ??vTransString
        CODE
//  300 {
        FUNCALL ??vTransString, ??vTransCaractere
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x8
        LCALL   ?FUNC_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 8)
        ; Saved register size: 8
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     DPL,R4
        MOV     DPH,R5
        SJMP    ??vTransString_1
//  301 
//  302   while(*ucChaine != 0)
//  303   {
//  304     vTransCaractere(*ucChaine);
??vTransString_2:
        ; Setup parameters for call to function CLCommunic::vTransCaractere(UC)
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??vTransCaractere
//  305     ucChaine ++; 
        INC     DPTR
//  306   
//  307   }
??vTransString_1:
        MOVX    A,@DPTR
        JNZ     ??vTransString_2
//  308 
//  309 }
        MOV     R7,#0x1
        LJMP    ?FUNC_LEAVE_XDATA
          CFI EndBlock cfiBlock11
//  310 
//  311 /*
//  312 ***********************Fonction:vInteruptSerial()****************************
//  313 //
//  314 // Description: Cette fonction permet de traiter une interuption serie
//  315 //
//  316 // NOM:__interrupt void  CLCommunic :: vInteruptSerial(void) 
//  317 // 
//  318 // PARAMETRE D'ENTREE:Aucun 
//  319 //
//  320 // PARAMETRE DE SORTIE:Aucun              
//  321 //
//  322 // DATE DE CREATION: 26 septembre 2013    AUTEUR: Gabriel Fortin-B
//  323 // DATE DE MODIFICATION:	
//  324 *****************************************************************************
//  325 
//  326 #pragma vector = 0x23
//  327  __interrupt void  CLCommunic :: vInteruptSerial(void)
//  328  {
//  329     EA = 0;        //Desactive les interuptions
//  330    
//  331    if(RI_0)       //Si Reception
//  332     {  
//  333        
//  334       if(ucpEcritureTampon == ucpFinTampon ) //Si Tampon est plein
//  335        {                                     //
//  336          ucpEcritureTampon = ucpDebutTampon; //Repartir a 0
//  337        }
//  338       
//  339       *ucpEcritureTampon = SBUF0; //Stocke le caractere recu dans tampon
//  340       ucpEcritureTampon = ucpEcritureTampon + 1;// increment une position dans tampon
//  341       if(ucCompteurCarac < (ucLongeurTampon-1)) //Si nombre caract recu est 
//  342        {                                   //inferieur a Trame
//  343           ucCompteurCarac = ucCompteurCarac +1;  //incremente le caractere
//  344           ucTrameRecu = INCOMPLETE;
//  345        }
//  346       else                                 //sinon
//  347        {
//  348         ucCompteurCarac = 0;          //Remettre caractere a 0
//  349         ucTrameRecu = COMPLETE;       //Trame complete vaut vrai
//  350         ucpEcritureTampon = ucpDebutTampon;
//  351         ucpLireTampon  = ucpDebutTampon;
//  352         //ucpLireTampon = ucpEcritureTampon - ucLongeurTrame;
//  353        }
//  354 
//  355 
//  356      
//  357     }
//  358      RI_0 = 0;                           //reinitialise flag reception
//  359      EA   = 1;                           // re initialise les interuptions
//  360      
//  361  
//  362  
//  363  }
//  364 
//  365 */
//  366 //***********************Fonction:vInitBaudRate********************************
//  367 //
//  368 // Description:     Cette fonction permet de d'initialiser le Baud rate aux  
//  369 //                  vitesse: 2400,488,9600,19200,28800,57600
//  370 //
//  371 //
//  372 // NOM:void CLCommunic :: vInitBaudRate(UINT uiBaud)
//  373 // 
//  374 // PARAMETRE D'ENTREE:UINT uiBaud
//  375 //
//  376 // PARAMETRE DE SORTIE:Aucun              
//  377 //
//  378 //
//  379 //
//  380 //
//  381 // DATE DE CREATION: 26 septembre 2013    AUTEUR: Gabriel Fortin-B
//  382 // DATE DE MODIFICATION:	
//  383 //*****************************************************************************

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  384 void CLCommunic :: vInitBaudRate(UINT uiBaud)
??vInitBaudRate:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI Function ??vInitBaudRate
        CODE
//  385 {
        MOV     A,#-0x9
        LCALL   ?FUNC_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  386  
//  387    SCON = 0x50;            // Met le registre SCON0 a 00
        MOV     0x98,#0x50
//  388    SM1_0 = 1;               //Mode asynchrone, generateur baud rate           
        SETB    0x98.6
//  389    REN_0 = 1;               //Active la reception
        SETB    0x98.4
//  390    TMOD= TMOD | 0x20;      //Timer 1 en 8 bit auto-relod
        ORL     0x89,#0x20
//  391    PCON = PCON| 0x80;      //vitesse doubler pour serie
        ORL     0x87,#0x80
//  392    TR1   = 1;               // Active timer 1 pour fonctionner le port serie
        SETB    0x88.6
//  393    TI_0  = 1;               // TI a 1  transmet un premier charactere
        SETB    0x98.1
//  394    EA = 1;                  //Active les interuptions 
        SETB    0xa8.7
//  395    RI_0 = 0;                  //initialise Reception
        CLR     0x98.0
//  396    ES0 = 1;                 //Active interuption serie
        SETB    0xa8.4
//  397    ET1 = 0;                 //Desactive timer 1
        CLR     0xa8.3
//  398 
//  399    switch(uiBaud)             //Condtion pour selectionner choix utilisateur
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        MOV     R0,#?V0 + 0
        LCALL   ?US_SWITCH_SPARSE
`?<Jumptable for vInitBaudRate>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        6
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        2400
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??vInitBaudRate_1
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        4800
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??vInitBaudRate_2
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        9600
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??vInitBaudRate_3
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        19200
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??vInitBaudRate_4
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        28800
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??vInitBaudRate_5
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        57600
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??vInitBaudRate_6
        DATA
        DATA16
        DATA
        DATA16
        DW        ??vInitBaudRate_7
        CODE
//  400     { 
//  401       case 2400: TH1 = 0xE8;      // Baud rate 2400
??vInitBaudRate_1:
        MOV     0x8d,#-0x18
//  402                  TL1 = 0xE8;      //
        MOV     0x8b,#-0x18
//  403                  break;           //
        SJMP    ??vInitBaudRate_7
//  404       case 4800: TH1 = 0xF4;      // Baud rate 4800
??vInitBaudRate_2:
        MOV     0x8d,#-0xc
//  405                  TL1 = 0xF4;      //
        MOV     0x8b,#-0xc
//  406                  break;           //
        SJMP    ??vInitBaudRate_7
//  407       case 9600: TH1 = 0xFA;      // Baud rate 9600
??vInitBaudRate_3:
        MOV     0x8d,#-0x6
//  408                  TL1 = 0xFA;      //
        MOV     0x8b,#-0x6
//  409                  break;           //
        SJMP    ??vInitBaudRate_7
//  410       case 19200:TH1 = 0xFD;      // Baud rate 19200
??vInitBaudRate_4:
        MOV     0x8d,#-0x3
//  411                  TL1 = 0xFD;      //
        MOV     0x8b,#-0x3
//  412                  break;           //
        SJMP    ??vInitBaudRate_7
//  413       case 28800:TH1 = 0xFE;      // Baud rate 28800
??vInitBaudRate_5:
        MOV     0x8d,#-0x2
//  414                  TL1 = 0xFE;       //
        MOV     0x8b,#-0x2
//  415                  break;           //
        SJMP    ??vInitBaudRate_7
//  416       case 57600:TH1 = 0xFF;      // Baud rate 57600
??vInitBaudRate_6:
        MOV     0x8d,#-0x1
//  417                  TL1 = 0xFF;      //
        MOV     0x8b,#-0x1
//  418                  break;           //
//  419 
//  420      
//  421    }
//  422 
//  423 
//  424 }
??vInitBaudRate_7:
        MOV     R7,#0x2
        LJMP    ?FUNC_LEAVE_XDATA
          CFI EndBlock cfiBlock12
        REQUIRE _A_SCON
        REQUIRE _A_TMOD
        REQUIRE _A_PCON
        REQUIRE _A_TCON
        REQUIRE _A_IE
        REQUIRE TH1
        REQUIRE TL1
//  425 
//  426 
//  427 
//  428 //***********************Fonction:ucValideTrame********************************
//  429 //
//  430 // Description: Cette fonction permet de verifier qu'une trame valide est recu
//  431 //
//  432 //
//  433 // NOM:void CLCommunic :: vInitBaudRate(UINT uiBaud)
//  434 // 
//  435 // PARAMETRE D'ENTREE:-
//  436 //
//  437 // PARAMETRE DE SORTIE:Aucun              
//  438 //
//  439 //
//  440 //
//  441 //
//  442 // DATE DE CREATION: 26 septembre 2013    AUTEUR: Gabriel Fortin-B
//  443 // DATE DE MODIFICATION:	
//  444 //*****************************************************************************
//  445 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  446 UC CLCommunic :: ucValideTrame(void)
??ucValideTrame:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI Function ??ucValideTrame
        CODE
//  447 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 3)
          CFI CFA_SP SP+-3
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
        SJMP    ??ucValideTrame_1
//  448   UC ucConte;
//  449   while(ucpLireTampon < ucpFinTampon )
//  450   {
//  451     ucConte = ucConte + *ucpLireTampon;
??ucValideTrame_2:
        MOV     DPTR,#??ucpLireTampon
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        ADD     A,R2
        MOV     R2,A
//  452     ucpLireTampon ++;
        MOV     DPTR,#??ucpLireTampon
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPTR,#??ucpLireTampon
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  453   } 
??ucValideTrame_1:
        MOV     DPTR,#??ucpLireTampon
        PUSH    DPL
          CFI CFA_SP SP+-5
        PUSH    DPH
          CFI CFA_SP SP+-6
        MOV     DPTR,#??ucpFinTampon
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        POP     DPH
          CFI CFA_SP SP+-5
        POP     DPL
          CFI CFA_SP SP+-4
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,R0
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R1
        JC      ??ucValideTrame_2
//  454   
//  455   if( ucConte == *ucpFinTampon)
        MOV     DPTR,#??ucpFinTampon
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        XRL     A,R2
        JNZ     ??ucValideTrame_3
//  456   {
//  457     return(1);
        MOV     R1,#0x1
        SJMP    ??ucValideTrame_4
//  458   
//  459   }
//  460 else
//  461   {
//  462     return(0);
??ucValideTrame_3:
        MOV     R1,#0x0
??ucValideTrame_4:
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-2
        RET
          CFI EndBlock cfiBlock13
//  463   }
//  464 
//  465 
//  466 }

        END
//  467 
//  468 //@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
// 
// 762 bytes in segment NEAR_CODE
//   8 bytes in segment SFR_AN
//  12 bytes in segment XDATA_Z
// 
// 762 bytes of CODE  memory
//   0 bytes of DATA  memory (+ 8 bytes shared)
//  12 bytes of XDATA memory
//
//Errors: none
//Warnings: none
