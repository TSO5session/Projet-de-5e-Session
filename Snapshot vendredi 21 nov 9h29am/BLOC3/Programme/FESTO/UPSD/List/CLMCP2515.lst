###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             11/Nov/2014  11:41:08 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  near                                               #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data                                               #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  C:\Users\1230838\Desktop\PROJETSESSION5\BLOC3\Prog #
#                          ramme\FESTO\Libraire\CLMCP2515.cpp                 #
#    Command line       =  C:\Users\1230838\Desktop\PROJETSESSION5\BLOC3\Prog #
#                          ramme\FESTO\Libraire\CLMCP2515.cpp -D UPSD3254A    #
#                          --preprocess=cl C:\Users\1230838\Desktop\PROJETSES #
#                          SION5\BLOC3\Programme\FESTO\UPSD\List\ -lC         #
#                          C:\Users\1230838\Desktop\PROJETSESSION5\BLOC3\Prog #
#                          ramme\FESTO\UPSD\List\ -lA                         #
#                          C:\Users\1230838\Desktop\PROJETSESSION5\BLOC3\Prog #
#                          ramme\FESTO\UPSD\List\ -o                          #
#                          C:\Users\1230838\Desktop\PROJETSESSION5\BLOC3\Prog #
#                          ramme\FESTO\UPSD\Obj\ -e --no_cse --no_unroll      #
#                          --no_inline --no_code_motion --no_tbaa --debug     #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=near --calling_convention=xdata_reent #
#                          rant --place_constants=data --nr_virtual_regs 8    #
#                          --dlib_config "C:\Program Files\IAR                #
#                          Systems\Embedded Workbench                         #
#                          6.4\8051\LIB\DLIB\dl8051Normal.h" -Ol --eec++      #
#    List file          =  C:\Users\1230838\Desktop\PROJETSESSION5\BLOC3\Prog #
#                          ramme\FESTO\UPSD\List\CLMCP2515.lst                #
#    Object file        =  C:\Users\1230838\Desktop\PROJETSESSION5\BLOC3\Prog #
#                          ramme\FESTO\UPSD\Obj\CLMCP2515.r51                 #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\1230838\Desktop\PROJETSESSION5\BLOC3\Programme\FESTO\Libraire\CLMCP2515.cpp
      1          // ***************** FICHIER:CLI2CPort.cpp
      2          //
      3          //  Description:Contient les fonctions haut niveau pour communiquer avec 
      4          //              l I2C.
      5          //             
      6          //
      7          //  Application realisee avec IAR
      8          //
      9          //  AUTEUR : Gabriel Fortin-Belanger
     10          //  DATE CREATION :    2014-02-07		 VERSION: 1.0
     11          //  DATE MODIFICATION: ****-**-**
     12          //
     13          //******************************************************************************
     14          #include "_DeclarationGenerale.h"

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1
     15          #include "CLMCP2515.h"

  unsigned char CLMCP2515 :: LireDonnesMCP2515(unsigned char NombreDonneesEnvoyer, unsigned char Donnee1, unsigned char Donnee2, unsigned char Donnee3);
                ^
"C:\Users\1230838\Desktop\PROJETSESSION5\BLOC3\Programme\FESTO\Libraire\CLMCP2515.h",33  Warning[Pe427]: 
          qualified name is not allowed in member declaration
     16          
     17          
     18          #define MCP2515_RXF0SIDH	0x00
     19          #define MCP2515_RXF0SIDL	0x01
     20          #define MCP2515_RXF0EID8	0x02
     21          #define MCP2515_RXF0EID0	0x03
     22          #define MCP2515_RXF1SIDH	0x04
     23          #define MCP2515_RXF1SIDL	0x05
     24          #define MCP2515_RXF1EID8	0x06
     25          #define MCP2515_RXF1EID0	0x07
     26          #define MCP2515_RXF2SIDH	0x08
     27          #define MCP2515_RXF2SIDL	0x09
     28          #define MCP2515_RXF2EID8	0x0A
     29          #define MCP2515_RXF2EID0	0x0B
     30          #define MCP2515_CANSTAT		0x0E
     31          #define MCP2515_CANCTRL		0x0F
     32          #define MCP2515_RXF3SIDH	0x10
     33          #define MCP2515_RXF3SIDL	0x11
     34          #define MCP2515_RXF3EID8	0x12
     35          #define MCP2515_RXF3EID0	0x13
     36          #define MCP2515_RXF4SIDH	0x14
     37          #define MCP2515_RXF4SIDL	0x15
     38          #define MCP2515_RXF4EID8	0x16
     39          #define MCP2515_RXF4EID0	0x17
     40          #define MCP2515_RXF5SIDH	0x18
     41          #define MCP2515_RXF5SIDL	0x19
     42          #define MCP2515_RXF5EID8	0x1A
     43          #define MCP2515_RXF5EID0	0x1B
     44          #define MCP2515_TEC			0x1C
     45          #define MCP2515_REC			0x1D
     46          #define MCP2515_RXM0SIDH	0x20
     47          #define MCP2515_RXM0SIDL	0x21
     48          #define MCP2515_RXM0EID8	0x22
     49          #define MCP2515_RXM0EID0	0x23
     50          #define MCP2515_RXM1SIDH	0x24
     51          #define MCP2515_RXM1SIDL	0x25
     52          #define MCP2515_RXM1EID8	0x26
     53          #define MCP2515_RXM1EID0	0x27
     54          #define MCP2515_CNF3		0x28
     55          #define MCP2515_CNF2		0x29
     56          #define MCP2515_CNF1		0x2A
     57          #define MCP2515_CANINTE		0x2B
     58          #define MCP2515_CANINTF		0x2C
     59          #define MCP2515_EFLG		0x2D
     60          #define MCP2515_TXB1CTRL	0x40
     61          #define MCP2515_TXB2CTRL	0x50
     62          #define MCP2515_RXB0CTRL	0x60
     63          #define MCP2515_RXB0SIDH	0x61
     64          #define MCP2515_RXB1CTRL	0x70
     65          #define MCP2515_RXB1SIDH	0x71
     66          
     67          
     68          #define MCP2515_TX_INT		0x1C
     69          #define MCP2515_TX01_INT	0x0C
     70          #define MCP2515_RX_INT		0x03
     71          #define MCP2515_NO_INT		0x00
     72          
     73          #define MCP2515_TX01_MASK	0x14
     74          #define MCP2515_TX_MASK		0x54
     75          
     76          
     77          
     78          #define MCP2515_WRITE		0x02
     79          
     80          #define MCP2515_READ		0x03
     81          
     82          #define MCP2515_BITMOD		0x05
     83          
     84          #define MCP2515_LOAD_TX0	0x40
     85          #define MCP2515_LOAD_TX1	0x42
     86          #define MCP2515_LOAD_TX2	0x44
     87          
     88          #define MCP2515_RTS_TX0		0x81
     89          #define MCP2515_RTS_TX1		0x82
     90          #define MCP2515_RTS_TX2		0x84
     91          #define MCP2515_RTS_ALL		0x87
     92          
     93          #define MCP2515_READ_RX0	0x90
     94          #define MCP2515_READ_RX1	0x94
     95          
     96          #define MCP2515_READ_STATUS	0xA0
     97          
     98          #define MCP2515_RX_STATUS	0xB0
     99          
    100          #define MCP2515_RESET		0xC0
    101          
    102          
    103          
    104          #define MODE_NORMAL     0x00
    105          #define MODE_SLEEP      0x20
    106          #define MODE_LOOPBACK   0x40
    107          #define MODE_LISTENONLY 0x60
    108          #define MODE_CONFIG     0x80
    109          #define MODE_POWERUP	0xE0
    110          #define MODE_MASK		0xE0
    111          #define ABORT_TX        0x10
    112          #define MODE_ONESHOT	0x08
    113          #define CLKOUT_ENABLE	0x04
    114          #define CLKOUT_DISABLE	0x00
    115          #define CLKOUT_PS1		0x00
    116          #define CLKOUT_PS2		0x01
    117          #define CLKOUT_PS4		0x02
    118          #define CLKOUT_PS8		0x03
    119          
    120          
    121          
    122          #define SJW1            0x00
    123          #define SJW2            0x40
    124          #define SJW3            0x80
    125          #define SJW4            0xC0
    126          
    127          
    128          
    129          #define BTLMODE			0x80
    130          #define SAMPLE_1X       0x00
    131          #define SAMPLE_3X       0x40
    132          
    133          
    134          
    135          #define SOF_ENABLE		0x80
    136          #define SOF_DISABLE		0x00
    137          #define WAKFIL_ENABLE	0x40
    138          #define WAKFIL_DISABLE	0x00
    139          
    140          
    141          
    142          #define MCP2515_RX0IF		0x01
    143          #define MCP2515_RX1IF		0x02
    144          #define MCP2515_TX0IF		0x04
    145          #define MCP2515_TX1IF		0x08
    146          #define MCP2515_TX2IF		0x10
    147          #define MCP2515_ERRIF		0x20
    148          #define MCP2515_WAKIF		0x40
    149          #define MCP2515_MERRF		0x80
    150          
    151          
    152          /* Registres permettant de contrôler le module d'envoi « TX0 » */
    153          
    154          #define MCP2515_TXB0CTRL	0x30
    155          #define MCP2515_TXB0SIDH	0x31
    156          #define MCP2515_TXB0SIDL	0x32
    157          #define MCP2515_TXB0EID8	0x33
    158          #define MCP2515_TXB0EID0	0x34
    159          #define MCP2515_TXB0DLC	0x35
    160          #define MCP2515_TXB0D0	0x36
    161          #define MCP2515_TXB0D1	0x37
    162          #define MCP2515_TXB0D2	0x38
    163          #define MCP2515_TXB0D3	0x39
    164          #define MCP2515_TXB0D4	0x3A
    165          #define MCP2515_TXB0D5	0x3B
    166          #define MCP2515_TXB0D6	0x3C
    167          #define MCP2515_TXB0D7	0x3D
    168          #define MCP2515_TXB0CANSTAT	0x3E
    169          #define MCP2515_TXB0CANCTRL	0x3F
    170          
    171          
    172          /* Registres permettant de contrôler le module de réception « RX0 » */
    173          
    174          #define MCP2515_RXB0CTRL	0x60
    175          #define MCP2515_RXB0SIDH	0x61
    176          #define MCP2515_RXB0SIDL	0x62
    177          #define MCP2515_RXB0EID8	0x63
    178          #define MCP2515_RXB0EID0	0x64
    179          #define MCP2515_RXB0DLC	0x65
    180          #define MCP2515_RXB0D0	0x66
    181          #define MCP2515_RXB0D1	0x67
    182          #define MCP2515_RXB0D2	0x68
    183          #define MCP2515_RXB0D3	0x69
    184          #define MCP2515_RXB0D4	0x6A
    185          #define MCP2515_RXB0D5	0x6B
    186          #define MCP2515_RXB0D6	0x6C
    187          #define MCP2515_RXB0D7	0x6D
    188          #define MCP2515_RXB0CANSTAT	0x6E
    189          #define MCP2515_RXB0CANCTRL	0x6F
    190          
    191          
    192          #define MCP2515_BFPCTRL		0x0C
    193          #define MCP2515_TXRTSCTRL	0x0D
    194          #define MCP2515_CHOIX_IDENTIFIANT 0x05
    195          
    196          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    197          CLMCP2515 :: CLMCP2515(void)
   \                     ??CLMCP2515:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
    198          {
   \   000008                ; Setup parameters for call to function CLSPI::CLSPI()
   \   000008   AA82         MOV     R2,DPL
   \   00000A   AB83         MOV     R3,DPH
   \   00000C   12....       LCALL   ??CLSPI
    199          
    200           
    201          }
   \   00000F   AA82         MOV     R2,DPL
   \   000011   AB83         MOV     R3,DPH
   \   000013   D083         POP     DPH
   \   000015   D082         POP     DPL
   \   000017   22           RET
    202          
    203          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    204          CLMCP2515 :: ~CLMCP2515(void)
   \                     `?~CLMCP2515`:
    205          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    206          
    207          
    208          }
   \   000000                ; Setup parameters for call to function CLSPI::~CLSPI()
   \   000000   02....       LJMP    `?~CLSPI`
    209          
    210          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    211          void CLMCP2515 :: InitialisationMCP2515(void)
   \                     ??InitialisationMCP2515:
    212          {
   \   000000   74F8         MOV     A,#-0x8
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 8
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    213          	/* Envoi de la commande de « RESET », qui consiste en l'envoi de l'octet « 0xC0 », par le bus SPI. */
    214          	EcrireDonnesMCP2515(1, MCP2515_RESET, 0x00, 0x00);
   \   000009                ; Setup parameters for call to function CLMCP2515::EcrireDonnesMCP2515(unsigned char, unsigned char, unsigned char, unsigned char)
   \   000009   75..00       MOV     ?V0 + 0,#0x0
   \   00000C   78..         MOV     R0,#?V0 + 0
   \   00000E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000011   7D00         MOV     R5,#0x0
   \   000013   7CC0         MOV     R4,#-0x40
   \   000015   7901         MOV     R1,#0x1
   \   000017   EE           MOV     A,R6
   \   000018   FA           MOV     R2,A
   \   000019   EF           MOV     A,R7
   \   00001A   FB           MOV     R3,A
   \   00001B   12....       LCALL   ??EcrireDonnesMCP2515
   \   00001E   7401         MOV     A,#0x1
   \   000020   12....       LCALL   ?DEALLOC_XSTACK8
   \   000023   E9           MOV     A,R1
    215          	
    216          	Delai(1000);	/* Délai permettant de s'assurer que le cicruit « MCP2515 » soit bien réinitialisé. */
   \   000024                ; Setup parameters for call to function CLMCP2515::Delai(unsigned long)
   \   000024   90....       MOV     DPTR,#__Constant_3e8
   \   000027   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00002A   EE           MOV     A,R6
   \   00002B   FA           MOV     R2,A
   \   00002C   EF           MOV     A,R7
   \   00002D   FB           MOV     R3,A
   \   00002E   12....       LCALL   ??Delai
   \   000031   7404         MOV     A,#0x4
   \   000033   12....       LCALL   ?DEALLOC_XSTACK8
    217          
    218          
    219          
    220          /* Passage du circuit MCP2515 en « Configuration mode », nécéssaire pour pouvoir effectuer les opérations de configurations qui suivent */
    221          
    222          	EcrireRegistreMCP2515(MCP2515_CANCTRL, 0x87);	/* Registre 0x0F.
   \   000036                ; Setup parameters for call to function CLMCP2515::EcrireRegistreMCP2515(unsigned char, unsigned char)
   \   000036   7C87         MOV     R4,#-0x79
   \   000038   790F         MOV     R1,#0xf
   \   00003A   EE           MOV     A,R6
   \   00003B   FA           MOV     R2,A
   \   00003C   EF           MOV     A,R7
   \   00003D   FB           MOV     R3,A
   \   00003E   12....       LCALL   ??EcrireRegistreMCP2515
    223          									  - REQOP2 = 1,
    224          									  - REQOP1 = 0,
    225          									  - REQOP0 = 0 : le circuit est passé en « Configuration mode »,
    226          									  - ABAT = 0 : ne pas annuler toutes les transmissons en attentes, si nécéssaire,
    227          									  - OSM : renvois des messages, si nécessaire,
    228          									  - CLKEN = 1 : la broche « CLKOUT » est activée,
    229          									  - CLKPRE1 = 1,
    230          									  - CLKPRE0 = 1 : réglage du prédiviseur de l'horloge de la broche « CLKOUT » à 8,
    231          									  - F_CLKOUT = System Clock / 8 */
    232          
    233          	EcrireRegistreMCP2515(MCP2515_TX01_INT, 0x3C); /* Registre 0x0C */
   \   000041                ; Setup parameters for call to function CLMCP2515::EcrireRegistreMCP2515(unsigned char, unsigned char)
   \   000041   7C3C         MOV     R4,#0x3c
   \   000043   790C         MOV     R1,#0xc
   \   000045   EE           MOV     A,R6
   \   000046   FA           MOV     R2,A
   \   000047   EF           MOV     A,R7
   \   000048   FB           MOV     R3,A
   \   000049   12....       LCALL   ??EcrireRegistreMCP2515
    234          	EcrireRegistreMCP2515(MCP2515_TXRTSCTRL, 0x00); /* Registre 0x0D.
   \   00004C                ; Setup parameters for call to function CLMCP2515::EcrireRegistreMCP2515(unsigned char, unsigned char)
   \   00004C   7C00         MOV     R4,#0x0
   \   00004E   790D         MOV     R1,#0xd
   \   000050   EE           MOV     A,R6
   \   000051   FA           MOV     R2,A
   \   000052   EF           MOV     A,R7
   \   000053   FB           MOV     R3,A
   \   000054   12....       LCALL   ??EcrireRegistreMCP2515
    235          									L'envoi d'un message - RTS - ne se fait pas sur le passage à « 0 » d'une broche,
    236          									mais après l'envoi de la commande « RTS », par l'intermédiaire du bus SPI */
    237          
    238          
    239          /* Initialisations des registres des compteurs d'erreurs */
    240          
    241          	EcrireRegistreMCP2515(MCP2515_TEC, 0x00); /* Registre 0x1C.
   \   000057                ; Setup parameters for call to function CLMCP2515::EcrireRegistreMCP2515(unsigned char, unsigned char)
   \   000057   7C00         MOV     R4,#0x0
   \   000059   791C         MOV     R1,#0x1c
   \   00005B   EE           MOV     A,R6
   \   00005C   FA           MOV     R2,A
   \   00005D   EF           MOV     A,R7
   \   00005E   FB           MOV     R3,A
   \   00005F   12....       LCALL   ??EcrireRegistreMCP2515
    242          								 Mise à zéro du compteur d'erreurs en émission.*/
    243          	EcrireRegistreMCP2515(MCP2515_REC, 0x00); /* Registre 0x1D.
   \   000062                ; Setup parameters for call to function CLMCP2515::EcrireRegistreMCP2515(unsigned char, unsigned char)
   \   000062   7C00         MOV     R4,#0x0
   \   000064   791D         MOV     R1,#0x1d
   \   000066   EE           MOV     A,R6
   \   000067   FA           MOV     R2,A
   \   000068   EF           MOV     A,R7
   \   000069   FB           MOV     R3,A
   \   00006A   12....       LCALL   ??EcrireRegistreMCP2515
    244          								 Mise à zéro du compteur d'erreurs en réception.*/
    245          
    246          
    247          	
    248          /* Configurations du « Bit Timing » */
    249          							
    250          	EcrireRegistreMCP2515(MCP2515_CNF1, 0xC0 ); /* Registre 0x2A.
   \   00006D                ; Setup parameters for call to function CLMCP2515::EcrireRegistreMCP2515(unsigned char, unsigned char)
   \   00006D   7CC0         MOV     R4,#-0x40
   \   00006F   792A         MOV     R1,#0x2a
   \   000071   EE           MOV     A,R6
   \   000072   FA           MOV     R2,A
   \   000073   EF           MOV     A,R7
   \   000074   FB           MOV     R3,A
   \   000075   12....       LCALL   ??EcrireRegistreMCP2515
    251          									 - SJW = 0 : 1 x TQ,
    252          									 - BRP = 3. */
    253          	EcrireRegistreMCP2515(MCP2515_CNF2, 0x88); /* Registre 0x29.
   \   000078                ; Setup parameters for call to function CLMCP2515::EcrireRegistreMCP2515(unsigned char, unsigned char)
   \   000078   7C88         MOV     R4,#-0x78
   \   00007A   7929         MOV     R1,#0x29
   \   00007C   EE           MOV     A,R6
   \   00007D   FA           MOV     R2,A
   \   00007E   EF           MOV     A,R7
   \   00007F   FB           MOV     R3,A
   \   000080   12....       LCALL   ??EcrireRegistreMCP2515
    254          									 - BTLMODE = 1,
    255          									 - SAM = 0,
    256          									 - PHSEG1 = 2,
    257          									 - PRSEG = 0. */
    258          	EcrireRegistreMCP2515(MCP2515_CNF3, 0x03 ); /* Registre 0x28.
   \   000083                ; Setup parameters for call to function CLMCP2515::EcrireRegistreMCP2515(unsigned char, unsigned char)
   \   000083   7C03         MOV     R4,#0x3
   \   000085   7928         MOV     R1,#0x28
   \   000087   EE           MOV     A,R6
   \   000088   FA           MOV     R2,A
   \   000089   EF           MOV     A,R7
   \   00008A   FB           MOV     R3,A
   \   00008B   12....       LCALL   ??EcrireRegistreMCP2515
    259          									 - SOF = 0 : Broche « CLKOUT » activée pour la fonction de répétition de l'horloge,
    260          									 - WAKFIL = 0 : Wake-up filter désactivé,
    261          									 - PHSEG : 2. */
    262          
    263          
    264          
    265          /* Configurations des interruptions du circuit MCP2515 */
    266          
    267          	EcrireRegistreMCP2515(MCP2515_CANINTE, 0x01); /* Registre 0x2B.
   \   00008E                ; Setup parameters for call to function CLMCP2515::EcrireRegistreMCP2515(unsigned char, unsigned char)
   \   00008E   7C01         MOV     R4,#0x1
   \   000090   792B         MOV     R1,#0x2b
   \   000092   EE           MOV     A,R6
   \   000093   FA           MOV     R2,A
   \   000094   EF           MOV     A,R7
   \   000095   FB           MOV     R3,A
   \   000096   12....       LCALL   ??EcrireRegistreMCP2515
    268          									 Autorisation des interruptions suite à la réception d'une donnée par le module « RXB0 ». */
    269          
    270          	EcrireRegistreMCP2515(MCP2515_CANINTF, 0x00); /* Registre 0x2C.
   \   000099                ; Setup parameters for call to function CLMCP2515::EcrireRegistreMCP2515(unsigned char, unsigned char)
   \   000099   7C00         MOV     R4,#0x0
   \   00009B   792C         MOV     R1,#0x2c
   \   00009D   EE           MOV     A,R6
   \   00009E   FA           MOV     R2,A
   \   00009F   EF           MOV     A,R7
   \   0000A0   FB           MOV     R3,A
   \   0000A1   12....       LCALL   ??EcrireRegistreMCP2515
    271          								     Acquittement des éventuelles interruptions qui seraient en attente .*/
    272          	
    273          	EcrireRegistreMCP2515(MCP2515_EFLG, 0x00); /* Registre 0x2D */
   \   0000A4                ; Setup parameters for call to function CLMCP2515::EcrireRegistreMCP2515(unsigned char, unsigned char)
   \   0000A4   7C00         MOV     R4,#0x0
   \   0000A6   792D         MOV     R1,#0x2d
   \   0000A8   EE           MOV     A,R6
   \   0000A9   FA           MOV     R2,A
   \   0000AA   EF           MOV     A,R7
   \   0000AB   FB           MOV     R3,A
   \   0000AC   12....       LCALL   ??EcrireRegistreMCP2515
    274          
    275          	EcrireRegistreMCP2515(MCP2515_RXB0CTRL, 0x20); /* Registre 0x60 */
   \   0000AF                ; Setup parameters for call to function CLMCP2515::EcrireRegistreMCP2515(unsigned char, unsigned char)
   \   0000AF   7C20         MOV     R4,#0x20
   \   0000B1   7960         MOV     R1,#0x60
   \   0000B3   EE           MOV     A,R6
   \   0000B4   FA           MOV     R2,A
   \   0000B5   EF           MOV     A,R7
   \   0000B6   FB           MOV     R3,A
   \   0000B7   12....       LCALL   ??EcrireRegistreMCP2515
    276          	
    277          	
    278          
    279          /* Configuration initiale du module « TXB0 » */
    280          
    281          	EcrireRegistreMCP2515(MCP2515_TXB0CTRL, 0x03); /* Registre 0x30.
   \   0000BA                ; Setup parameters for call to function CLMCP2515::EcrireRegistreMCP2515(unsigned char, unsigned char)
   \   0000BA   7C03         MOV     R4,#0x3
   \   0000BC   7930         MOV     R1,#0x30
   \   0000BE   EE           MOV     A,R6
   \   0000BF   FA           MOV     R2,A
   \   0000C0   EF           MOV     A,R7
   \   0000C1   FB           MOV     R3,A
   \   0000C2   12....       LCALL   ??EcrireRegistreMCP2515
    282          								      TXP = 0b11 : les messages ont la plus haute priorité. */
    283          
    284          	EcrireRegistreMCP2515(MCP2515_TXB0DLC, 0x01); /* Registre 0x35.
   \   0000C5                ; Setup parameters for call to function CLMCP2515::EcrireRegistreMCP2515(unsigned char, unsigned char)
   \   0000C5   7C01         MOV     R4,#0x1
   \   0000C7   7935         MOV     R1,#0x35
   \   0000C9   EE           MOV     A,R6
   \   0000CA   FA           MOV     R2,A
   \   0000CB   EF           MOV     A,R7
   \   0000CC   FB           MOV     R3,A
   \   0000CD   12....       LCALL   ??EcrireRegistreMCP2515
    285          								     Nombre d'octets occupés par les données à envoyer : 1 octet.*/
    286          
    287          
    288          									 
    289          /* Configurations de l'identifiant en réception par le filtre 0 du circuit MCP2515 */
    290          		
    291          	EcrireRegistreMCP2515(MCP2515_RXF0SIDH, 0x00);	/* Registre 0x00.
   \   0000D0                ; Setup parameters for call to function CLMCP2515::EcrireRegistreMCP2515(unsigned char, unsigned char)
   \   0000D0   7C00         MOV     R4,#0x0
   \   0000D2   7900         MOV     R1,#0x0
   \   0000D4   EE           MOV     A,R6
   \   0000D5   FA           MOV     R2,A
   \   0000D6   EF           MOV     A,R7
   \   0000D7   FB           MOV     R3,A
   \   0000D8   12....       LCALL   ??EcrireRegistreMCP2515
    292          									   Identifiant initial de réception H. */
    293          
    294          	EcrireRegistreMCP2515(MCP2515_RXF0SIDL, 0xC0);	/* Registre 0x01.
   \   0000DB                ; Setup parameters for call to function CLMCP2515::EcrireRegistreMCP2515(unsigned char, unsigned char)
   \   0000DB   7CC0         MOV     R4,#-0x40
   \   0000DD   7901         MOV     R1,#0x1
   \   0000DF   EE           MOV     A,R6
   \   0000E0   FA           MOV     R2,A
   \   0000E1   EF           MOV     A,R7
   \   0000E2   FB           MOV     R3,A
   \   0000E3   12....       LCALL   ??EcrireRegistreMCP2515
    295          									   Identifiant initial de réception L + configurations initiales du mode de fonctionnement des identifiants en réceptions. */
    296          
    297          
    298          
    299          /* Configurations du masque de réception initial utilisé par le filtre 0 du circuit MCP2515 */
    300          
    301          	EcrireRegistreMCP2515(MCP2515_RXM0SIDH, 0x00);	/* Registre 0x20.
   \   0000E6                ; Setup parameters for call to function CLMCP2515::EcrireRegistreMCP2515(unsigned char, unsigned char)
   \   0000E6   7C00         MOV     R4,#0x0
   \   0000E8   7920         MOV     R1,#0x20
   \   0000EA   EE           MOV     A,R6
   \   0000EB   FA           MOV     R2,A
   \   0000EC   EF           MOV     A,R7
   \   0000ED   FB           MOV     R3,A
   \   0000EE   12....       LCALL   ??EcrireRegistreMCP2515
    302          									   Masque de réception initial H. */
    303          									   
    304          	EcrireRegistreMCP2515(MCP2515_RXM0SIDL, 0xE0);	/* Registre 0x21.
   \   0000F1                ; Setup parameters for call to function CLMCP2515::EcrireRegistreMCP2515(unsigned char, unsigned char)
   \   0000F1   7CE0         MOV     R4,#-0x20
   \   0000F3   7921         MOV     R1,#0x21
   \   0000F5   EE           MOV     A,R6
   \   0000F6   FA           MOV     R2,A
   \   0000F7   EF           MOV     A,R7
   \   0000F8   FB           MOV     R3,A
   \   0000F9   12....       LCALL   ??EcrireRegistreMCP2515
    305          									   Masque de réception initial L. + configurations initiales du mode de fonctionnement des masque de réceptions. */
    306          
    307          
    308          
    309          
    310          /* Configurations de l'identifiant en émission par le module « TXB0 » du circuit MCP2515 */
    311          
    312          	EcrireRegistreMCP2515(MCP2515_TXB0SIDH, 0x00);	/* Registre 0x31.
   \   0000FC                ; Setup parameters for call to function CLMCP2515::EcrireRegistreMCP2515(unsigned char, unsigned char)
   \   0000FC   7C00         MOV     R4,#0x0
   \   0000FE   7931         MOV     R1,#0x31
   \   000100   EE           MOV     A,R6
   \   000101   FA           MOV     R2,A
   \   000102   EF           MOV     A,R7
   \   000103   FB           MOV     R3,A
   \   000104   12....       LCALL   ??EcrireRegistreMCP2515
    313          									   Identifiant initial d'émission H. */
    314          
    315          	EcrireRegistreMCP2515(MCP2515_TXB0SIDL, 0x00);	/* Registre 0x32.
   \   000107                ; Setup parameters for call to function CLMCP2515::EcrireRegistreMCP2515(unsigned char, unsigned char)
   \   000107   7C00         MOV     R4,#0x0
   \   000109   7932         MOV     R1,#0x32
   \   00010B   EE           MOV     A,R6
   \   00010C   FA           MOV     R2,A
   \   00010D   EF           MOV     A,R7
   \   00010E   FB           MOV     R3,A
   \   00010F   12....       LCALL   ??EcrireRegistreMCP2515
    316          									   Identifiant initial d'émission L + configurations initiales du mode de fonctionnement des identifiants en émissions. */
    317          
    318          	
    319          /* Passage du circuit MCP2515 en « Normal Operation mode » */
    320          	EcrireRegistreMCP2515(MCP2515_CANCTRL, 0x07); /* Registre 0x0F
   \   000112                ; Setup parameters for call to function CLMCP2515::EcrireRegistreMCP2515(unsigned char, unsigned char)
   \   000112   7C07         MOV     R4,#0x7
   \   000114   790F         MOV     R1,#0xf
   \   000116   EE           MOV     A,R6
   \   000117   FA           MOV     R2,A
   \   000118   EF           MOV     A,R7
   \   000119   FB           MOV     R3,A
   \   00011A   12....       LCALL   ??EcrireRegistreMCP2515
    321          	//EcrireRegistreMCP2515(MCP2515_CANCTRL, 0x07); * Registre 0x0F.
    322          								      - REQOP2 = 1,
    323          								      - REQOP1 = 0,
    324          								      - REQOP0 = 0 : le circuit est passé en « Normal Operation mode ». 
    325          								      - Les réglages précédemment évoqués restent inchangés. */
    326          
    327          }
   \   00011D   7F01         MOV     R7,#0x1
   \   00011F   02....       LJMP    ?FUNC_LEAVE_XDATA
    328          
    329          
    330          
    331          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    332          void CLMCP2515 :: EcrireRegistreMCP2515(unsigned char Address, unsigned char Data)
   \                     ??EcrireRegistreMCP2515:
    333          {
   \   000000   74F8         MOV     A,#-0x8
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 8
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
   \   000007   EC           MOV     A,R4
   \   000008   FE           MOV     R6,A
    334          	EcrireDonnesMCP2515(3, MCP2515_WRITE, Address, Data);	/* Envoi de 3 octets :
   \   000009                ; Setup parameters for call to function CLMCP2515::EcrireDonnesMCP2515(unsigned char, unsigned char, unsigned char, unsigned char)
   \   000009   F5..         MOV     ?V0 + 0,A
   \   00000B   78..         MOV     R0,#?V0 + 0
   \   00000D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000010   EF           MOV     A,R7
   \   000011   FD           MOV     R5,A
   \   000012   7C02         MOV     R4,#0x2
   \   000014   7903         MOV     R1,#0x3
   \   000016   12....       LCALL   ??EcrireDonnesMCP2515
   \   000019   7401         MOV     A,#0x1
   \   00001B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00001E   E9           MOV     A,R1
    335          													- La commande d'écriture ;
    336          													- L'adresse du registre dans lequel écrire ;
    337          													- L'octet à écrire dans le registre. */
    338          }
   \   00001F   7F01         MOV     R7,#0x1
   \   000021   02....       LJMP    ?FUNC_LEAVE_XDATA
    339          
    340          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    341          UC CLMCP2515 :: LireRegistreMCP2515(unsigned char Address)
   \                     ??LireRegistreMCP2515:
    342          {
   \   000000   74F8         MOV     A,#-0x8
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 8
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    343           // EcrireDonnesMCP2515(3, MCP2515_READ, Address, 0xFF);
    344            return(LireDonnesMCP2515(3, MCP2515_READ, Address, 0xFF));	/* Envoi de 3 octets :
   \   000007                ; Setup parameters for call to function CLMCP2515::LireDonnesMCP2515(unsigned char, unsigned char, unsigned char, unsigned char)
   \   000007   75..FF       MOV     ?V0 + 0,#-0x1
   \   00000A   78..         MOV     R0,#?V0 + 0
   \   00000C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00000F   EE           MOV     A,R6
   \   000010   FD           MOV     R5,A
   \   000011   7C03         MOV     R4,#0x3
   \   000013   7903         MOV     R1,#0x3
   \   000015   12....       LCALL   ??LireDonnesMCP2515
   \   000018   7401         MOV     A,#0x1
   \   00001A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00001D   7F01         MOV     R7,#0x1
   \   00001F   02....       LJMP    ?FUNC_LEAVE_XDATA
    345           													//- La commande d'écriture ;
    346          													- L'adresse du registre dans lequel écrire													- L'octet à écrire dans le registre. */
    347          }
    348          
    349          
    350          
    351          /* Configuration de l'identifiant d'envoi utilisé par le module « TXB0 ».
    352          
    353          
    354          Paramètres d'entrée :
    355          
    356          int identifiant - Identifiant, sur 11 bits, que doit utiliser le module « TXB0 ».
    357          
    358          Valeur de retour :
    359          
    360          Aucune.
    361          */

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    362          void CLMCP2515 :: ChoisirIdentifiantTX0(int Identifiant)
   \                     ??ChoisirIdentifiantTX0:
    363          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FA           MOV     R2,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FB           MOV     R3,A
    364          	unsigned char Contenu_MCP2515_TXB0SIDH = 0;
   \   00000D   7C00         MOV     R4,#0x0
    365          	unsigned char Contenu_MCP2515_TXB0SIDL = 0;
   \   00000F   7E00         MOV     R6,#0x0
    366          
    367          	Contenu_MCP2515_TXB0SIDH = (unsigned char)(0x00FF & (Identifiant >> 3));	/* On récupère les 8 bits de poids fort de l'identifiant à configurer,
   \   000011   8A..         MOV     ?V0 + 0,R2
   \   000013   8B..         MOV     ?V0 + 1,R3
   \   000015   7403         MOV     A,#0x3
   \   000017   78..         MOV     R0,#?V0 + 0
   \   000019   12....       LCALL   ?SS_SHR
   \   00001C   E5..         MOV     A,?V0 + 0
   \   00001E   AC..         MOV     R4,?V0 + 0
    368          qui doivent être placés tels quels dans le registre « MCP2515_TXB0SIDH ». */
    369          
    370          	Contenu_MCP2515_TXB0SIDL = (unsigned char)(0x00E0 & (Identifiant << 5));	/* On récupère les 3 bits de poids faible de l'identifiant à configurer,
   \   000020   EA           MOV     A,R2
   \   000021   C4           SWAP    A
   \   000022   33           RLC     A
   \   000023   54E0         ANL     A,#0xe0
   \   000025   FE           MOV     R6,A
    371          qui doivent être placés dans le registre « MCP2515_TXB0SIDL »,
    372          aux bits « MCP2515_TXB0SIDL<5> », « MCP2515_TXB0SIDL<6> » et « MCP2515_TXB0SIDL<7> ». */
    373          
    374          	EcrireRegistreMCP2515(MCP2515_TXB0SIDH, Contenu_MCP2515_TXB0SIDH);	/* Identifiant Emission H */
   \   000026                ; Setup parameters for call to function CLMCP2515::EcrireRegistreMCP2515(unsigned char, unsigned char)
   \   000026   7931         MOV     R1,#0x31
   \   000028   AA82         MOV     R2,DPL
   \   00002A   AB83         MOV     R3,DPH
   \   00002C   12....       LCALL   ??EcrireRegistreMCP2515
    375          	EcrireRegistreMCP2515(MCP2515_TXB0SIDL, Contenu_MCP2515_TXB0SIDL);	/* Identifiant Emission L + Configurations du mode de fonctionnement des identifiants */
   \   00002F                ; Setup parameters for call to function CLMCP2515::EcrireRegistreMCP2515(unsigned char, unsigned char)
   \   00002F   EE           MOV     A,R6
   \   000030   FC           MOV     R4,A
   \   000031   7932         MOV     R1,#0x32
   \   000033   AA82         MOV     R2,DPL
   \   000035   AB83         MOV     R3,DPH
   \   000037   12....       LCALL   ??EcrireRegistreMCP2515
    376          }
   \   00003A   7F02         MOV     R7,#0x2
   \   00003C   02....       LJMP    ?FUNC_LEAVE_XDATA
    377          
    378          
    379          
    380          
    381          
    382          /* Envoi d'un message d'un maximum de 8 caractères, par le module « TXB0 ».
    383          
    384          
    385          Paramètres d'entrée :
    386          
    387          unsigned char * message - Pointeur sur le début d'une chaîne d'un maximum de 8 caractères,
    388          à tranmettre par le module « TXB0 ».
    389          
    390          Valeur de retour :
    391          
    392          Aucune.
    393          */

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    394          void CLMCP2515 :: EnvoyerTrameMCP2515(const  unsigned char * Message)
   \                     ??EnvoyerTrameMCP2515:
    395          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 6,R4
   \   00000B   8D..         MOV     ?V0 + 7,R5
    396          	unsigned char TailleDuMessage = 0;
   \   00000D   75..00       MOV     ?V0 + 0,#0x0
    397          	unsigned char k;
    398          	unsigned char PointeurRegistre = MCP2515_TXB0D0;
   \   000010   75..36       MOV     ?V0 + 4,#0x36
    399          
    400          	/* Détermination du nombre d'octets de données à transmettre, et limitation à 8 octets au maximum. */
    401          	TailleDuMessage = Longueur(Message);
   \   000013                ; Setup parameters for call to function CLMCP2515::Longueur(unsigned char const *)
   \   000013   AC..         MOV     R4,?V0 + 6
   \   000015   AD..         MOV     R5,?V0 + 7
   \   000017   EE           MOV     A,R6
   \   000018   FA           MOV     R2,A
   \   000019   EF           MOV     A,R7
   \   00001A   FB           MOV     R3,A
   \   00001B   12....       LCALL   ??Longueur
   \   00001E   E9           MOV     A,R1
   \   00001F   F5..         MOV     ?V0 + 0,A
    402          
    403          	if(TailleDuMessage > 8)	/* Si le nombre d'octets de données à transmettre dépasse le nombre maximal d'octets possible. */
   \   000021   E5..         MOV     A,?V0 + 0
   \   000023   C3           CLR     C
   \   000024   9409         SUBB    A,#0x9
   \   000026   4003         JC      ??EnvoyerTrameMCP2515_1
    404          	{
    405          		TailleDuMessage = 8;	/* Le nombre maximal d'octets possible sera tranmis par le circuit MCP2515. */
   \   000028   75..08       MOV     ?V0 + 0,#0x8
    406          	}
    407          
    408          	EcrireRegistreMCP2515(MCP2515_TXB0DLC, TailleDuMessage);	/* Le MCP2515 est informé du nombre d'octets de données qu'il aura à tranmettre. */
   \                     ??EnvoyerTrameMCP2515_1:
   \   00002B                ; Setup parameters for call to function CLMCP2515::EcrireRegistreMCP2515(unsigned char, unsigned char)
   \   00002B   AC..         MOV     R4,?V0 + 0
   \   00002D   7935         MOV     R1,#0x35
   \   00002F   EE           MOV     A,R6
   \   000030   FA           MOV     R2,A
   \   000031   EF           MOV     A,R7
   \   000032   FB           MOV     R3,A
   \   000033   12....       LCALL   ??EcrireRegistreMCP2515
    409          
    410          	/* Chargement du message dans le MCP2515 */
    411          	for(k = 0; k < TailleDuMessage; k++)
   \   000036   75..00       MOV     ?V0 + 1,#0x0
   \   000039   8021         SJMP    ??EnvoyerTrameMCP2515_2
    412          	{
    413          		EcrireRegistreMCP2515(PointeurRegistre, Message[k]);	/* Les registres de données du module « TXB0 »,
   \                     ??EnvoyerTrameMCP2515_3:
   \   00003B                ; Setup parameters for call to function CLMCP2515::EcrireRegistreMCP2515(unsigned char, unsigned char)
   \   00003B   85....       MOV     ?V0 + 2,?V0 + 1
   \   00003E   75..00       MOV     ?V0 + 3,#0x0
   \   000041   E5..         MOV     A,?V0 + 6
   \   000043   25..         ADD     A,?V0 + 2
   \   000045   F582         MOV     DPL,A
   \   000047   E5..         MOV     A,?V0 + 7
   \   000049   35..         ADDC    A,?V0 + 3
   \   00004B   F583         MOV     DPH,A
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   FC           MOV     R4,A
   \   00004F   A9..         MOV     R1,?V0 + 4
   \   000051   EE           MOV     A,R6
   \   000052   FA           MOV     R2,A
   \   000053   EF           MOV     A,R7
   \   000054   FB           MOV     R3,A
   \   000055   12....       LCALL   ??EcrireRegistreMCP2515
    414          dont les adresses sont consécutives, sont remplis,
    415          en commencant par le registre « MCP2515_TXB0D0 », d'adresse 0x36. */
    416          		PointeurRegistre++;
   \   000058   05..         INC     ?V0 + 4
    417          	}
   \   00005A   05..         INC     ?V0 + 1
   \                     ??EnvoyerTrameMCP2515_2:
   \   00005C   E5..         MOV     A,?V0 + 1
   \   00005E   C3           CLR     C
   \   00005F   95..         SUBB    A,?V0 + 0
   \   000061   40D8         JC      ??EnvoyerTrameMCP2515_3
    418          
    419          	/* Envoi de la commande « RTS », qui consiste en l'envoi de l'octet « 0xC0 », par le bus SPI. */
    420          	EcrireDonnesMCP2515(1, MCP2515_RTS_TX0, 0x00, 0x00);
   \   000063                ; Setup parameters for call to function CLMCP2515::EcrireDonnesMCP2515(unsigned char, unsigned char, unsigned char, unsigned char)
   \   000063   75..00       MOV     ?V0 + 0,#0x0
   \   000066   78..         MOV     R0,#?V0 + 0
   \   000068   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00006B   7D00         MOV     R5,#0x0
   \   00006D   7C81         MOV     R4,#-0x7f
   \   00006F   7901         MOV     R1,#0x1
   \   000071   EE           MOV     A,R6
   \   000072   FA           MOV     R2,A
   \   000073   EF           MOV     A,R7
   \   000074   FB           MOV     R3,A
   \   000075   12....       LCALL   ??EcrireDonnesMCP2515
   \   000078   7401         MOV     A,#0x1
   \   00007A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007D   E9           MOV     A,R1
    421          
    422          	Delai(10);
   \   00007E                ; Setup parameters for call to function CLMCP2515::Delai(unsigned long)
   \   00007E   90....       MOV     DPTR,#__Constant_a
   \   000081   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000084   EE           MOV     A,R6
   \   000085   FA           MOV     R2,A
   \   000086   EF           MOV     A,R7
   \   000087   FB           MOV     R3,A
   \   000088   12....       LCALL   ??Delai
   \   00008B   7404         MOV     A,#0x4
   \   00008D   12....       LCALL   ?DEALLOC_XSTACK8
    423          }
   \   000090   7F08         MOV     R7,#0x8
   \   000092   02....       LJMP    ?FUNC_LEAVE_XDATA
    424          
    425          
    426          
    427          
    428          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    429          UC*  CLMCP2515 :: LireTrameMCP2515(void)
   \                     ??LireTrameMCP2515:
    430          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    431             UC ucTrame;
    432            // UC ucID;
    433            
    434             
    435            
    436             
    437             // ucID = LireRegistreMCP2515(MCP2515_RXB0DLC);
    438             //ucBuf[0] = ucTrame;
    439             
    440           ucTrame = LireRegistreMCP2515(MCP2515_RXB0DLC);
   \   000009                ; Setup parameters for call to function CLMCP2515::LireRegistreMCP2515(unsigned char)
   \   000009   7965         MOV     R1,#0x65
   \   00000B   EE           MOV     A,R6
   \   00000C   FA           MOV     R2,A
   \   00000D   EF           MOV     A,R7
   \   00000E   FB           MOV     R3,A
   \   00000F   12....       LCALL   ??LireRegistreMCP2515
   \   000012   E9           MOV     A,R1
   \   000013   F5..         MOV     ?V0 + 3,A
    441             ucBuf[0] = ucTrame;
   \   000015   E5..         MOV     A,?V0 + 3
   \   000017   8E82         MOV     DPL,R6
   \   000019   8F83         MOV     DPH,R7
   \   00001B   E5..         MOV     A,?V0 + 3
   \   00001D   F0           MOVX    @DPTR,A
    442             
    443           
    444             
    445            for(UC uci=0;uci < ucTrame; uci++)
   \   00001E   75..00       MOV     ?V0 + 2,#0x0
   \   000021   8037         SJMP    ??LireTrameMCP2515_1
    446             {
    447          
    448                ucBuf[uci + 1] = LireRegistreMCP2515( MCP2515_RXB0D0 + uci);
   \                     ??LireTrameMCP2515_2:
   \   000023                ; Setup parameters for call to function CLMCP2515::LireRegistreMCP2515(unsigned char)
   \   000023   7466         MOV     A,#0x66
   \   000025   25..         ADD     A,?V0 + 2
   \   000027   F9           MOV     R1,A
   \   000028   EE           MOV     A,R6
   \   000029   FA           MOV     R2,A
   \   00002A   EF           MOV     A,R7
   \   00002B   FB           MOV     R3,A
   \   00002C   12....       LCALL   ??LireRegistreMCP2515
   \   00002F   E9           MOV     A,R1
   \   000030   C0E0         PUSH    A
   \   000032   85....       MOV     ?V0 + 0,?V0 + 2
   \   000035   75..00       MOV     ?V0 + 1,#0x0
   \   000038   EE           MOV     A,R6
   \   000039   25..         ADD     A,?V0 + 0
   \   00003B   F582         MOV     DPL,A
   \   00003D   EF           MOV     A,R7
   \   00003E   35..         ADDC    A,?V0 + 1
   \   000040   F583         MOV     DPH,A
   \   000042   A3           INC     DPTR
   \   000043   D0E0         POP     A
   \   000045   F0           MOVX    @DPTR,A
    449                 Delai(1000);
   \   000046                ; Setup parameters for call to function CLMCP2515::Delai(unsigned long)
   \   000046   90....       MOV     DPTR,#__Constant_3e8
   \   000049   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00004C   EE           MOV     A,R6
   \   00004D   FA           MOV     R2,A
   \   00004E   EF           MOV     A,R7
   \   00004F   FB           MOV     R3,A
   \   000050   12....       LCALL   ??Delai
   \   000053   7404         MOV     A,#0x4
   \   000055   12....       LCALL   ?DEALLOC_XSTACK8
    450             }
   \   000058   05..         INC     ?V0 + 2
   \                     ??LireTrameMCP2515_1:
   \   00005A   E5..         MOV     A,?V0 + 2
   \   00005C   C3           CLR     C
   \   00005D   95..         SUBB    A,?V0 + 3
   \   00005F   40C2         JC      ??LireTrameMCP2515_2
    451           
    452            
    453            return (ucBuf);
   \   000061   EE           MOV     A,R6
   \   000062   FA           MOV     R2,A
   \   000063   EF           MOV     A,R7
   \   000064   FB           MOV     R3,A
   \   000065   7F04         MOV     R7,#0x4
   \   000067   02....       LJMP    ?FUNC_LEAVE_XDATA
    454            
    455          }
    456          
    457          
    458          
    459          
    460          /* Acquittement des interruptions du circuit MCP2515.
    461          
    462          
    463          Paramètres d'entrée :
    464          
    465          Aucun.
    466          
    467          Valeur de retour :
    468          
    469          Aucune.
    470          */

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    471          void CLMCP2515 :: AcquitterInterruptionsMCP2515(void)
   \                     ??AcquitterInterruptionsMCP2515:
    472          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
    473          	EcrireRegistreMCP2515(MCP2515_CANCTRL, 0x87);	/* Registe 0x0F.
   \   000008                ; Setup parameters for call to function CLMCP2515::EcrireRegistreMCP2515(unsigned char, unsigned char)
   \   000008   7C87         MOV     R4,#-0x79
   \   00000A   790F         MOV     R1,#0xf
   \   00000C   AA82         MOV     R2,DPL
   \   00000E   AB83         MOV     R3,DPH
   \   000010   12....       LCALL   ??EcrireRegistreMCP2515
    474          									   Le circuit est passé en « Configuration mode ». */
    475          	EcrireRegistreMCP2515(MCP2515_CANINTF, 0x00);	/* Registre 0x2C.
   \   000013                ; Setup parameters for call to function CLMCP2515::EcrireRegistreMCP2515(unsigned char, unsigned char)
   \   000013   7C00         MOV     R4,#0x0
   \   000015   792C         MOV     R1,#0x2c
   \   000017   AA82         MOV     R2,DPL
   \   000019   AB83         MOV     R3,DPH
   \   00001B   12....       LCALL   ??EcrireRegistreMCP2515
    476          									   Acquittement des interruptions du circuit MCP2515. */
    477          	EcrireRegistreMCP2515(MCP2515_CANCTRL, 0x07);	/* Registe 0x0F.
   \   00001E                ; Setup parameters for call to function CLMCP2515::EcrireRegistreMCP2515(unsigned char, unsigned char)
   \   00001E   7C07         MOV     R4,#0x7
   \   000020   790F         MOV     R1,#0xf
   \   000022   AA82         MOV     R2,DPL
   \   000024   AB83         MOV     R3,DPH
   \   000026   12....       LCALL   ??EcrireRegistreMCP2515
    478          									   Le circuit est passé en « Normal Operation mode ». */
    479          }
   \   000029   D083         POP     DPH
   \   00002B   D082         POP     DPL
   \   00002D   22           RET
    480          
    481          
    482          
    483          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    484          unsigned char CLMCP2515 :: EcrireDonnesMCP2515(unsigned char NombreDonneesEnvoyer, unsigned char Donnee1, unsigned char Donnee2, unsigned char Donnee3)
   \                     ??EcrireDonnesMCP2515:
    485          {
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 4,R2
   \   00000C   8B..         MOV     ?V0 + 5,R3
   \   00000E   89..         MOV     ?V0 + 0,R1
   \   000010   EC           MOV     A,R4
   \   000011   FE           MOV     R6,A
   \   000012   ED           MOV     A,R5
   \   000013   FF           MOV     R7,A
   \   000014   7410         MOV     A,#0x10
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F8           MOV     R0,A
    486          	unsigned char k;
    487          
    488          	unsigned char Donnees[3] = {0x00};
   \   00001B   90....       MOV     DPTR,#`?<Constant {(unsigned char)'\\000'}>`
   \   00001E   C082         PUSH    DPL
   \   000020   C083         PUSH    DPH
   \   000022   85..82       MOV     DPL,?XSP + 0
   \   000025   85..83       MOV     DPH,?XSP + 1
   \   000028   AC82         MOV     R4,DPL
   \   00002A   AD83         MOV     R5,DPH
   \   00002C   D083         POP     DPH
   \   00002E   D082         POP     DPL
   \   000030   7403         MOV     A,#0x3
   \   000032   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    489          
    490          	Donnees[0] = Donnee1;
   \   000035   EE           MOV     A,R6
   \   000036   85..82       MOV     DPL,?XSP + 0
   \   000039   85..83       MOV     DPH,?XSP + 1
   \   00003C   F0           MOVX    @DPTR,A
    491          	Donnees[1] = Donnee2;
   \   00003D   EF           MOV     A,R7
   \   00003E   C0E0         PUSH    A
   \   000040   7401         MOV     A,#0x1
   \   000042   12....       LCALL   ?XSTACK_DISP0_8
   \   000045   D0E0         POP     A
   \   000047   F0           MOVX    @DPTR,A
    492          	Donnees[2] = Donnee3;
   \   000048   E8           MOV     A,R0
   \   000049   C0E0         PUSH    A
   \   00004B   7402         MOV     A,#0x2
   \   00004D   12....       LCALL   ?XSTACK_DISP0_8
   \   000050   D0E0         POP     A
   \   000052   F0           MOVX    @DPTR,A
    493          
    494          	BROCHE_MCP2515_CS = 0;	/* ~CS_MCP2515 = 0 */
   \   000053   C297         CLR     0x90.7
    495          
    496          	for(k = 0; k < NombreDonneesEnvoyer; k++)
   \   000055   75..00       MOV     ?V0 + 1,#0x0
   \   000058   8018         SJMP    ??EcrireDonnesMCP2515_1
    497          	{
    498          			ucSPITransfert( 0x00 , Donnees[k]);
    499          			for(int V =0 ;V<100;V++);	/* Delai au moins tant que le module du SPI est occupé */	
   \                     ??EcrireDonnesMCP2515_2:
   \   00005A   E8           MOV     A,R0
   \   00005B   2401         ADD     A,#0x1
   \   00005D   F8           MOV     R0,A
   \   00005E   E9           MOV     A,R1
   \   00005F   3400         ADDC    A,#0x0
   \   000061   F9           MOV     R1,A
   \                     ??EcrireDonnesMCP2515_3:
   \   000062   C3           CLR     C
   \   000063   E8           MOV     A,R0
   \   000064   9464         SUBB    A,#0x64
   \   000066   E9           MOV     A,R1
   \   000067   9400         SUBB    A,#0x0
   \   000069   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00006B   65D0         XRL     A,PSW
   \   00006D   33           RLC     A
   \   00006E   40EA         JC      ??EcrireDonnesMCP2515_2
   \   000070   05..         INC     ?V0 + 1
   \                     ??EcrireDonnesMCP2515_1:
   \   000072   E5..         MOV     A,?V0 + 1
   \   000074   C3           CLR     C
   \   000075   95..         SUBB    A,?V0 + 0
   \   000077   502A         JNC     ??EcrireDonnesMCP2515_4
   \   000079                ; Setup parameters for call to function CLSPI::ucSPITransfert(UC, UC)
   \   000079   85....       MOV     ?V0 + 2,?V0 + 1
   \   00007C   75..00       MOV     ?V0 + 3,#0x0
   \   00007F   85..82       MOV     DPL,?XSP + 0
   \   000082   85..83       MOV     DPH,?XSP + 1
   \   000085   E582         MOV     A,DPL
   \   000087   25..         ADD     A,?V0 + 2
   \   000089   F582         MOV     DPL,A
   \   00008B   E583         MOV     A,DPH
   \   00008D   35..         ADDC    A,?V0 + 3
   \   00008F   F583         MOV     DPH,A
   \   000091   E0           MOVX    A,@DPTR
   \   000092   FC           MOV     R4,A
   \   000093   7900         MOV     R1,#0x0
   \   000095   AA..         MOV     R2,?V0 + 4
   \   000097   AB..         MOV     R3,?V0 + 5
   \   000099   12....       LCALL   ??ucSPITransfert
   \   00009C   E9           MOV     A,R1
   \   00009D   7800         MOV     R0,#0x0
   \   00009F   7900         MOV     R1,#0x0
   \   0000A1   80BF         SJMP    ??EcrireDonnesMCP2515_3
    500          	}
    501          
    502          	BROCHE_MCP2515_CS = 1;	/* ~CS_MCP2515 = 1 */
   \                     ??EcrireDonnesMCP2515_4:
   \   0000A3   D297         SETB    0x90.7
    503          
    504          	return 0x01;
   \   0000A5   7901         MOV     R1,#0x1
   \   0000A7   7403         MOV     A,#0x3
   \   0000A9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AC   7F06         MOV     R7,#0x6
   \   0000AE   02....       LJMP    ?FUNC_LEAVE_XDATA
   \   0000B1                REQUIRE _A_P1
    505          }
    506          
    507          
    508          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    509          unsigned char CLMCP2515 :: LireDonnesMCP2515(unsigned char NombreDonneesEnvoyer, unsigned char Donnee1, unsigned char Donnee2, unsigned char Donnee3)
   \                     ??LireDonnesMCP2515:
    510          {
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 4,R2
   \   00000C   8B..         MOV     ?V0 + 5,R3
   \   00000E   89..         MOV     ?V0 + 0,R1
   \   000010   EC           MOV     A,R4
   \   000011   FE           MOV     R6,A
   \   000012   ED           MOV     A,R5
   \   000013   FF           MOV     R7,A
   \   000014   7410         MOV     A,#0x10
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F8           MOV     R0,A
    511          	unsigned char k;
    512                  unsigned char buf;
    513          	unsigned char Donnees[3] = {0x00};
   \   00001B   90....       MOV     DPTR,#`?<Constant {(unsigned char)'\\000'}>_1`
   \   00001E   C082         PUSH    DPL
   \   000020   C083         PUSH    DPH
   \   000022   85..82       MOV     DPL,?XSP + 0
   \   000025   85..83       MOV     DPH,?XSP + 1
   \   000028   AC82         MOV     R4,DPL
   \   00002A   AD83         MOV     R5,DPH
   \   00002C   D083         POP     DPH
   \   00002E   D082         POP     DPL
   \   000030   7403         MOV     A,#0x3
   \   000032   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    514          
    515          	Donnees[0] = Donnee1;
   \   000035   EE           MOV     A,R6
   \   000036   85..82       MOV     DPL,?XSP + 0
   \   000039   85..83       MOV     DPH,?XSP + 1
   \   00003C   F0           MOVX    @DPTR,A
    516          	Donnees[1] = Donnee2;
   \   00003D   EF           MOV     A,R7
   \   00003E   C0E0         PUSH    A
   \   000040   7401         MOV     A,#0x1
   \   000042   12....       LCALL   ?XSTACK_DISP0_8
   \   000045   D0E0         POP     A
   \   000047   F0           MOVX    @DPTR,A
    517          	Donnees[2] = Donnee3;
   \   000048   E8           MOV     A,R0
   \   000049   C0E0         PUSH    A
   \   00004B   7402         MOV     A,#0x2
   \   00004D   12....       LCALL   ?XSTACK_DISP0_8
   \   000050   D0E0         POP     A
   \   000052   F0           MOVX    @DPTR,A
    518          
    519          	BROCHE_MCP2515_CS = 0;	/* ~CS_MCP2515 = 0 */
   \   000053   C297         CLR     0x90.7
    520          
    521          	for(k = 0; k < NombreDonneesEnvoyer; k++)
   \   000055   75..00       MOV     ?V0 + 1,#0x0
   \   000058   8018         SJMP    ??LireDonnesMCP2515_1
    522          	{
    523          		        buf = ucSPITransfert( 0x00 , Donnees[k]);
    524          			for(int V =0 ;V<100;V++);	/* Delai au moins tant que le module du SPI est occupé */	
   \                     ??LireDonnesMCP2515_2:
   \   00005A   E8           MOV     A,R0
   \   00005B   2401         ADD     A,#0x1
   \   00005D   F8           MOV     R0,A
   \   00005E   E9           MOV     A,R1
   \   00005F   3400         ADDC    A,#0x0
   \   000061   F9           MOV     R1,A
   \                     ??LireDonnesMCP2515_3:
   \   000062   C3           CLR     C
   \   000063   E8           MOV     A,R0
   \   000064   9464         SUBB    A,#0x64
   \   000066   E9           MOV     A,R1
   \   000067   9400         SUBB    A,#0x0
   \   000069   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00006B   65D0         XRL     A,PSW
   \   00006D   33           RLC     A
   \   00006E   40EA         JC      ??LireDonnesMCP2515_2
   \   000070   05..         INC     ?V0 + 1
   \                     ??LireDonnesMCP2515_1:
   \   000072   E5..         MOV     A,?V0 + 1
   \   000074   C3           CLR     C
   \   000075   95..         SUBB    A,?V0 + 0
   \   000077   502B         JNC     ??LireDonnesMCP2515_4
   \   000079                ; Setup parameters for call to function CLSPI::ucSPITransfert(UC, UC)
   \   000079   85....       MOV     ?V0 + 2,?V0 + 1
   \   00007C   75..00       MOV     ?V0 + 3,#0x0
   \   00007F   85..82       MOV     DPL,?XSP + 0
   \   000082   85..83       MOV     DPH,?XSP + 1
   \   000085   E582         MOV     A,DPL
   \   000087   25..         ADD     A,?V0 + 2
   \   000089   F582         MOV     DPL,A
   \   00008B   E583         MOV     A,DPH
   \   00008D   35..         ADDC    A,?V0 + 3
   \   00008F   F583         MOV     DPH,A
   \   000091   E0           MOVX    A,@DPTR
   \   000092   FC           MOV     R4,A
   \   000093   7900         MOV     R1,#0x0
   \   000095   AA..         MOV     R2,?V0 + 4
   \   000097   AB..         MOV     R3,?V0 + 5
   \   000099   12....       LCALL   ??ucSPITransfert
   \   00009C   E9           MOV     A,R1
   \   00009D   FA           MOV     R2,A
   \   00009E   7800         MOV     R0,#0x0
   \   0000A0   7900         MOV     R1,#0x0
   \   0000A2   80BE         SJMP    ??LireDonnesMCP2515_3
    525          	}
    526          
    527          	BROCHE_MCP2515_CS = 1;	/* ~CS_MCP2515 = 1 */
   \                     ??LireDonnesMCP2515_4:
   \   0000A4   D297         SETB    0x90.7
    528          
    529          	return buf;
   \   0000A6   EA           MOV     A,R2
   \   0000A7   F9           MOV     R1,A
   \   0000A8   7403         MOV     A,#0x3
   \   0000AA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AD   7F06         MOV     R7,#0x6
   \   0000AF   02....       LJMP    ?FUNC_LEAVE_XDATA
   \   0000B2                REQUIRE _A_P1
    530          }
    531          
    532          
    533          
    534          
    535          
    536          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    537          void CLMCP2515 :: Delai(unsigned long Temps)
   \                     ??Delai:
    538          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
    539          	unsigned long k;
    540          
    541          	for(k = 0; k < Temps; k++);
   \   000005   75..00       MOV     ?V0 + 4,#0x0
   \   000008   75..00       MOV     ?V0 + 5,#0x0
   \   00000B   75..00       MOV     ?V0 + 6,#0x0
   \   00000E   75..00       MOV     ?V0 + 7,#0x0
   \   000011   740F         MOV     A,#0xf
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   78..         MOV     R0,#?V0 + 0
   \   000018   12....       LCALL   ?L_MOV_X
   \   00001B   8008         SJMP    ??Delai_1
   \                     ??Delai_2:
   \   00001D   90....       MOV     DPTR,#__Constant_1
   \   000020   78..         MOV     R0,#?V0 + 4
   \   000022   12....       LCALL   ?L_ADD_X
   \                     ??Delai_1:
   \   000025   78..         MOV     R0,#?V0 + 0
   \   000027   79..         MOV     R1,#?V0 + 4
   \   000029   12....       LCALL   ?UL_GT
   \   00002C   40EF         JC      ??Delai_2
    542          }
   \   00002E   7F08         MOV     R7,#0x8
   \   000030   02....       LJMP    ?FUNC_LEAVE_XDATA
    543          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    544          unsigned char CLMCP2515 :: Longueur(const  unsigned char * Contenu)
   \                     ??Longueur:
    545          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    546          	unsigned char Compteur = 0;
   \   000005   7900         MOV     R1,#0x0
   \   000007   8001         SJMP    ??Longueur_1
    547          
    548          	while(Contenu[Compteur] != '\0')
    549          	{
    550          		Compteur++;
   \                     ??Longueur_2:
   \   000009   09           INC     R1
    551          	}
   \                     ??Longueur_1:
   \   00000A   89..         MOV     ?V0 + 0,R1
   \   00000C   75..00       MOV     ?V0 + 1,#0x0
   \   00000F   EC           MOV     A,R4
   \   000010   25..         ADD     A,?V0 + 0
   \   000012   F582         MOV     DPL,A
   \   000014   ED           MOV     A,R5
   \   000015   35..         ADDC    A,?V0 + 1
   \   000017   F583         MOV     DPH,A
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   70ED         JNZ     ??Longueur_2
    552          
    553          	return Compteur;
   \   00001C   7F02         MOV     R7,#0x2
   \   00001E   02....       LJMP    ?FUNC_LEAVE_XDATA
    554          }

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     __Constant_3e8:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for __Constant_3e8>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __Constant_3e8>`:
   \   000000   E8030000     DD 1000

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     __Constant_a:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for __Constant_a>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __Constant_a>`:
   \   000000   0A000000     DD 10

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     __Constant_1:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for __Constant_1>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __Constant_1>`:
   \   000000   01000000     DD 1

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     `?<Constant {(unsigned char)'\\000'}>`:
   \   000000                DS 3
   \   000003                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     `?<Constant {(unsigned char)'\\000'}>_1`:
   \   000000                DS 3
   \   000003                REQUIRE __INIT_XDATA_Z

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \   __near_func __xdata_reentrant CLMCP2515 &CLMCP2515::new CLMCP2515()
   \                     `??new CLMCP2515`:
   \   000000   C0..         PUSH    ?V0 + 0
   \   000002   C0..         PUSH    ?V0 + 1
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004                ; Setup parameters for call to function operator new(unsigned int)
   \   000004   7A08         MOV     R2,#0x8
   \   000006   7B00         MOV     R3,#0x0
   \   000008   12....       LCALL   `??operator new`
   \   00000B   8A..         MOV     ?V0 + 0,R2
   \   00000D   8B..         MOV     ?V0 + 1,R3
   \   00000F   A8..         MOV     R0,?V0 + 0
   \   000011   A9..         MOV     R1,?V0 + 1
   \   000013   E8           MOV     A,R0
   \   000014   FA           MOV     R2,A
   \   000015   E9           MOV     A,R1
   \   000016   FB           MOV     R3,A
   \   000017   E8           MOV     A,R0
   \   000018   49           ORL     A,R1
   \   000019   600D         JZ      `??new CLMCP2515_1`
   \   00001B                ; Setup parameters for call to function CLMCP2515::CLMCP2515()
   \   00001B   12....       LCALL   ??CLMCP2515
   \   00001E   8A..         MOV     ?V0 + 0,R2
   \   000020   8B..         MOV     ?V0 + 1,R3
   \   000022   AA..         MOV     R2,?V0 + 0
   \   000024   AB..         MOV     R3,?V0 + 1
   \   000026   8004         SJMP    `??new CLMCP2515_2`
   \                     `??new CLMCP2515_1`:
   \   000028   7A00         MOV     R2,#0x0
   \   00002A   7B00         MOV     R3,#0x0
   \                     `??new CLMCP2515_2`:
   \   00002C   D0..         POP     ?V0 + 1
   \   00002E   D0..         POP     ?V0 + 0
   \   000030   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \   __near_func __xdata_reentrant void CLMCP2515::delete ~CLMCP2515(CLMCP2515 *)
   \                     `??delete ~CLMCP2515`:
   \   000000   74F8         MOV     A,#-0x8
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 8
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   EE           MOV     A,R6
   \   00000A   4F           ORL     A,R7
   \   00000B   600E         JZ      `??delete ~CLMCP2515_1`
   \   00000D                ; Setup parameters for call to function CLMCP2515::~CLMCP2515()
   \   00000D   EE           MOV     A,R6
   \   00000E   FA           MOV     R2,A
   \   00000F   EF           MOV     A,R7
   \   000010   FB           MOV     R3,A
   \   000011   12....       LCALL   `?~CLMCP2515`
   \   000014                ; Setup parameters for call to function operator delete(void *)
   \   000014   EE           MOV     A,R6
   \   000015   FA           MOV     R2,A
   \   000016   EF           MOV     A,R7
   \   000017   FB           MOV     R3,A
   \   000018   12....       LCALL   `??operator delete`
   \                     `??delete ~CLMCP2515_1`:
   \   00001B   7F01         MOV     R7,#0x1
   \   00001D   02....       LJMP    ?FUNC_LEAVE_XDATA
    555          
    556          

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       2      0      0  CLMCP2515::AcquitterInterruptionsMCP2515()
                          2 0  0 -> CLMCP2515::EcrireRegistreMCP2515(unsigned char, unsigned char)
       2      0      0  CLMCP2515::CLMCP2515()
                          2 0  0 -> CLSPI::CLSPI()
       0      0      9  CLMCP2515::ChoisirIdentifiantTX0(int)
                          0 0  9 -> CLMCP2515::EcrireRegistreMCP2515(unsigned char, unsigned char)
       0      0     34  CLMCP2515::Delai(unsigned long)
       2      0     32  CLMCP2515::EcrireDonnesMCP2515(unsigned char, unsigned char, unsigned char, unsigned char)
                          0 0 16 -> CLSPI::ucSPITransfert(UC, UC)
       0      0     24  CLMCP2515::EcrireRegistreMCP2515(unsigned char, unsigned char)
                          0 0  9 -> CLMCP2515::EcrireDonnesMCP2515(unsigned char, unsigned char, unsigned char, unsigned char)
       0      0     19  CLMCP2515::EnvoyerTrameMCP2515(unsigned char const *)
                          0 0 19 -> CLMCP2515::Delai(unsigned long)
                          0 0 16 -> CLMCP2515::EcrireDonnesMCP2515(unsigned char, unsigned char, unsigned char, unsigned char)
                          0 0 15 -> CLMCP2515::EcrireRegistreMCP2515(unsigned char, unsigned char)
                          0 0 15 -> CLMCP2515::Longueur(unsigned char const *)
       0      0     12  CLMCP2515::InitialisationMCP2515()
                          0 0 12 -> CLMCP2515::Delai(unsigned long)
                          0 0  9 -> CLMCP2515::EcrireDonnesMCP2515(unsigned char, unsigned char, unsigned char, unsigned char)
                          0 0  8 -> CLMCP2515::EcrireRegistreMCP2515(unsigned char, unsigned char)
       2      0     25  CLMCP2515::LireDonnesMCP2515(unsigned char, unsigned char, unsigned char, unsigned char)
                          0 0 16 -> CLSPI::ucSPITransfert(UC, UC)
       0      0     20  CLMCP2515::LireRegistreMCP2515(unsigned char)
                          0 0  9 -> CLMCP2515::LireDonnesMCP2515(unsigned char, unsigned char, unsigned char, unsigned char)
       1      0     15  CLMCP2515::LireTrameMCP2515()
                          0 0 15 -> CLMCP2515::Delai(unsigned long)
                          0 0 11 -> CLMCP2515::LireRegistreMCP2515(unsigned char)
       0      0     24  CLMCP2515::Longueur(unsigned char const *)
       0      0      8  CLMCP2515::delete ~CLMCP2515(CLMCP2515 *)
                          0 0  8 -> CLMCP2515::~CLMCP2515()
                          0 0  8 -> operator delete(void *)
       2      0      0  CLMCP2515::new CLMCP2515()
                          2 0  0 -> CLMCP2515::CLMCP2515()
                          2 0  0 -> operator new(unsigned int)
       0      0      8  CLMCP2515::~CLMCP2515()
                          0 0  0 -> CLSPI::~CLSPI()


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       3  ?<Constant {(unsigned char)'\000'}>
       3  ?<Constant {(unsigned char)'\000'}>_1
       4  ?<Initializer for __Constant_1>
       4  ?<Initializer for __Constant_3e8>
       4  ?<Initializer for __Constant_a>
      46  CLMCP2515::AcquitterInterruptionsMCP2515()
      24  CLMCP2515::CLMCP2515()
      63  CLMCP2515::ChoisirIdentifiantTX0(int)
      51  CLMCP2515::Delai(unsigned long)
     177  CLMCP2515::EcrireDonnesMCP2515(unsigned char, unsigned char, unsigned char, unsigned char)
      36  CLMCP2515::EcrireRegistreMCP2515(unsigned char, unsigned char)
     149  CLMCP2515::EnvoyerTrameMCP2515(unsigned char const *)
     290  CLMCP2515::InitialisationMCP2515()
     178  CLMCP2515::LireDonnesMCP2515(unsigned char, unsigned char, unsigned char, unsigned char)
      34  CLMCP2515::LireRegistreMCP2515(unsigned char)
     106  CLMCP2515::LireTrameMCP2515()
      33  CLMCP2515::Longueur(unsigned char const *)
      32  CLMCP2515::delete ~CLMCP2515(CLMCP2515 *)
      49  CLMCP2515::new CLMCP2515()
       3  CLMCP2515::~CLMCP2515()
       1  _A_P1
       4  __Constant_1
       4  __Constant_3e8
       4  __Constant_a

 
 1 271 bytes in segment NEAR_CODE
     1 byte  in segment SFR_AN
    12 bytes in segment XDATA_I
    12 bytes in segment XDATA_ID
     6 bytes in segment XDATA_Z
 
 1 271 bytes of CODE  memory (+ 12 bytes shared)
     0 bytes of DATA  memory (+  1 byte  shared)
     6 bytes of XDATA memory (+ 12 bytes shared)

Errors: none
Warnings: 1
