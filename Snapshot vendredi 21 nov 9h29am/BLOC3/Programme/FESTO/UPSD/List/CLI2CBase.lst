###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             11/Nov/2014  11:41:09 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  near                                               #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data                                               #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  C:\Users\1230838\Desktop\PROJETSESSION5\BLOC3\Prog #
#                          ramme\FESTO\Libraire\CLI2CBase.cpp                 #
#    Command line       =  C:\Users\1230838\Desktop\PROJETSESSION5\BLOC3\Prog #
#                          ramme\FESTO\Libraire\CLI2CBase.cpp -D UPSD3254A    #
#                          --preprocess=cl C:\Users\1230838\Desktop\PROJETSES #
#                          SION5\BLOC3\Programme\FESTO\UPSD\List\ -lC         #
#                          C:\Users\1230838\Desktop\PROJETSESSION5\BLOC3\Prog #
#                          ramme\FESTO\UPSD\List\ -lA                         #
#                          C:\Users\1230838\Desktop\PROJETSESSION5\BLOC3\Prog #
#                          ramme\FESTO\UPSD\List\ -o                          #
#                          C:\Users\1230838\Desktop\PROJETSESSION5\BLOC3\Prog #
#                          ramme\FESTO\UPSD\Obj\ -e --no_cse --no_unroll      #
#                          --no_inline --no_code_motion --no_tbaa --debug     #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=near --calling_convention=xdata_reent #
#                          rant --place_constants=data --nr_virtual_regs 8    #
#                          --dlib_config "C:\Program Files\IAR                #
#                          Systems\Embedded Workbench                         #
#                          6.4\8051\LIB\DLIB\dl8051Normal.h" -Ol --eec++      #
#    List file          =  C:\Users\1230838\Desktop\PROJETSESSION5\BLOC3\Prog #
#                          ramme\FESTO\UPSD\List\CLI2CBase.lst                #
#    Object file        =  C:\Users\1230838\Desktop\PROJETSESSION5\BLOC3\Prog #
#                          ramme\FESTO\UPSD\Obj\CLI2CBase.r51                 #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\1230838\Desktop\PROJETSESSION5\BLOC3\Programme\FESTO\Libraire\CLI2CBase.cpp
      1          // ***************** FICHIER:CLI2CBase.cpp
      2          //
      3          //  Description:Ce fichier contient la definition des differentes fonction 
      4          //              I2C de base qui communique avec le materiel
      5          //
      6          //  Application realisee avec IAR
      7          //
      8          //  AUTEUR : Gabriel Fortin-Belanger
      9          //  DATE CREATION :    2014-02-07		 VERSION: 1.0
     10          //  DATE MODIFICATION: ****-**-**
     11          //
     12          //******************************************************************************
     13          #include "CLInOutBase.h"

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1
     14          #include "_DeclarationGenerale.h"
     15          #include "CLI2CBase.h"
     16          
     17          #define DELAI 100
     18          
     19          
     20          //***********************CLI2CBase(void)
     21          //
     22          //Description:Constructeur par defaut ne fais rien
     23          //            
     24          //
     25          // Nom:CLI2CBase :: CLI2CBase(void)
     26          //           
     27          // PARAMETRE D'ENTREE: -
     28          //                  
     29          // 
     30          //
     31          // PARAMETRE DE SORTIE: -             
     32          //
     33          //    
     34          // Membre utilise: usiAdresseMaison
     35          //
     36          //
     37          // DATE DE CREATION: 10 octobre 2013    AUTEUR: Gabriel Fortin-B
     38          // DATE DE MODIFICATION:	
     39          //*****************************************************************************

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
     40          CLI2CBase :: CLI2CBase(void)   //Constructeur defaut
   \                     ??CLI2CBase:
     41          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     42            
     43          }
   \   000000   22           RET
     44          
     45          
     46          //***********************~CLI2CBase(void)
     47          //
     48          //Description:Destructeur par defaut ne fais rien
     49          //           
     50          //
     51          // Nom:CLI2CBase :: ~CLI2CBase(void) 
     52          //           
     53          // PARAMETRE D'ENTREE:  -
     54          //                        
     55          //                  
     56          // 
     57          //
     58          // PARAMETRE DE SORTIE: -             
     59          //
     60          //    
     61          // Membre utilise: vSetLumiere();
     62          //
     63          //
     64          // DATE DE CREATION: 10 octobre 2013    AUTEUR: Gabriel Fortin-B
     65          // DATE DE MODIFICATION:	
     66          //*****************************************************************************

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
     67          CLI2CBase :: ~CLI2CBase(void)   
   \                     `?~CLI2CBase`:
     68          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     69           
     70          }
   \   000000   22           RET
     71          
     72          
     73          //***********************Fonction:vI2CStart************************************
     74          //
     75          // Description:     Cette fonction permet de debuter la communication I2C
     76          //
     77          // 
     78          // Nom:void CLI2CBase :: vI2CStart(void)
     79          // 
     80          // PARAMETRE D'ENTREE:Aucun 
     81          //
     82          // PARAMETRE DE SORTIE:Aucun              
     83          //
     84          // EXEMPLE:
     85          //
     86          // PROCEDURES APPELEES: vI2CStart()
     87          //
     88          // DATE DE CREATION: 3 septembre 2013    AUTEUR: Gabriel Fortin-B
     89          // DATE DE MODIFICATION:	
     90          //*****************************************************************************

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
     91          void CLI2CBase :: vI2CStart(void)
   \                     ??vI2CStart:
     92          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
     93            SDA = HIGH; //Place la ligne de donnée a 1
   \   000008   D294         SETB    0x90.4
     94            SCL = HIGH; //Place la ligne d'horloge a 1
   \   00000A   D295         SETB    0x90.5
     95            vDelais();  //Cree un delai pour que les lignes soient stable
   \   00000C                ; Setup parameters for call to function CLI2CBase::vDelais()
   \   00000C   AA82         MOV     R2,DPL
   \   00000E   AB83         MOV     R3,DPH
   \   000010   12....       LCALL   ??vDelais
     96            SDA = LOW;  //Place la ligne de donnée a 0
   \   000013   C294         CLR     0x90.4
     97            vDelais();  //Delai pour la stabilité
   \   000015                ; Setup parameters for call to function CLI2CBase::vDelais()
   \   000015   AA82         MOV     R2,DPL
   \   000017   AB83         MOV     R3,DPH
   \   000019   12....       LCALL   ??vDelais
     98            SCL = LOW;  //Ligne d'horloge a 0
   \   00001C   C295         CLR     0x90.5
     99            vDelais();  //Delai pour la stabilité   
   \   00001E                ; Setup parameters for call to function CLI2CBase::vDelais()
   \   00001E   AA82         MOV     R2,DPL
   \   000020   AB83         MOV     R3,DPH
   \   000022   12....       LCALL   ??vDelais
    100          }
   \   000025   D083         POP     DPH
   \   000027   D082         POP     DPL
   \   000029   22           RET
   \   00002A                REQUIRE _A_P1
    101          
    102          
    103          //***********************Fonction:vI2CStop*************************************
    104          //
    105          //Description:Cette fonction permet de faire l<arret d une trame i2c
    106          //
    107          // NOM:
    108          //
    109          // PARAMETRE D'ENTREE:Aucun 
    110          //
    111          // PARAMETRE DE SORTIE:Aucun              
    112          //
    113          // EXEMPLE:void CLI2CBase :: vI2CStop(void)
    114          //
    115          // PROCEDURES APPELEES: vI2CStop()
    116          //
    117          // DATE DE CREATION: 3 septembre 2013    AUTEUR: Gabriel Fortin-B
    118          // DATE DE MODIFICATION:	
    119          //***************************************************************************** 

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    120          void CLI2CBase :: vI2CStop(void)
   \                     ??vI2CStop:
    121          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
    122            SDA = LOW; //Place la ligne de donnée a 0
   \   000008   C294         CLR     0x90.4
    123            vDelais(); //Delai pour la stabilité
   \   00000A                ; Setup parameters for call to function CLI2CBase::vDelais()
   \   00000A   AA82         MOV     R2,DPL
   \   00000C   AB83         MOV     R3,DPH
   \   00000E   12....       LCALL   ??vDelais
    124            SCL = HIGH;//Ligne d'horloge a 1 pour changer la donnée
   \   000011   D295         SETB    0x90.5
    125            vDelais(); //Delai pour la stabilité
   \   000013                ; Setup parameters for call to function CLI2CBase::vDelais()
   \   000013   AA82         MOV     R2,DPL
   \   000015   AB83         MOV     R3,DPH
   \   000017   12....       LCALL   ??vDelais
    126            SDA = HIGH;//Place la ligne de donnée a 1
   \   00001A   D294         SETB    0x90.4
    127            vDelais();//Delai pour la stabilité
   \   00001C                ; Setup parameters for call to function CLI2CBase::vDelais()
   \   00001C   AA82         MOV     R2,DPL
   \   00001E   AB83         MOV     R3,DPH
   \   000020   12....       LCALL   ??vDelais
    128          }
   \   000023   D083         POP     DPH
   \   000025   D082         POP     DPL
   \   000027   22           RET
   \   000028                REQUIRE _A_P1
    129          
    130          
    131          
    132          //***********************Fonction:ucI2CLireOctet*******************************
    133          //
    134          //Description:Cette fonction permet de lire un octet sur le bus et de
    135          //            retourner le ACK
    136          //
    137          // NOM:UC CLI2CBase :: ucI2CLireOctet(UC ucAckNoAck)
    138          // PARAMETRE D'ENTREE:ucAckNoAck: 0 pour ACK et 1 pour NOACK 
    139          //
    140          // PARAMETRE DE SORTIE:ucVal: valeur de l'octet                
    141          //
    142          // EXEMPLE: ucAckNoAck = 0
    143          //
    144          // PROCEDURES APPELEES: ucI2CLireOctet()
    145          //
    146          // DATE DE CREATION: 3 septembre 2013    AUTEUR: Gabriel Fortin-B
    147          // DATE DE MODIFICATION:	
    148          //*****************************************************************************

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    149          UC CLI2CBase :: ucI2CLireOctet(UC ucAckNoAck)
   \                     ??ucI2CLireOctet:
    150          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   89..         MOV     ?V0 + 1,R1
    151            UI i;                          //Declare une variable pour la boucle for
    152            UC ucVal;                      //Declare une variable pour stocké la donnée
    153            ucVal = 0x00;                  //Met ucVal o 0
   \   00000B   75..00       MOV     ?V0 + 0,#0x0
    154            for(i = 0; i<8; i++)           //Fait 8 fois pour garder chaque bit
   \   00000E   7E00         MOV     R6,#0x0
   \   000010   7F00         MOV     R7,#0x0
   \   000012   8017         SJMP    ??ucI2CLireOctet_1
    155             {                             //
    156                                           //
    157               if(ucI2CLireBit() == 1)     //Si le bit recu est 1
    158                {                          //
    159                  ucVal = ucVal << 1;      //Decale a gauche de 1
    160          	ucVal = ucVal + 1;       //Additionne 1 a la variable ucVal
    161                }                          //
    162                                           // 
    163               else                        //Sinon
    164                {                          //
    165                  ucVal = ucVal << 1;      //Decale a gauche de 1 pour placer un 0
   \                     ??ucI2CLireOctet_2:
   \   000014   E5..         MOV     A,?V0 + 0
   \   000016   C3           CLR     C
   \   000017   33           RLC     A
   \   000018   F5..         MOV     ?V0 + 0,A
    166                }                          //
    167                                           //
    168               SDA = ucAckNoAck;	         //Envoie Le signal ACK
   \                     ??ucI2CLireOctet_3:
   \   00001A   85....       MOV     ?V0 + 2,?V0 + 1
   \   00001D   E5..         MOV     A,?V0 + 1
   \   00001F   A2E0         MOV     C,0xE0 /* A   */.0
   \   000021   9294         MOV     0x90.4,C
   \   000023   EE           MOV     A,R6
   \   000024   2401         ADD     A,#0x1
   \   000026   FE           MOV     R6,A
   \   000027   EF           MOV     A,R7
   \   000028   3400         ADDC    A,#0x0
   \   00002A   FF           MOV     R7,A
   \                     ??ucI2CLireOctet_1:
   \   00002B   C3           CLR     C
   \   00002C   EE           MOV     A,R6
   \   00002D   9408         SUBB    A,#0x8
   \   00002F   EF           MOV     A,R7
   \   000030   9400         SUBB    A,#0x0
   \   000032   5016         JNC     ??ucI2CLireOctet_4
   \   000034                ; Setup parameters for call to function CLI2CBase::ucI2CLireBit()
   \   000034   AA82         MOV     R2,DPL
   \   000036   AB83         MOV     R3,DPH
   \   000038   12....       LCALL   ??ucI2CLireBit
   \   00003B   E9           MOV     A,R1
   \   00003C   6401         XRL     A,#0x1
   \   00003E   70D4         JNZ     ??ucI2CLireOctet_2
   \   000040   E5..         MOV     A,?V0 + 0
   \   000042   C3           CLR     C
   \   000043   33           RLC     A
   \   000044   F5..         MOV     ?V0 + 0,A
   \   000046   05..         INC     ?V0 + 0
   \   000048   80D0         SJMP    ??ucI2CLireOctet_3
    169             }                             //
    170                                           //
    171                                           //
    172            return(ucVal);                 //
   \                     ??ucI2CLireOctet_4:
   \   00004A   A9..         MOV     R1,?V0 + 0
   \   00004C   7F03         MOV     R7,#0x3
   \   00004E   02....       LJMP    ?FUNC_LEAVE_XDATA
   \   000051                REQUIRE _A_P1
    173            
    174          }
    175          
    176          
    177          //***********************Fonction:ucI2CEcrireOctet*****************************
    178          //
    179          //Description:Cette fonction permet d'Ecrire un octet sur le bus
    180          //
    181          // NOM:UC CLI2CBase :: ucI2CEcrireOctet(UC ucValeur)
    182          // 
    183          // PARAMETRE D'ENTREE:ucValeur:Valeur a ecrire sur le bus 
    184          //
    185          // PARAMETRE DE SORTIE:ucAck: ACK envoyer par le slave 0 pour ACK 1 pour NOACK             
    186          //
    187          // EXEMPLE:ucValeur = 0xA0
    188          //
    189          // PROCEDURES APPELEES:ucI2CEcrireOctet()
    190          //
    191          // DATE DE CREATION: 3 septembre 2013    AUTEUR: Gabriel Fortin-B
    192          // DATE DE MODIFICATION:	
    193          //*****************************************************************************

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    194          UC CLI2CBase :: ucI2CEcrireOctet(UC ucValeur)
   \                     ??ucI2CEcrireOctet:
    195          {
   \   000000   74F8         MOV     A,#-0x8
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 8
   \   000005                ; Auto size: 0
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   E9           MOV     A,R1
   \   00000A   FF           MOV     R7,A
    196            UC ucAck;                                 //Declare une variable pour ACK
    197            UC i;                                     //Declare variable pour le for
    198            for(i=0;i<8;i++)                          //Faire 8 fois
   \   00000B   7E00         MOV     R6,#0x0
   \   00000D   8013         SJMP    ??ucI2CEcrireOctet_1
    199             {                                        //
    200               ucI2CEcrireBit((ucValeur & 0x80)>> 7); //Isole le MSB et l'evoie au LSB
   \                     ??ucI2CEcrireOctet_2:
   \   00000F                ; Setup parameters for call to function CLI2CBase::ucI2CEcrireBit(UC)
   \   00000F   EF           MOV     A,R7
   \   000010   A2E7         MOV     C,0xE0 /* A   */.7
   \   000012   E4           CLR     A
   \   000013   33           RLC     A
   \   000014   F9           MOV     R1,A
   \   000015   AA82         MOV     R2,DPL
   \   000017   AB83         MOV     R3,DPH
   \   000019   12....       LCALL   ??ucI2CEcrireBit
   \   00001C   E9           MOV     A,R1
    201               ucValeur = ucValeur << 1;              //Fait un decallage a gauche de 1  
   \   00001D   EF           MOV     A,R7
   \   00001E   C3           CLR     C
   \   00001F   33           RLC     A
   \   000020   FF           MOV     R7,A
    202             }                                        //
   \   000021   0E           INC     R6
   \                     ??ucI2CEcrireOctet_1:
   \   000022   EE           MOV     A,R6
   \   000023   C3           CLR     C
   \   000024   9408         SUBB    A,#0x8
   \   000026   40E7         JC      ??ucI2CEcrireOctet_2
    203          		                            //
    204            ucAck = ucI2CLireBit();                   //Lit le bus pour saisir le ACK
   \   000028                ; Setup parameters for call to function CLI2CBase::ucI2CLireBit()
   \   000028   AA82         MOV     R2,DPL
   \   00002A   AB83         MOV     R3,DPH
   \   00002C   12....       LCALL   ??ucI2CLireBit
   \   00002F   E9           MOV     A,R1
   \   000030   FE           MOV     R6,A
    205            vDelais();                                //Delai
   \   000031                ; Setup parameters for call to function CLI2CBase::vDelais()
   \   000031   AA82         MOV     R2,DPL
   \   000033   AB83         MOV     R3,DPH
   \   000035   12....       LCALL   ??vDelais
    206            return(ucAck);                            //retourne la valeur de ACK
   \   000038   EE           MOV     A,R6
   \   000039   F9           MOV     R1,A
   \   00003A   7F01         MOV     R7,#0x1
   \   00003C   02....       LJMP    ?FUNC_LEAVE_XDATA
    207          
    208          
    209          }
    210          
    211          //***********************Fonction:ucI2CLireBit*********************************
    212          //
    213          //Description:Cette fonction permet de faire un delai
    214          //
    215          // NOM:UC CLI2CBase :: ucI2CLireBit(void)
    216          //
    217          // 
    218          // PARAMETRE D'ENTREE:Aucun 
    219          //
    220          // PARAMETRE DE SORTIE:ucBit: bit lue sur le port peut etre 1 ou 0              
    221          //
    222          // EXEMPLE:
    223          //
    224          // PROCEDURES APPELEES: ucI2CLireBit()
    225          //
    226          // DATE DE CREATION: 3 septembre 2013    AUTEUR: Gabriel Fortin-B
    227          // DATE DE MODIFICATION:	
    228          //*****************************************************************************	

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    229          UC CLI2CBase :: ucI2CLireBit(void)
   \                     ??ucI2CLireBit:
    230          {
   \   000000   74F8         MOV     A,#-0x8
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 8
   \   000005                ; Auto size: 0
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
    231            UC ucBit;      //Declare une variable pour stocker le bit lu
    232          		               // 
    233            SDA = HIGH;    //Met la ligne de donnée a 1 
   \   000009   D294         SETB    0x90.4
    234            vDelais();     //Attend que sa se stabilise
   \   00000B                ; Setup parameters for call to function CLI2CBase::vDelais()
   \   00000B   AA82         MOV     R2,DPL
   \   00000D   AB83         MOV     R3,DPH
   \   00000F   12....       LCALL   ??vDelais
    235            SCL =  HIGH;   //L'horloge mis a 1
   \   000012   D295         SETB    0x90.5
    236            vDelais();     //Attend que sa se stabilise
   \   000014                ; Setup parameters for call to function CLI2CBase::vDelais()
   \   000014   AA82         MOV     R2,DPL
   \   000016   AB83         MOV     R3,DPH
   \   000018   12....       LCALL   ??vDelais
    237            ucBit = SDA;   //Stocke le bit lu
   \   00001B   A294         MOV     C,0x90.4
   \   00001D   E4           CLR     A
   \   00001E   33           RLC     A
   \   00001F   FE           MOV     R6,A
    238            vDelais();     //Attend que sa se stabilise
   \   000020                ; Setup parameters for call to function CLI2CBase::vDelais()
   \   000020   AA82         MOV     R2,DPL
   \   000022   AB83         MOV     R3,DPH
   \   000024   12....       LCALL   ??vDelais
    239            SCL = LOW;     //Horloge mis a 0
   \   000027   C295         CLR     0x90.5
    240            vDelais();     //Attend que sa se stabilise
   \   000029                ; Setup parameters for call to function CLI2CBase::vDelais()
   \   000029   AA82         MOV     R2,DPL
   \   00002B   AB83         MOV     R3,DPH
   \   00002D   12....       LCALL   ??vDelais
    241            return(ucBit); //retourne la valeur du bit lu
   \   000030   EE           MOV     A,R6
   \   000031   F9           MOV     R1,A
   \   000032   7F01         MOV     R7,#0x1
   \   000034   02....       LJMP    ?FUNC_LEAVE_XDATA
   \   000037                REQUIRE _A_P1
    242          
    243          }
    244          
    245          
    246          //***********************Fonction:ucI2CEcrireBit*******************************
    247          //
    248          //Description:Cette fonction permet d'ecrire un bit sur le bus 
    249          //
    250          //
    251          // NOM:U2C CLICBase :: ucI2CEcrireBit(UC ucValeur)
    252          // 
    253          // PARAMETRE D'ENTREE:ucValeur: valeur du bit a envoyer. 0 ou 1.
    254          //
    255          // PARAMETRE DE SORTIE:ucValeur: retourne la valeur du bit             
    256          //
    257          // EXEMPLE: ucValeur = 0;
    258          //
    259          // PROCEDURES APPELEES:ucI2CEcrireBit()
    260          //
    261          // DATE DE CREATION: 3 septembre 2013    AUTEUR: Gabriel Fortin-B
    262          // DATE DE MODIFICATION:	
    263          //***************************************************************************** 

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    264          UC CLI2CBase :: ucI2CEcrireBit(UC ucValeur)
   \                     ??ucI2CEcrireBit:
    265          {
   \   000000   74F8         MOV     A,#-0x8
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 8
   \   000005                ; Auto size: 0
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   E9           MOV     A,R1
   \   00000A   FE           MOV     R6,A
    266             SDA = ucValeur;         //Envoie un bit sur la ligne de donnee
   \   00000B   EE           MOV     A,R6
   \   00000C   FF           MOV     R7,A
   \   00000D   EE           MOV     A,R6
   \   00000E   A2E0         MOV     C,0xE0 /* A   */.0
   \   000010   9294         MOV     0x90.4,C
    267             vDelais();              //
   \   000012                ; Setup parameters for call to function CLI2CBase::vDelais()
   \   000012   AA82         MOV     R2,DPL
   \   000014   AB83         MOV     R3,DPH
   \   000016   12....       LCALL   ??vDelais
    268             SCL = HIGH;             //Ligne d'horloge a 1
   \   000019   D295         SETB    0x90.5
    269             vDelais();              //
   \   00001B                ; Setup parameters for call to function CLI2CBase::vDelais()
   \   00001B   AA82         MOV     R2,DPL
   \   00001D   AB83         MOV     R3,DPH
   \   00001F   12....       LCALL   ??vDelais
    270             SCL = LOW;              //Ligne d'horloge a 0
   \   000022   C295         CLR     0x90.5
    271             vDelais();              //
   \   000024                ; Setup parameters for call to function CLI2CBase::vDelais()
   \   000024   AA82         MOV     R2,DPL
   \   000026   AB83         MOV     R3,DPH
   \   000028   12....       LCALL   ??vDelais
    272             return(ucValeur);       //Renvoie la valeur du bit
   \   00002B   EE           MOV     A,R6
   \   00002C   F9           MOV     R1,A
   \   00002D   7F01         MOV     R7,#0x1
   \   00002F   02....       LJMP    ?FUNC_LEAVE_XDATA
   \   000032                REQUIRE _A_P1
    273          
    274          }
    275          
    276          
    277          //***********************Fonction:vDelais**************************************
    278          //
    279          //Description:Cette fonction permet de faire un delai
    280          //
    281          // NOM: void CLI2CBase ::  vDelais(void)
    282          //
    283          // 
    284          // PARAMETRE D'ENTREE:Aucun 
    285          //
    286          // PARAMETRE DE SORTIE:Aucun              
    287          //
    288          // EXEMPLE:
    289          //
    290          // PROCEDURES APPELEES: vDelai()
    291          //
    292          // DATE DE CREATION: 3 septembre 2013    AUTEUR: Gabriel Fortin-B
    293          // DATE DE MODIFICATION:	
    294          //*****************************************************************************

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    295          void CLI2CBase ::  vDelais(void)
   \                     ??vDelais:
    296          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    297            UC i;                     //Variable pour la boucle
    298            for( i=0 ;i < DELAI; i++);//Compte un nombre de fois pour faire un delai 
   \   000000   7800         MOV     R0,#0x0
   \   000002   8001         SJMP    ??vDelais_1
   \                     ??vDelais_2:
   \   000004   08           INC     R0
   \                     ??vDelais_1:
   \   000005   E8           MOV     A,R0
   \   000006   C3           CLR     C
   \   000007   9464         SUBB    A,#0x64
   \   000009   40F9         JC      ??vDelais_2
    299          
    300          }
   \   00000B   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \   __near_func __xdata_reentrant CLI2CBase &CLI2CBase::new CLI2CBase()
   \                     `??new CLI2CBase`:
   \   000000   C0..         PUSH    ?V0 + 0
   \   000002   C0..         PUSH    ?V0 + 1
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004                ; Setup parameters for call to function operator new(unsigned int)
   \   000004   7A01         MOV     R2,#0x1
   \   000006   7B00         MOV     R3,#0x0
   \   000008   12....       LCALL   `??operator new`
   \   00000B   8A..         MOV     ?V0 + 0,R2
   \   00000D   8B..         MOV     ?V0 + 1,R3
   \   00000F   A8..         MOV     R0,?V0 + 0
   \   000011   A9..         MOV     R1,?V0 + 1
   \   000013   E8           MOV     A,R0
   \   000014   FA           MOV     R2,A
   \   000015   E9           MOV     A,R1
   \   000016   FB           MOV     R3,A
   \   000017   E8           MOV     A,R0
   \   000018   49           ORL     A,R1
   \   000019   600D         JZ      `??new CLI2CBase_1`
   \   00001B                ; Setup parameters for call to function CLI2CBase::CLI2CBase()
   \   00001B   12....       LCALL   ??CLI2CBase
   \   00001E   8A..         MOV     ?V0 + 0,R2
   \   000020   8B..         MOV     ?V0 + 1,R3
   \   000022   AA..         MOV     R2,?V0 + 0
   \   000024   AB..         MOV     R3,?V0 + 1
   \   000026   8004         SJMP    `??new CLI2CBase_2`
   \                     `??new CLI2CBase_1`:
   \   000028   7A00         MOV     R2,#0x0
   \   00002A   7B00         MOV     R3,#0x0
   \                     `??new CLI2CBase_2`:
   \   00002C   D0..         POP     ?V0 + 1
   \   00002E   D0..         POP     ?V0 + 0
   \   000030   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \   __near_func __xdata_reentrant void CLI2CBase::delete ~CLI2CBase(CLI2CBase *)
   \                     `??delete ~CLI2CBase`:
   \   000000   74F8         MOV     A,#-0x8
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 8
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   EE           MOV     A,R6
   \   00000A   4F           ORL     A,R7
   \   00000B   600E         JZ      `??delete ~CLI2CBase_1`
   \   00000D                ; Setup parameters for call to function CLI2CBase::~CLI2CBase()
   \   00000D   EE           MOV     A,R6
   \   00000E   FA           MOV     R2,A
   \   00000F   EF           MOV     A,R7
   \   000010   FB           MOV     R3,A
   \   000011   12....       LCALL   `?~CLI2CBase`
   \   000014                ; Setup parameters for call to function operator delete(void *)
   \   000014   EE           MOV     A,R6
   \   000015   FA           MOV     R2,A
   \   000016   EF           MOV     A,R7
   \   000017   FB           MOV     R3,A
   \   000018   12....       LCALL   `??operator delete`
   \                     `??delete ~CLI2CBase_1`:
   \   00001B   7F01         MOV     R7,#0x1
   \   00001D   02....       LJMP    ?FUNC_LEAVE_XDATA
    301          
    302          //@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       0      0      0  CLI2CBase::CLI2CBase()
       0      0      8  CLI2CBase::delete ~CLI2CBase(CLI2CBase *)
                          0 0  8 -> CLI2CBase::~CLI2CBase()
                          0 0  8 -> operator delete(void *)
       2      0      0  CLI2CBase::new CLI2CBase()
                          2 0  0 -> CLI2CBase::CLI2CBase()
                          2 0  0 -> operator new(unsigned int)
       0      0     16  CLI2CBase::ucI2CEcrireBit(UC)
                          0 0  8 -> CLI2CBase::vDelais()
       0      0      8  CLI2CBase::ucI2CEcrireOctet(UC)
                          0 0  8 -> CLI2CBase::ucI2CEcrireBit(UC)
                          0 0  8 -> CLI2CBase::ucI2CLireBit()
                          0 0  8 -> CLI2CBase::vDelais()
       0      0     18  CLI2CBase::ucI2CLireBit()
                          0 0  8 -> CLI2CBase::vDelais()
       0      0     10  CLI2CBase::ucI2CLireOctet(UC)
                          0 0 10 -> CLI2CBase::ucI2CLireBit()
       0      0      8  CLI2CBase::vDelais()
       2      0      0  CLI2CBase::vI2CStart()
                          2 0  0 -> CLI2CBase::vDelais()
       2      0      0  CLI2CBase::vI2CStop()
                          2 0  0 -> CLI2CBase::vDelais()
       0      0      8  CLI2CBase::~CLI2CBase()


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  CLI2CBase::CLI2CBase()
      32  CLI2CBase::delete ~CLI2CBase(CLI2CBase *)
      49  CLI2CBase::new CLI2CBase()
      50  CLI2CBase::ucI2CEcrireBit(UC)
      63  CLI2CBase::ucI2CEcrireOctet(UC)
      55  CLI2CBase::ucI2CLireBit()
      81  CLI2CBase::ucI2CLireOctet(UC)
      12  CLI2CBase::vDelais()
      42  CLI2CBase::vI2CStart()
      40  CLI2CBase::vI2CStop()
       1  CLI2CBase::~CLI2CBase()
       1  _A_P1

 
 426 bytes in segment NEAR_CODE
   1 byte  in segment SFR_AN
 
 426 bytes of CODE memory
   0 bytes of DATA memory (+ 1 byte shared)

Errors: none
Warnings: none
