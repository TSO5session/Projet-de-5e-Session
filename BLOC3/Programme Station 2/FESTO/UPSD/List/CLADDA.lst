###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             19/Nov/2014  10:59:05 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  near                                               #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data                                               #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  J:\Projet_Session5_LNAH\S2_18Nov2014\Programme     #
#                          Station 2\FESTO\Libraire\CLADDA.cpp                #
#    Command line       =  "J:\Projet_Session5_LNAH\S2_18Nov2014\Programme    #
#                          Station 2\FESTO\Libraire\CLADDA.cpp" -D UPSD3254A  #
#                          --preprocess=cl "J:\Projet_Session5_LNAH\S2_18Nov2 #
#                          014\Programme Station 2\FESTO\UPSD\List\" -lC      #
#                          "J:\Projet_Session5_LNAH\S2_18Nov2014\Programme    #
#                          Station 2\FESTO\UPSD\List\" -lA                    #
#                          "J:\Projet_Session5_LNAH\S2_18Nov2014\Programme    #
#                          Station 2\FESTO\UPSD\List\" -o                     #
#                          "J:\Projet_Session5_LNAH\S2_18Nov2014\Programme    #
#                          Station 2\FESTO\UPSD\Obj\" -e --no_cse             #
#                          --no_unroll --no_inline --no_code_motion           #
#                          --no_tbaa --debug --core=plain --dptr=16,1         #
#                          --data_model=large --code_model=near               #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data --nr_virtual_regs 8         #
#                          --dlib_config "C:\Program Files\IAR                #
#                          Systems\Embedded Workbench                         #
#                          6.4\8051\LIB\DLIB\dl8051Normal.h" -I               #
#                          "J:\Projet_Session5_LNAH\S2_18Nov2014\Programme    #
#                          Station 2\FESTO\Libraire\" -Ol --eec++             #
#    List file          =  J:\Projet_Session5_LNAH\S2_18Nov2014\Programme     #
#                          Station 2\FESTO\UPSD\List\CLADDA.lst               #
#    Object file        =  J:\Projet_Session5_LNAH\S2_18Nov2014\Programme     #
#                          Station 2\FESTO\UPSD\Obj\CLADDA.r51                #
#                                                                             #
#                                                                             #
###############################################################################

J:\Projet_Session5_LNAH\S2_18Nov2014\Programme Station 2\FESTO\Libraire\CLADDA.cpp
      1          // ***************** FICHIER:CLI2CBase.cpp
      2          //
      3          //  Description:Ce fichier contient la definition des differentes fonction 
      4          //              I2C de base qui communique avec le materiel
      5          //
      6          //  Application realisee avec IAR
      7          //
      8          //  AUTEUR : Gabriel Fortin-Belanger
      9          //  DATE CREATION :    2014-02-07		 VERSION: 1.0
     10          //  DATE MODIFICATION: ****-**-**
     11          //
     12          //******************************************************************************
     13          
     14          #include "_DeclarationGenerale.h"

   \                                 In  segment SFR_AN, at 0xb0
   \   union <unnamed> volatile __sfr _A_P3
   \                     _A_P3:
   \   000000                DS 1
     15          #include "CLADDA.h"
     16          
     17          
     18          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
     19          CLADDA :: CLADDA(void)
   \                     ??CLADDA:
     20          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     21          
     22          
     23          
     24          }
   \   000000   22           RET
     25          
     26          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
     27          CLADDA :: ~CLADDA(void)
   \                     `?~CLADDA`:
     28          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     29          
     30          
     31          
     32          }
   \   000000   22           RET
     33          
     34          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
     35          UC CLADDA :: ucConvADBuf(unsigned short int usiChanel)
   \                     ??ucConvADBuf:
     36          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
     37          
     38            ucIn((0xFA08 + usiChanel));
   \   000008                ; Setup parameters for call to function CLInOutBase::ucIn(unsigned short)
   \   000008   EC           MOV     A,R4
   \   000009   2408         ADD     A,#0x8
   \   00000B   FC           MOV     R4,A
   \   00000C   ED           MOV     A,R5
   \   00000D   34FA         ADDC    A,#-0x6
   \   00000F   FD           MOV     R5,A
   \   000010   AA82         MOV     R2,DPL
   \   000012   AB83         MOV     R3,DPH
   \   000014   12....       LCALL   ??ucIn
   \   000017   E9           MOV     A,R1
     39            P3_3 = 0;
   \   000018   C2B3         CLR     0xb0.3
     40            P3_3 = 1;
   \   00001A   D2B3         SETB    0xb0.3
     41            while(P3_2 == 0);
   \                     ??ucConvADBuf_1:
   \   00001C   A2B2         MOV     C,0xb0.2
   \   00001E   50FC         JNC     ??ucConvADBuf_1
     42            return(ucIn(0xFA10));
   \   000020                ; Setup parameters for call to function CLInOutBase::ucIn(unsigned short)
   \   000020   7C10         MOV     R4,#0x10
   \   000022   7DFA         MOV     R5,#-0x6
   \   000024   AA82         MOV     R2,DPL
   \   000026   AB83         MOV     R3,DPH
   \   000028   12....       LCALL   ??ucIn
   \   00002B   D083         POP     DPH
   \   00002D   D082         POP     DPL
   \   00002F   22           RET
   \   000030                REQUIRE _A_P3
     43                   
     44            
     45            
     46          
     47          }
     48          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
     49          void CLADDA :: vConvDALatch(unsigned short int usiChanel , UC ucData)
   \                     ??vConvDALatch:
     50          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
   \   00000D   E9           MOV     A,R1
   \   00000E   FE           MOV     R6,A
     51          
     52          
     53           vOut(0xFA20 , ucData); //Sortie 8bit
   \   00000F                ; Setup parameters for call to function CLInOutBase::vOut(unsigned short, unsigned char)
   \   00000F   EE           MOV     A,R6
   \   000010   F9           MOV     R1,A
   \   000011   7C20         MOV     R4,#0x20
   \   000013   7DFA         MOV     R5,#-0x6
   \   000015   AA82         MOV     R2,DPL
   \   000017   AB83         MOV     R3,DPH
   \   000019   12....       LCALL   ??vOut
     54           vOut((0xFA28 + usiChanel)  , ucData); //Sortie 8bit
   \   00001C                ; Setup parameters for call to function CLInOutBase::vOut(unsigned short, unsigned char)
   \   00001C   EE           MOV     A,R6
   \   00001D   F9           MOV     R1,A
   \   00001E   E5..         MOV     A,?V0 + 0
   \   000020   2428         ADD     A,#0x28
   \   000022   FC           MOV     R4,A
   \   000023   E5..         MOV     A,?V0 + 1
   \   000025   34FA         ADDC    A,#-0x6
   \   000027   FD           MOV     R5,A
   \   000028   AA82         MOV     R2,DPL
   \   00002A   AB83         MOV     R3,DPH
   \   00002C   12....       LCALL   ??vOut
     55          
     56                   
     57            
     58            
     59          
     60          }
   \   00002F   7F02         MOV     R7,#0x2
   \   000031   02....       LJMP    ?FUNC_LEAVE_XDATA

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
     61          UC CLADDA :: ucDataIN(UC ucBit)
   \                     ??ucDataIN:
     62          {
   \   000000   EE           MOV     A,R6
   \   000001   C0E0         PUSH    A
   \   000003                ; Saved register size: 1
   \   000003                ; Auto size: 0
   \   000003   E9           MOV     A,R1
   \   000004   FE           MOV     R6,A
     63            switch(ucBit)
   \   000005   601E         JZ      ??ucDataIN_1
   \   000007   14           DEC     A
   \   000008   602B         JZ      ??ucDataIN_2
   \   00000A   14           DEC     A
   \   00000B   6038         JZ      ??ucDataIN_3
   \   00000D   14           DEC     A
   \   00000E   6045         JZ      ??ucDataIN_4
   \   000010   14           DEC     A
   \   000011   6052         JZ      ??ucDataIN_5
   \   000013   14           DEC     A
   \   000014   605F         JZ      ??ucDataIN_6
   \   000016   14           DEC     A
   \   000017   606C         JZ      ??ucDataIN_7
   \   000019   14           DEC     A
   \   00001A   6079         JZ      ??ucDataIN_8
   \   00001C   14           DEC     A
   \   00001D   7003         JNZ     $+5
   \   00001F   02....       LJMP    ??ucDataIN_9
   \   000022   02....       LJMP    ??ucDataIN_10
     64            {
     65            case 0:
     66               return(  (ucIn(0xFA00)) & 0x01 );
   \                     ??ucDataIN_1:
   \   000025                ; Setup parameters for call to function CLInOutBase::ucIn(unsigned short)
   \   000025   7C00         MOV     R4,#0x0
   \   000027   7DFA         MOV     R5,#-0x6
   \   000029   12....       LCALL   ??ucIn
   \   00002C   E9           MOV     A,R1
   \   00002D   F8           MOV     R0,A
   \   00002E   A2E0         MOV     C,0xE0 /* A   */.0
   \   000030   E4           CLR     A
   \   000031   33           RLC     A
   \   000032   F9           MOV     R1,A
   \   000033   8077         SJMP    ??ucDataIN_10
     67              break;
     68                case 1:
     69               return(  ((ucIn(0xFA00)) & 0x02) >> 1 );
   \                     ??ucDataIN_2:
   \   000035                ; Setup parameters for call to function CLInOutBase::ucIn(unsigned short)
   \   000035   7C00         MOV     R4,#0x0
   \   000037   7DFA         MOV     R5,#-0x6
   \   000039   12....       LCALL   ??ucIn
   \   00003C   E9           MOV     A,R1
   \   00003D   F8           MOV     R0,A
   \   00003E   A2E1         MOV     C,0xE0 /* A   */.1
   \   000040   E4           CLR     A
   \   000041   33           RLC     A
   \   000042   F9           MOV     R1,A
   \   000043   8067         SJMP    ??ucDataIN_10
     70              break;
     71              case 2:
     72               return(  ((ucIn(0xFA00)) & 0x04) >> 2 );
   \                     ??ucDataIN_3:
   \   000045                ; Setup parameters for call to function CLInOutBase::ucIn(unsigned short)
   \   000045   7C00         MOV     R4,#0x0
   \   000047   7DFA         MOV     R5,#-0x6
   \   000049   12....       LCALL   ??ucIn
   \   00004C   E9           MOV     A,R1
   \   00004D   F8           MOV     R0,A
   \   00004E   A2E2         MOV     C,0xE0 /* A   */.2
   \   000050   E4           CLR     A
   \   000051   33           RLC     A
   \   000052   F9           MOV     R1,A
   \   000053   8057         SJMP    ??ucDataIN_10
     73              break;
     74               case 3:
     75               return(  ((ucIn(0xFA00)) & 0x08) >> 3 );
   \                     ??ucDataIN_4:
   \   000055                ; Setup parameters for call to function CLInOutBase::ucIn(unsigned short)
   \   000055   7C00         MOV     R4,#0x0
   \   000057   7DFA         MOV     R5,#-0x6
   \   000059   12....       LCALL   ??ucIn
   \   00005C   E9           MOV     A,R1
   \   00005D   F8           MOV     R0,A
   \   00005E   A2E3         MOV     C,0xE0 /* A   */.3
   \   000060   E4           CLR     A
   \   000061   33           RLC     A
   \   000062   F9           MOV     R1,A
   \   000063   8047         SJMP    ??ucDataIN_10
     76              break;
     77               case 4:
     78               return(  ((ucIn(0xFA00)) & 0x10) >> 4 );
   \                     ??ucDataIN_5:
   \   000065                ; Setup parameters for call to function CLInOutBase::ucIn(unsigned short)
   \   000065   7C00         MOV     R4,#0x0
   \   000067   7DFA         MOV     R5,#-0x6
   \   000069   12....       LCALL   ??ucIn
   \   00006C   E9           MOV     A,R1
   \   00006D   F8           MOV     R0,A
   \   00006E   A2E4         MOV     C,0xE0 /* A   */.4
   \   000070   E4           CLR     A
   \   000071   33           RLC     A
   \   000072   F9           MOV     R1,A
   \   000073   8037         SJMP    ??ucDataIN_10
     79              break;
     80               case 5:
     81               return(  ((ucIn(0xFA00)) & 0x20) >> 5 );
   \                     ??ucDataIN_6:
   \   000075                ; Setup parameters for call to function CLInOutBase::ucIn(unsigned short)
   \   000075   7C00         MOV     R4,#0x0
   \   000077   7DFA         MOV     R5,#-0x6
   \   000079   12....       LCALL   ??ucIn
   \   00007C   E9           MOV     A,R1
   \   00007D   F8           MOV     R0,A
   \   00007E   A2E5         MOV     C,0xE0 /* A   */.5
   \   000080   E4           CLR     A
   \   000081   33           RLC     A
   \   000082   F9           MOV     R1,A
   \   000083   8027         SJMP    ??ucDataIN_10
     82              break;
     83                case 6:
     84               return(  ((ucIn(0xFA00)) & 0x40) >> 6 );
   \                     ??ucDataIN_7:
   \   000085                ; Setup parameters for call to function CLInOutBase::ucIn(unsigned short)
   \   000085   7C00         MOV     R4,#0x0
   \   000087   7DFA         MOV     R5,#-0x6
   \   000089   12....       LCALL   ??ucIn
   \   00008C   E9           MOV     A,R1
   \   00008D   F8           MOV     R0,A
   \   00008E   A2E6         MOV     C,0xE0 /* A   */.6
   \   000090   E4           CLR     A
   \   000091   33           RLC     A
   \   000092   F9           MOV     R1,A
   \   000093   8017         SJMP    ??ucDataIN_10
     85              break;
     86               case 7:
     87               return(  ((ucIn(0xFA00)) & 0x80) >> 7 );
   \                     ??ucDataIN_8:
   \   000095                ; Setup parameters for call to function CLInOutBase::ucIn(unsigned short)
   \   000095   7C00         MOV     R4,#0x0
   \   000097   7DFA         MOV     R5,#-0x6
   \   000099   12....       LCALL   ??ucIn
   \   00009C   E9           MOV     A,R1
   \   00009D   F8           MOV     R0,A
   \   00009E   A2E7         MOV     C,0xE0 /* A   */.7
   \   0000A0   E4           CLR     A
   \   0000A1   33           RLC     A
   \   0000A2   F9           MOV     R1,A
   \   0000A3   8007         SJMP    ??ucDataIN_10
     88              break;
     89               case 8:
     90               return( ucIn(0xFA00));
   \                     ??ucDataIN_9:
   \   0000A5                ; Setup parameters for call to function CLInOutBase::ucIn(unsigned short)
   \   0000A5   7C00         MOV     R4,#0x0
   \   0000A7   7DFA         MOV     R5,#-0x6
   \   0000A9   12....       LCALL   ??ucIn
     91              break;
     92            
     93            }
     94            
     95           
     96          
     97          }
                 ^
Warning[Pe940]: missing return statement at end of non-void function
          "CLADDA::ucDataIN"
   \                     ??ucDataIN_10:
   \   0000AC   D0E0         POP     A
   \   0000AE   FE           MOV     R6,A
   \   0000AF   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \   __near_func __xdata_reentrant CLADDA &CLADDA::new CLADDA()
   \                     `??new CLADDA`:
   \   000000   C0..         PUSH    ?V0 + 0
   \   000002   C0..         PUSH    ?V0 + 1
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004                ; Setup parameters for call to function operator new(unsigned int)
   \   000004   7A04         MOV     R2,#0x4
   \   000006   7B00         MOV     R3,#0x0
   \   000008   12....       LCALL   `??operator new`
   \   00000B   8A..         MOV     ?V0 + 0,R2
   \   00000D   8B..         MOV     ?V0 + 1,R3
   \   00000F   A8..         MOV     R0,?V0 + 0
   \   000011   A9..         MOV     R1,?V0 + 1
   \   000013   E8           MOV     A,R0
   \   000014   FA           MOV     R2,A
   \   000015   E9           MOV     A,R1
   \   000016   FB           MOV     R3,A
   \   000017   E8           MOV     A,R0
   \   000018   49           ORL     A,R1
   \   000019   600D         JZ      `??new CLADDA_1`
   \   00001B                ; Setup parameters for call to function CLADDA::CLADDA()
   \   00001B   12....       LCALL   ??CLADDA
   \   00001E   8A..         MOV     ?V0 + 0,R2
   \   000020   8B..         MOV     ?V0 + 1,R3
   \   000022   AA..         MOV     R2,?V0 + 0
   \   000024   AB..         MOV     R3,?V0 + 1
   \   000026   8004         SJMP    `??new CLADDA_2`
   \                     `??new CLADDA_1`:
   \   000028   7A00         MOV     R2,#0x0
   \   00002A   7B00         MOV     R3,#0x0
   \                     `??new CLADDA_2`:
   \   00002C   D0..         POP     ?V0 + 1
   \   00002E   D0..         POP     ?V0 + 0
   \   000030   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \   __near_func __xdata_reentrant void CLADDA::delete ~CLADDA(CLADDA *)
   \                     `??delete ~CLADDA`:
   \   000000   74F8         MOV     A,#-0x8
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 8
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   EE           MOV     A,R6
   \   00000A   4F           ORL     A,R7
   \   00000B   600E         JZ      `??delete ~CLADDA_1`
   \   00000D                ; Setup parameters for call to function CLADDA::~CLADDA()
   \   00000D   EE           MOV     A,R6
   \   00000E   FA           MOV     R2,A
   \   00000F   EF           MOV     A,R7
   \   000010   FB           MOV     R3,A
   \   000011   12....       LCALL   `?~CLADDA`
   \   000014                ; Setup parameters for call to function operator delete(void *)
   \   000014   EE           MOV     A,R6
   \   000015   FA           MOV     R2,A
   \   000016   EF           MOV     A,R7
   \   000017   FB           MOV     R3,A
   \   000018   12....       LCALL   `??operator delete`
   \                     `??delete ~CLADDA_1`:
   \   00001B   7F01         MOV     R7,#0x1
   \   00001D   02....       LJMP    ?FUNC_LEAVE_XDATA
     98          
     99          
    100          
    101          
    102          //@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       0      0      0  CLADDA::CLADDA()
       0      0      8  CLADDA::delete ~CLADDA(CLADDA *)
                          0 0 8 -> CLADDA::~CLADDA()
                          0 0 8 -> operator delete(void *)
       2      0      0  CLADDA::new CLADDA()
                          2 0 0 -> CLADDA::CLADDA()
                          2 0 0 -> operator new(unsigned int)
       2      0      0  CLADDA::ucConvADBuf(unsigned short)
                          2 0 0 -> CLInOutBase::ucIn(unsigned short)
       1      0      0  CLADDA::ucDataIN(UC)
                          1 0 0 -> CLInOutBase::ucIn(unsigned short)
       0      0      9  CLADDA::vConvDALatch(unsigned short, UC)
                          0 0 9 -> CLInOutBase::vOut(unsigned short, unsigned char)
       0      0      8  CLADDA::~CLADDA()


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  CLADDA::CLADDA()
      32  CLADDA::delete ~CLADDA(CLADDA *)
      49  CLADDA::new CLADDA()
      48  CLADDA::ucConvADBuf(unsigned short)
     176  CLADDA::ucDataIN(UC)
      52  CLADDA::vConvDALatch(unsigned short, UC)
       1  CLADDA::~CLADDA()
       1  _A_P3

 
 359 bytes in segment NEAR_CODE
   1 byte  in segment SFR_AN
 
 359 bytes of CODE memory
   0 bytes of DATA memory (+ 1 byte shared)

Errors: none
Warnings: 1
