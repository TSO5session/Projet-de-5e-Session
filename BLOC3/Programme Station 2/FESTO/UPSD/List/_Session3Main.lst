###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             19/Nov/2014  11:00:50 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  near                                               #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data                                               #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  J:\Projet_Session5_LNAH\S2_18Nov2014\Programme     #
#                          Station 2\FESTO\Libraire\_Session3Main.cpp         #
#    Command line       =  "J:\Projet_Session5_LNAH\S2_18Nov2014\Programme    #
#                          Station 2\FESTO\Libraire\_Session3Main.cpp" -D     #
#                          UPSD3254A --preprocess=cl                          #
#                          "J:\Projet_Session5_LNAH\S2_18Nov2014\Programme    #
#                          Station 2\FESTO\UPSD\List\" -lC                    #
#                          "J:\Projet_Session5_LNAH\S2_18Nov2014\Programme    #
#                          Station 2\FESTO\UPSD\List\" -lA                    #
#                          "J:\Projet_Session5_LNAH\S2_18Nov2014\Programme    #
#                          Station 2\FESTO\UPSD\List\" -o                     #
#                          "J:\Projet_Session5_LNAH\S2_18Nov2014\Programme    #
#                          Station 2\FESTO\UPSD\Obj\" -e --no_cse             #
#                          --no_unroll --no_inline --no_code_motion           #
#                          --no_tbaa --debug --core=plain --dptr=16,1         #
#                          --data_model=large --code_model=near               #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data --nr_virtual_regs 8         #
#                          --dlib_config "C:\Program Files\IAR                #
#                          Systems\Embedded Workbench                         #
#                          6.4\8051\LIB\DLIB\dl8051Normal.h" -I               #
#                          "J:\Projet_Session5_LNAH\S2_18Nov2014\Programme    #
#                          Station 2\FESTO\Libraire\" -Ol --eec++             #
#    List file          =  J:\Projet_Session5_LNAH\S2_18Nov2014\Programme     #
#                          Station 2\FESTO\UPSD\List\_Session3Main.lst        #
#    Object file        =  J:\Projet_Session5_LNAH\S2_18Nov2014\Programme     #
#                          Station 2\FESTO\UPSD\Obj\_Session3Main.r51         #
#                                                                             #
#                                                                             #
###############################################################################

J:\Projet_Session5_LNAH\S2_18Nov2014\Programme Station 2\FESTO\Libraire\_Session3Main.cpp
      1          
      2          
      3          // ************************** FICHIER: ProjetSessionCinqMain.CPP  ****
      4          //  Application realisee avec IAR C++ 8.10
      5          //  LABORATOIRE PROJET FIN SESSION
      6          //
      7          //  VITESSE DE COMMUNICATION 19200
      8          //
      9          //  LIMITATION DU COMPILATEUR:
     10          //    Impossible de faire de l'heritage multiple.
     11          //
     12          //  Programme principal.
     13          //
     14          //  Note on peut utiliser XAR pour creer des librairies.
     15          //  On peut mettre les librairies dans le projets et Exclure de la compilation
     16          //  les modules qui sont contenus dans la librairie.
     17          //
     18          //  Pour Windows 7 on utilise la VMware pour programmer le upsd 3254A avec CAPS.
     19          //
     20          //  AUTEUR : Gabriel Fortin-B
     21          //  DATE CREATION :    2012-12-20		 VERSION: 1.0
     22          //  DATE MODIFICATION: ****-**-**
     23          //
     24          // ************************************************************************
     25          #include "_DeclarationGenerale.h"

   \                                 In  segment SFR_AN, at 0xae
   \   unsigned char volatile __sfr WDKEY
   \                     WDKEY:
   \   000000                DS 1
     26          
     27          #include "MainStation2.h"

  unsigned char CLMCP2515 :: LireDonnesMCP2515(unsigned char NombreDonneesEnvoyer, unsigned char Donnee1, unsigned char Donnee2, unsigned char Donnee3);
                ^
"J:\Projet_Session5_LNAH\S2_18Nov2014\Programme Station 2\FESTO\Libraire\CLMCP2515.h",33  Warning[Pe427]: 
          qualified name is not allowed in member declaration
     28          #include <stdio.h>
     29           
     30          
     31           
     32          void vInit_CPU(void); // initialise le microcontroller
     33           

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \   static __intrinsic __near_func __xdata_reentrant void __sti__routine()
   \                     ??__sti__routine:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     34             CLSPI clSPI;
   \   000000                ; Setup parameters for call to function CLSPI::CLSPI()
   \   000000   7A..         MOV     R2,#clSPI & 0xff
   \   000002   7B..         MOV     R3,#(clSPI >> 8) & 0xff
   \   000004   12....       LCALL   ??CLSPI
   \   000007                ; Setup parameters for call to function __record_needed_destruction
   \   000007   7A..         MOV     R2,#?_0 & 0xff
   \   000009   7B..         MOV     R3,#(?_0 >> 8) & 0xff
   \   00000B   12....       LCALL   __record_needed_destruction
     35             CLEcran clEcran;
   \   00000E                ; Setup parameters for call to function CLEcran::CLEcran()
   \   00000E   7A..         MOV     R2,#clEcran & 0xff
   \   000010   7B..         MOV     R3,#(clEcran >> 8) & 0xff
   \   000012   12....       LCALL   ??CLEcran
   \   000015                ; Setup parameters for call to function __record_needed_destruction
   \   000015   7A..         MOV     R2,#?_2 & 0xff
   \   000017   7B..         MOV     R3,#(?_2 >> 8) & 0xff
   \   000019   12....       LCALL   __record_needed_destruction
     36             CLADDA clADDA;
   \   00001C                ; Setup parameters for call to function CLADDA::CLADDA()
   \   00001C   7A..         MOV     R2,#clADDA & 0xff
   \   00001E   7B..         MOV     R3,#(clADDA >> 8) & 0xff
   \   000020   12....       LCALL   ??CLADDA
   \   000023                ; Setup parameters for call to function __record_needed_destruction
   \   000023   7A..         MOV     R2,#?_4 & 0xff
   \   000025   7B..         MOV     R3,#(?_4 >> 8) & 0xff
   \   000027   12....       LCALL   __record_needed_destruction
     37             CLCommunic clCommunic;
   \   00002A                ; Setup parameters for call to function CLCommunic::CLCommunic()
   \   00002A   7A..         MOV     R2,#clCommunic & 0xff
   \   00002C   7B..         MOV     R3,#(clCommunic >> 8) & 0xff
   \   00002E   12....       LCALL   ??CLCommunic
   \   000031                ; Setup parameters for call to function __record_needed_destruction
   \   000031   7A..         MOV     R2,#?_6 & 0xff
   \   000033   7B..         MOV     R3,#(?_6 >> 8) & 0xff
   \   000035   02....       LJMP    __record_needed_destruction

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     clSPI:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     clEcran:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     clADDA:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     clCommunic:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     38              //CLDelai clDelai;
     39             
     40             
     41          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
     42          void main(void)
   \                     main:
     43          {
   \   000000                ; Auto size: 0
     44             vInit_CPU();
   \   000000                ; Setup parameters for call to function vInit_CPU()
   \   000000   12....       LCALL   ??vInit_CPU
     45             while(1)  //faire sans fin
     46              {
     47                 clCommunic.vTransString("ALLO");
   \                     ??main_0:
   \   000003                ; Setup parameters for call to function CLCommunic::vTransString(char const *)
   \   000003   7C..         MOV     R4,#`?<Constant "ALLO">` & 0xff
   \   000005   7D..         MOV     R5,#(`?<Constant "ALLO">` >> 8) & 0xff
   \   000007   7A..         MOV     R2,#clCommunic & 0xff
   \   000009   7B..         MOV     R3,#(clCommunic >> 8) & 0xff
   \   00000B   12....       LCALL   ??vTransString
     48                 if(clCommunic.ucLireNbCaractRecu() == 4)
   \   00000E                ; Setup parameters for call to function CLCommunic::ucLireNbCaractRecu()
   \   00000E   7A..         MOV     R2,#clCommunic & 0xff
   \   000010   7B..         MOV     R3,#(clCommunic >> 8) & 0xff
   \   000012   12....       LCALL   ??ucLireNbCaractRecu
   \   000015   E9           MOV     A,R1
   \   000016   6404         XRL     A,#0x4
   \   000018   70E9         JNZ     ??main_0
     49                 {
     50                    clEcran.vLcdPoscurC0L1(0,1);
   \   00001A                ; Setup parameters for call to function CLEcran::vLcdPoscurC0L1(UC, UC)
   \   00001A   7C01         MOV     R4,#0x1
   \   00001C   7900         MOV     R1,#0x0
   \   00001E   7A..         MOV     R2,#clEcran & 0xff
   \   000020   7B..         MOV     R3,#(clEcran >> 8) & 0xff
   \   000022   12....       LCALL   ??vLcdPoscurC0L1
     51                    clEcran.vLcdAffCar(clCommunic.ucpLireTrame()[1]);
   \   000025                ; Setup parameters for call to function CLEcran::vLcdAffCar(UC)
   \   000025                ; Setup parameters for call to function CLCommunic::ucpLireTrame()
   \   000025   7A..         MOV     R2,#clCommunic & 0xff
   \   000027   7B..         MOV     R3,#(clCommunic >> 8) & 0xff
   \   000029   12....       LCALL   ??ucpLireTrame
   \   00002C   8A82         MOV     DPL,R2
   \   00002E   8B83         MOV     DPH,R3
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F9           MOV     R1,A
   \   000033   7A..         MOV     R2,#clEcran & 0xff
   \   000035   7B..         MOV     R3,#(clEcran >> 8) & 0xff
   \   000037   12....       LCALL   ??vLcdAffCar
     52                    clEcran.vLcdAffCar(clCommunic.ucpLireTrame()[2]);
   \   00003A                ; Setup parameters for call to function CLEcran::vLcdAffCar(UC)
   \   00003A                ; Setup parameters for call to function CLCommunic::ucpLireTrame()
   \   00003A   7A..         MOV     R2,#clCommunic & 0xff
   \   00003C   7B..         MOV     R3,#(clCommunic >> 8) & 0xff
   \   00003E   12....       LCALL   ??ucpLireTrame
   \   000041   8A82         MOV     DPL,R2
   \   000043   8B83         MOV     DPH,R3
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F9           MOV     R1,A
   \   000049   7A..         MOV     R2,#clEcran & 0xff
   \   00004B   7B..         MOV     R3,#(clEcran >> 8) & 0xff
   \   00004D   12....       LCALL   ??vLcdAffCar
     53                    clEcran.vLcdAffCar(clCommunic.ucpLireTrame()[3]);
   \   000050                ; Setup parameters for call to function CLEcran::vLcdAffCar(UC)
   \   000050                ; Setup parameters for call to function CLCommunic::ucpLireTrame()
   \   000050   7A..         MOV     R2,#clCommunic & 0xff
   \   000052   7B..         MOV     R3,#(clCommunic >> 8) & 0xff
   \   000054   12....       LCALL   ??ucpLireTrame
   \   000057   8A82         MOV     DPL,R2
   \   000059   8B83         MOV     DPH,R3
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   F9           MOV     R1,A
   \   000060   7A..         MOV     R2,#clEcran & 0xff
   \   000062   7B..         MOV     R3,#(clEcran >> 8) & 0xff
   \   000064   12....       LCALL   ??vLcdAffCar
     54                    clEcran.vLcdAffCar(clCommunic.ucpLireTrame()[4]);                                        
   \   000067                ; Setup parameters for call to function CLEcran::vLcdAffCar(UC)
   \   000067                ; Setup parameters for call to function CLCommunic::ucpLireTrame()
   \   000067   7A..         MOV     R2,#clCommunic & 0xff
   \   000069   7B..         MOV     R3,#(clCommunic >> 8) & 0xff
   \   00006B   12....       LCALL   ??ucpLireTrame
   \   00006E   8A82         MOV     DPL,R2
   \   000070   8B83         MOV     DPH,R3
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   A3           INC     DPTR
   \   000076   E0           MOVX    A,@DPTR
   \   000077   F9           MOV     R1,A
   \   000078   7A..         MOV     R2,#clEcran & 0xff
   \   00007A   7B..         MOV     R3,#(clEcran >> 8) & 0xff
   \   00007C   12....       LCALL   ??vLcdAffCar
   \   00007F   8082         SJMP    ??main_0
     55                 }
     56              }
     57          }// void main (void)
     58          
     59          
     60          //************************ TITRE : vInit_CPU    ***************************
     61          //
     62          //  DESCRIPTION :Initialisation du microcontroleur
     63          //
     64          //  NOM: void vInit_CPU (void)
     65          //
     66          //  PARAMETRE D'ENTREE:  AUCUN
     67          //
     68          //  PARAMETRE DE SORTIE: AUCUN
     69          //
     70          //  MEMBRES UTILISES:
     71          //       Fonctions       : AUCUNE
     72          //       Donnees         : AUCUNE
     73          //                      :
     74          //  AUTEUR : DANIEL BRETON
     75          //  DATE CREATION :    2012-12-20		 VERSION: 1.0
     76          //  DATE MODIFICATION: ****-**-**
     77          //
     78          // ****************************************************************************
     79          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
     80          void vInit_CPU(void)
   \                     ??vInit_CPU:
     81          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     82            #ifdef UPSD3254A
     83               WDKEY =0x55;  //desactive le watchdog du upsd
   \   000000   75AE55       MOV     0xae,#0x55
     84            #endif
     85          } // void vInit_CPU (void)
   \   000003   22           RET
   \   000004                REQUIRE WDKEY

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "ALLO">>`:
   \   000000   414C4C4F     DB "ALLO"
   \            00      

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for >`:
   \   000000   ....         DW ?_1
   \   000002   ....         DW clSPI
   \   000004   ....         DW `?~CLSPI`

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for >_1`:
   \   000000   ....         DW ?_3
   \   000002   ....         DW clEcran
   \   000004   ....         DW `?~CLEcran`

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for >_2`:
   \   000000   ....         DW ?_5
   \   000002   ....         DW clADDA
   \   000004   ....         DW `?~CLADDA`

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for >_3`:
   \   000000   ....         DW ?_7
   \   000002   ....         DW clCommunic
   \   000004   ....         DW `?~CLCommunic`

   \                                 In  segment DIFUNCT, align 1, keep-with-next, root
   \   000000                REQUIRE ?cstart_call_ctors
   \   000000   ....         DC16    ??__sti__routine

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     `?<Constant "ALLO">`:
   \   000000                DS 5
   \   000005                REQUIRE `?<Initializer for <Constant "ALLO">>`
   \   000005                REQUIRE __INIT_XDATA_I
     86          
     87          
     88          // ****************************************************************************
     89          
     90          
     91          
     92          
     93          
     94          
     95          

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       0      0      0  __sti__routine()
                          0 0 0 -> CLADDA::CLADDA()
                          0 0 0 -> CLCommunic::CLCommunic()
                          0 0 0 -> CLEcran::CLEcran()
                          0 0 0 -> CLSPI::CLSPI()
                          0 0 0 -> __record_needed_destruction
       0      0      0  main()
                          0 0 0 -> CLCommunic::ucLireNbCaractRecu()
                          0 0 0 -> CLCommunic::ucpLireTrame()
                          0 0 0 -> CLCommunic::vTransString(char const *)
                          0 0 0 -> CLEcran::vLcdAffCar(UC)
                          0 0 0 -> CLEcran::vLcdPoscurC0L1(UC, UC)
                          0 0 0 -> vInit_CPU()
       0      0      0  vInit_CPU()


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       5  ?<Constant "ALLO">
       5  ?<Initializer for <Constant "ALLO">>
       6  ?<Initializer for >
       6  ?<Initializer for >_1
       6  ?<Initializer for >_2
       6  ?<Initializer for >_3
       1  WDKEY
      56  __sti__routine()
       4  clADDA
       1  clCommunic
       6  clEcran
       1  clSPI
     129  main()
       4  vInit_CPU()
      34  -- Other

 
   2 bytes in segment DIFUNCT
 189 bytes in segment NEAR_CODE
   1 byte  in segment SFR_AN
  29 bytes in segment XDATA_I
  29 bytes in segment XDATA_ID
  20 bytes in segment XDATA_Z
 
 220 bytes of CODE  memory
   0 bytes of DATA  memory (+ 1 byte shared)
  49 bytes of XDATA memory

Errors: none
Warnings: 1
