///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.20.2.41139 for 8051            19/Nov/2014  10:59:18 /
// Copyright 2004-2013 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  near                                              /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data                                              /
//    Dptr setup         =  1,16                                              /
//                                                                            /
//    Source file        =  J:\Projet_Session5_LNAH\S2_18Nov2014\Programme    /
//                          Station 2\FESTO\Libraire\CLInOutBase.cpp          /
//    Command line       =  "J:\Projet_Session5_LNAH\S2_18Nov2014\Programme   /
//                          Station 2\FESTO\Libraire\CLInOutBase.cpp" -D      /
//                          UPSD3254A --preprocess=cl                         /
//                          "J:\Projet_Session5_LNAH\S2_18Nov2014\Programme   /
//                          Station 2\FESTO\UPSD\List\" -lC                   /
//                          "J:\Projet_Session5_LNAH\S2_18Nov2014\Programme   /
//                          Station 2\FESTO\UPSD\List\" -lA                   /
//                          "J:\Projet_Session5_LNAH\S2_18Nov2014\Programme   /
//                          Station 2\FESTO\UPSD\List\" -o                    /
//                          "J:\Projet_Session5_LNAH\S2_18Nov2014\Programme   /
//                          Station 2\FESTO\UPSD\Obj\" -e --no_cse            /
//                          --no_unroll --no_inline --no_code_motion          /
//                          --no_tbaa --debug --core=plain --dptr=16,1        /
//                          --data_model=large --code_model=near              /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data --nr_virtual_regs 8        /
//                          --dlib_config "C:\Program Files\IAR               /
//                          Systems\Embedded Workbench                        /
//                          6.4\8051\LIB\DLIB\dl8051Normal.h" -I              /
//                          "J:\Projet_Session5_LNAH\S2_18Nov2014\Programme   /
//                          Station 2\FESTO\Libraire\" -Ol --eec++            /
//    List file          =  J:\Projet_Session5_LNAH\S2_18Nov2014\Programme    /
//                          Station 2\FESTO\UPSD\List\CLInOutBase.s51         /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME CLInOutBase

        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "near"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        EXTERN ?FUNC_ENTER_XDATA
        EXTERN ?FUNC_LEAVE_XDATA
        EXTERN ?V0
        EXTERN ?XSTACK_DISP0_8

        PUBLIC ??ucIn
        FUNCTION ??ucIn,021203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ??ucInportb
        FUNCTION ??ucInportb,0203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ??usiIn
        FUNCTION ??usiIn,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ??vOut
        FUNCTION ??vOut,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        PUBLIC ??vOut_1
        FUNCTION ??vOut_1,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ??vOutportb
        FUNCTION ??vOutportb,0203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 3, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:16, ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
// J:\Projet_Session5_LNAH\S2_18Nov2014\Programme Station 2\FESTO\Libraire\CLInOutBase.cpp
//    1 // ***************** FICHIER:CLInOutBase.cpp
//    2 //
//    3 //  Application realisee avec IAR C++ 8.1  
//    4 //  
//    5 // Description: La classe contient des fonctions In et Out qui peuvent 
//    6 //              travailler a 8 ou 16 bits.Pour les In et Out 16 Bits il faut
//    7 //              fournir un parametre qui donne le type d'acces
//    8 //
//    9 //
//   10 //
//   11 //
//   12 //
//   13 //
//   14 //
//   15 //  AUTEUR : Gabriel Fortin-Belanger
//   16 //  DATE CREATION :    2014-02-07		 VERSION: 1.0
//   17 //  DATE MODIFICATION: ****-**-**
//   18 //
//   19 //******************************************************************************  
//   20 
//   21 
//   22 #include "CLInOutBase.h"
//   23 #include "_DeclarationGenerale.h"
//   24 
//   25 
//   26 //*******************************Constantes************************************
//   27 #define SAMELSB   0U  //2 acces 8 bits a la meme adresse, LSB en premier. 
//   28 #define SAMEMSB   1U  //2 acces 8 bits a la meme adresse, MSB en premier.
//   29 #define SUITELSB  2U  //2 acces 8 bits adresses successives, LSB en  premier
//   30 #define SUITEMSB  3U  // 2 acces 8 bits adresses successives, MSB en premier  
//   31 //******************************************************************************
//   32 
//   33 
//   34 
//   35 
//   36 //***********************vOut
//   37 //
//   38 //Description:Cette fonction permet d ecrire en appelant la fonction vOutportb
//   39 //            
//   40 //           
//   41 // Nom:void CLInOutBase :: vOut(unsigned short int usiAdresse, 
//   42 //                                      unsigned char ucDonnee) 
//   43 //           
//   44 // PARAMETRE D'ENTREE:US usiAdresse: Addresse ou on veut ecrire
//   45 //                    unsigned char ucDonnee: Donnee a envoyer
//   46 // 
//   47 //
//   48 // PARAMETRE DE SORTIE:              
//   49 //
//   50 //    
//   51 // Methode utilise:
//   52 // Fonction: vOutportb();
//   53 // 
//   54 //
//   55 //
//   56 // DATE DE CREATION: 10 octobre 2013    AUTEUR: Gabriel Fortin-B
//   57 // DATE DE MODIFICATION:	
//   58 //*****************************************************************************

        RSEG NEAR_CODE:CODE:NOROOT(0)
//   59 void CLInOutBase :: vOut(unsigned short int usiAdresse, 
??vOut:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function ??vOut
        CODE
//   60                     unsigned char ucDonnee) 
//   61 {
        FUNCALL ??vOut, ??vOutportb
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 1, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,R6
          CFI R6 A
        PUSH    A
          CFI R6 Frame(CFA_SP, 3)
          CFI CFA_SP SP+-3
        ; Saved register size: 1
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//   62    vOutportb(usiAdresse, ucDonnee); 
        ; Setup parameters for call to function CLInOutBase::vOutportb(unsigned short, unsigned char)
        MOV     R1,A
        LCALL   ??vOutportb
//   63 
//   64 }
        POP     A
          CFI R6 A
          CFI CFA_SP SP+-2
        MOV     R6,A
          CFI R6 SameValue
        RET
          CFI EndBlock cfiBlock0
//   65 
//   66 //***********************vOut
//   67 //
//   68 //Description:Cette fonction permet d ecrire en appelant la fonction vOutportb
//   69 //            et permet l ecriture 16 bit  
//   70 //           
//   71 // Nom:void CLInOutBase :: vOut(unsigned short int usiAdresse ,
//   72 //                              unsigned short int usiDonnee,
//   73 //                              unsigned char ucTypeTransfert)
//   74 //           
//   75 // PARAMETRE D'ENTREE:US usiAdresse: Addresse ou on veut ecrire
//   76 //                    unsigned char ucDonnee: Donnee a envoyer
//   77 //                    unsigned char ucTypeTransfert: type de transfert 
//   78 //              SAMELSB: 2 acces 8 bits a la meme adresse, LSB en premier.   
//   79 //              SAMEMSB: 2 acces 8 bits a la meme adresse, MSB en premier.  
//   80 //              SUITELSB: 2 acces 8 bits adresses successives, LSB en  premier 
//   81 //              SUITEMSB:2 acces 8 bits adresses successives, MSB en premier 
//   82 //
//   83 //
//   84 // PARAMETRE DE SORTIE:              
//   85 //
//   86 //    
//   87 // Methode utilise:
//   88 // Fonction: vOutportb();
//   89 // 
//   90 //
//   91 //
//   92 // DATE DE CREATION: 10 octobre 2013    AUTEUR: Gabriel Fortin-B
//   93 // DATE DE MODIFICATION:	
//   94 //*****************************************************************************

        RSEG NEAR_CODE:CODE:NOROOT(0)
//   95 void CLInOutBase :: vOut(unsigned short int usiAdresse ,
??vOut_1:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function ??vOut_1
        CODE
//   96                          unsigned short int usiDonnee,
//   97                          unsigned char ucTypeTransfert)
//   98 {
        FUNCALL ??vOut_1, ??vOutportb
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??vOut_1, ??vOutportb
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??vOut_1, ??vOutportb
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??vOut_1, ??vOutportb
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??vOut_1, ??vOutportb
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??vOut_1, ??vOutportb
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??vOut_1, ??vOutportb
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??vOut_1, ??vOutportb
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?FUNC_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        MOV     ?V0 + 2,R1
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
//   99   unMot16bit.uiWord =  usiDonnee;//place la donnee dans la structure 
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  100   
//  101   switch(ucTypeTransfert)//choisit le type transfit 
        MOV     A,?V0 + 2
        JZ      ??vOut_2
        DEC     A
        JZ      ??vOut_3
        DEC     A
        JZ      ??vOut_4
        DEC     A
        JZ      ??vOut_5
        LJMP    ??vOut_6
//  102   {
//  103     case SAMELSB://2 acces 8 bits a la meme adresse, LSB en premier. 
//  104       vOutportb( usiAdresse,unMot16bit.stOctet16bit.ucBas);  
??vOut_2:
        ; Setup parameters for call to function CLInOutBase::vOutportb(unsigned short, unsigned char)
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??vOutportb
//  105       vOutportb( usiAdresse,unMot16bit.stOctet16bit.ucHaut);
        ; Setup parameters for call to function CLInOutBase::vOutportb(unsigned short, unsigned char)
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??vOutportb
//  106     
//  107     break;
        SJMP    ??vOut_6
//  108     
//  109     case SAMEMSB://2 acces 8 bits a la meme adresse, MSB en premier.
//  110      vOutportb(usiAdresse,unMot16bit.stOctet16bit.ucHaut);
??vOut_3:
        ; Setup parameters for call to function CLInOutBase::vOutportb(unsigned short, unsigned char)
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??vOutportb
//  111     vOutportb(usiAdresse, unMot16bit.stOctet16bit.ucBas);
        ; Setup parameters for call to function CLInOutBase::vOutportb(unsigned short, unsigned char)
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??vOutportb
//  112     break;
        SJMP    ??vOut_6
//  113     
//  114     case SUITELSB://2 acces 8 bits adresses successives, LSB en  premier
//  115       vOutportb(usiAdresse,unMot16bit.stOctet16bit.ucBas);
??vOut_4:
        ; Setup parameters for call to function CLInOutBase::vOutportb(unsigned short, unsigned char)
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??vOutportb
//  116       vOutportb(((usiAdresse)+1), unMot16bit.stOctet16bit.ucHaut);
        ; Setup parameters for call to function CLInOutBase::vOutportb(unsigned short, unsigned char)
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,?V0 + 0
        ADD     A,#0x1
        MOV     R4,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     R5,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??vOutportb
//  117     break;
        SJMP    ??vOut_6
//  118     
//  119     case SUITEMSB://2 acces 8 bits adresses successives, MSB en premier 
//  120         vOutportb(usiAdresse, unMot16bit.stOctet16bit.ucHaut);
??vOut_5:
        ; Setup parameters for call to function CLInOutBase::vOutportb(unsigned short, unsigned char)
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??vOutportb
//  121         vOutportb(((usiAdresse)+1), unMot16bit.stOctet16bit.ucBas);
        ; Setup parameters for call to function CLInOutBase::vOutportb(unsigned short, unsigned char)
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,?V0 + 0
        ADD     A,#0x1
        MOV     R4,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     R5,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??vOutportb
//  122     break;
//  123     
//  124     
//  125   }
//  126 
//  127 
//  128 }
??vOut_6:
        MOV     R7,#0x3
        LJMP    ?FUNC_LEAVE_XDATA
          CFI EndBlock cfiBlock1
//  129 
//  130 //***********************ucIn
//  131 //
//  132 //Description:Cette fonction permet de lire en appelant la fonction ucInportb
//  133 //            
//  134 //           
//  135 // Nom:UC CLInOutBase :: ucIn(unsigned short int usiAdresse) 
//  136 //           
//  137 // PARAMETRE D'ENTREE:US usiAdresse: Addresse ou on veut lire
//  138 //                   
//  139 // 
//  140 //
//  141 // PARAMETRE DE SORTIE: unsigned char ucDonnee: Donnee lu            
//  142 //
//  143 //    
//  144 // Methode utilise:
//  145 // Fonction: ucInportb();
//  146 // 
//  147 //
//  148 //
//  149 // DATE DE CREATION: 10 octobre 2013    AUTEUR: Gabriel Fortin-B
//  150 // DATE DE MODIFICATION:	
//  151 //*****************************************************************************

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  152 UC CLInOutBase :: ucIn(unsigned short int usiAdresse)
??ucIn:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function ??ucIn
        CODE
//  153 {
        FUNCALL ??ucIn, ??ucInportb
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        ; Saved register size: 0
        ; Auto size: 0
//  154   return ucInportb(usiAdresse);
        ; Setup parameters for call to function CLInOutBase::ucInportb(unsigned short)
        LJMP    ??ucInportb
          CFI EndBlock cfiBlock2
//  155 }
//  156 
//  157 
//  158 //***********************usiIn
//  159 //
//  160 //Description:Cette fonction permet de lire en appelant la fonction ucInportb
//  161 //            et permet la lecture 16 bit
//  162 //           
//  163 // Nom:UC CLInOutBase :: ucIn(unsigned short int usiAdresse) 
//  164 //           
//  165 // PARAMETRE D'ENTREE:US usiAdresse: Addresse ou on veut lire
//  166 //                    UC ucTypeTransfert:type de transfert
//  167 //              SAMELSB: 2 acces 8 bits a la meme adresse, LSB en premier.   
//  168 //              SAMEMSB: 2 acces 8 bits a la meme adresse, MSB en premier.  
//  169 //              SUITELSB: 2 acces 8 bits adresses successives, LSB en  premier 
//  170 //              SUITEMSB:2 acces 8 bits adresses successives, MSB en premier 
//  171 // 
//  172 //
//  173 // PARAMETRE DE SORTIE: unsigned char ucDonnee: Donnee lu            
//  174 //
//  175 //    
//  176 // Methode utilise:
//  177 // Fonction: ucInportb();
//  178 // 
//  179 //
//  180 //
//  181 // DATE DE CREATION: 10 octobre 2013    AUTEUR: Gabriel Fortin-B
//  182 // DATE DE MODIFICATION:	
//  183 //*****************************************************************************
//  184 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  185 UINT16 CLInOutBase :: usiIn( unsigned short int usiAdresse,UC ucTypeTransfert)
??usiIn:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function ??usiIn
        CODE
//  186 {
        FUNCALL ??usiIn, ??ucInportb
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??usiIn, ??ucInportb
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??usiIn, ??ucInportb
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??usiIn, ??ucInportb
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??usiIn, ??ucInportb
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??usiIn, ??ucInportb
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??usiIn, ??ucInportb
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??usiIn, ??ucInportb
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?FUNC_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        MOV     ?V0 + 2,R1
//  187 switch(ucTypeTransfert)//choisit le type transfit 
        MOV     A,?V0 + 2
        JZ      ??usiIn_1
        DEC     A
        JZ      ??usiIn_2
        DEC     A
        JZ      ??usiIn_3
        DEC     A
        JZ      ??usiIn_4
        LJMP    ??usiIn_5
//  188   {
//  189     case SAMELSB://2 acces 8 bits a la meme adresse, LSB en premier.
//  190      unMot16bit.stOctet16bit.ucBas = ucInportb(usiAdresse);
??usiIn_1:
        ; Setup parameters for call to function CLInOutBase::ucInportb(unsigned short)
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ucInportb
        MOV     A,R1
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    @DPTR,A
//  191      unMot16bit.stOctet16bit.ucHaut = ucInportb(usiAdresse);
        ; Setup parameters for call to function CLInOutBase::ucInportb(unsigned short)
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ucInportb
        MOV     A,R1
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    @DPTR,A
//  192      
//  193     break;
        SJMP    ??usiIn_5
//  194     
//  195     case SAMEMSB://2 acces 8 bits a la meme adresse, MSB en premier.
//  196      unMot16bit.stOctet16bit.ucHaut = ucInportb(usiAdresse);
??usiIn_2:
        ; Setup parameters for call to function CLInOutBase::ucInportb(unsigned short)
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ucInportb
        MOV     A,R1
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    @DPTR,A
//  197      unMot16bit.stOctet16bit.ucBas = ucInportb(usiAdresse);
        ; Setup parameters for call to function CLInOutBase::ucInportb(unsigned short)
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ucInportb
        MOV     A,R1
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    @DPTR,A
//  198     break;
        SJMP    ??usiIn_5
//  199     
//  200     case SUITELSB://2 acces 8 bits adresses successives, LSB en  premier
//  201      unMot16bit.stOctet16bit.ucBas = ucInportb(usiAdresse);
??usiIn_3:
        ; Setup parameters for call to function CLInOutBase::ucInportb(unsigned short)
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ucInportb
        MOV     A,R1
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    @DPTR,A
//  202    unMot16bit.stOctet16bit.ucHaut = ucInportb(usiAdresse +1);
        ; Setup parameters for call to function CLInOutBase::ucInportb(unsigned short)
        MOV     A,?V0 + 0
        ADD     A,#0x1
        MOV     R4,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     R5,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ucInportb
        MOV     A,R1
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    @DPTR,A
//  203     break;
        SJMP    ??usiIn_5
//  204     
//  205     case SUITEMSB://2 acces 8 bits adresses successives, MSB en premier
//  206      unMot16bit.stOctet16bit.ucBas = ucInportb(usiAdresse);
??usiIn_4:
        ; Setup parameters for call to function CLInOutBase::ucInportb(unsigned short)
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ucInportb
        MOV     A,R1
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    @DPTR,A
//  207      unMot16bit.stOctet16bit.ucHaut = ucInportb(usiAdresse +1);
        ; Setup parameters for call to function CLInOutBase::ucInportb(unsigned short)
        MOV     A,?V0 + 0
        ADD     A,#0x1
        MOV     R4,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     R5,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ucInportb
        MOV     A,R1
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    @DPTR,A
//  208     break;
//  209     
//  210     
//  211   }
//  212 return unMot16bit.uiWord;//retourne la donnee lu 
??usiIn_5:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     R7,#0x3
        LJMP    ?FUNC_LEAVE_XDATA
          CFI EndBlock cfiBlock3
//  213 
//  214 }
//  215 
//  216 
//  217 
//  218 //***********************ucInPortb
//  219 //
//  220 //Description:Cette fonction permet de lire un dispositif I/O relier au bus
//  221 //           
//  222 // Nom:UC CLInOutBase :: ucInportb(unsigned short int usiAdresse)
//  223 //           
//  224 // PARAMETRE D'ENTREE:US usiAdresse: Addresse ou on veut lire
//  225 //                  
//  226 // 
//  227 //
//  228 // PARAMETRE DE SORTIE: UC ucDonnee: retourne la donnee lue              
//  229 //
//  230 //    
//  231 // Methode utilise:
//  232 //
//  233 // DATE DE CREATION: 10 octobre 2013    AUTEUR: Gabriel Fortin-B
//  234 // DATE DE MODIFICATION:	
//  235 //*****************************************************************************

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  236 UC CLInOutBase :: ucInportb(unsigned short int usiAdresse)
??ucInportb:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function ??ucInportb
        CODE
//  237 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 3)
          CFI CFA_SP SP+-3
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
//  238    UC ucDonnee;
//  239    ucpAdresse = (UC xdata *) usiAdresse; //Affecte l'adresse du peripherique 
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
//  240                                          //au pointeur 
//  241    ucDonnee = *ucpAdresse;               // Lit la donnee presente a l'adresse
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        MOV     R1,A
//  242    return(ucDonnee);                     //retourne la donnee
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-2
        RET
          CFI EndBlock cfiBlock4
//  243 
//  244 }
//  245 
//  246 
//  247 //***********************vOutportb
//  248 //
//  249 //Description:Cette fonction permet D'ecrire un dispositif I/O relier au bus
//  250 //           
//  251 // Nom:void  CLInOutBase :: vOutportb(unsigned short int usiAdresse, 
//  252 //                                            unsigned char ucDonnee)
//  253 //           
//  254 // PARAMETRE D'ENTREE:US usiAdresse: Addresse ou on veut lire
//  255 //                    UC ucDonnee: Donnee a ecrire
//  256 // 
//  257 //
//  258 // PARAMETRE DE SORTIE: Aucun              
//  259 //
//  260 //    
//  261 // Methode utilise:
//  262 //
//  263 // DATE DE CREATION: 10 octobre 2013    AUTEUR: Gabriel Fortin-B
//  264 // DATE DE MODIFICATION:	
//  265 //*****************************************************************************

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  266 void  CLInOutBase :: vOutportb(unsigned short int usiAdresse, 
??vOutportb:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function ??vOutportb
        CODE
//  267                                        unsigned char ucDonnee)
//  268 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 3)
          CFI CFA_SP SP+-3
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
//  269    ucpAdresse = (UC xdata *) usiAdresse;//Affecte l'addresse du peripherique 
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
//  270                                         //au pointeur 
//  271    *ucpAdresse = ucDonnee;              //Ecrit  la donnee a l'adresse
        MOV     A,R1
        PUSH    A
          CFI CFA_SP SP+-5
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        POP     A
          CFI CFA_SP SP+-4
        MOVX    @DPTR,A
//  272 
//  273 }
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-2
        RET
          CFI EndBlock cfiBlock5

        END
//  274 
//  275 //@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
// 
// 508 bytes in segment NEAR_CODE
// 
// 508 bytes of CODE memory
//
//Errors: none
//Warnings: none
