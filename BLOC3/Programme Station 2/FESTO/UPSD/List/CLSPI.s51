///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.20.2.41139 for 8051            19/Nov/2014  10:59:02 /
// Copyright 2004-2013 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  near                                              /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data                                              /
//    Dptr setup         =  1,16                                              /
//                                                                            /
//    Source file        =  J:\Projet_Session5_LNAH\S2_18Nov2014\Programme    /
//                          Station 2\FESTO\Libraire\CLSPI.cpp                /
//    Command line       =  "J:\Projet_Session5_LNAH\S2_18Nov2014\Programme   /
//                          Station 2\FESTO\Libraire\CLSPI.cpp" -D UPSD3254A  /
//                          --preprocess=cl "J:\Projet_Session5_LNAH\S2_18Nov /
//                          2014\Programme Station 2\FESTO\UPSD\List\" -lC    /
//                          "J:\Projet_Session5_LNAH\S2_18Nov2014\Programme   /
//                          Station 2\FESTO\UPSD\List\" -lA                   /
//                          "J:\Projet_Session5_LNAH\S2_18Nov2014\Programme   /
//                          Station 2\FESTO\UPSD\List\" -o                    /
//                          "J:\Projet_Session5_LNAH\S2_18Nov2014\Programme   /
//                          Station 2\FESTO\UPSD\Obj\" -e --no_cse            /
//                          --no_unroll --no_inline --no_code_motion          /
//                          --no_tbaa --debug --core=plain --dptr=16,1        /
//                          --data_model=large --code_model=near              /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data --nr_virtual_regs 8        /
//                          --dlib_config "C:\Program Files\IAR               /
//                          Systems\Embedded Workbench                        /
//                          6.4\8051\LIB\DLIB\dl8051Normal.h" -I              /
//                          "J:\Projet_Session5_LNAH\S2_18Nov2014\Programme   /
//                          Station 2\FESTO\Libraire\" -Ol --eec++            /
//    List file          =  J:\Projet_Session5_LNAH\S2_18Nov2014\Programme    /
//                          Station 2\FESTO\UPSD\List\CLSPI.s51               /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME CLSPI

        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "near"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        EXTERN ?FUNC_ENTER_XDATA
        EXTERN ?FUNC_LEAVE_XDATA
        EXTERN ?V0

        PUBLIC ??CLSPI
        FUNCTION ??CLSPI,0203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC `??delete ~CLSPI`
        FUNCTION `??delete ~CLSPI`,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        PUBLIC `??new CLSPI`
        FUNCTION `??new CLSPI`,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ??ucSPITransfert
        FUNCTION ??ucSPITransfert,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC `?~CLSPI`
        FUNCTION `?~CLSPI`,0203H
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBWEAK _A_P1
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:16, ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        EXTERN `??operator delete`
        FUNCTION `??operator delete`,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN `??operator new`
        FUNCTION `??operator new`,010202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// J:\Projet_Session5_LNAH\S2_18Nov2014\Programme Station 2\FESTO\Libraire\CLSPI.cpp
//    1 // ***************** FICHIER:CLPiece.cpp
//    2 //
//    3 //  Description:Ce fichier contient la definition des differentes fonction 
//    4 //              pour controler les pieces
//    5 //
//    6 //  Application realisee avec IAR
//    7 //
//    8 //  AUTEUR : Gabriel Fortin-Belanger
//    9 //  DATE CREATION :    2014-02-07		 VERSION: 1.0
//   10 //  DATE MODIFICATION: ****-**-**
//   11 //
//   12 //******************************************************************************
//   13 
//   14 #include "_DeclarationGenerale.h"

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1

        RSEG NEAR_CODE:CODE:NOROOT(0)
// __near_func __xdata_reentrant CLSPI &CLSPI::new CLSPI()
`??new CLSPI`:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function `??new CLSPI`
        CODE
        FUNCALL `??new CLSPI`, `??operator new`
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL `??new CLSPI`, ??CLSPI
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    ?V0 + 0
          CFI V0 Frame(CFA_SP, 3)
          CFI CFA_SP SP+-3
        PUSH    ?V0 + 1
          CFI V1 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
        ; Setup parameters for call to function operator new(unsigned int)
        MOV     R2,#0x1
        MOV     R3,#0x0
        LCALL   `??operator new`
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R0
        ORL     A,R1
        JZ      `??new CLSPI_1`
        ; Setup parameters for call to function CLSPI::CLSPI()
        LCALL   ??CLSPI
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        SJMP    `??new CLSPI_2`
`??new CLSPI_1`:
        MOV     R2,#0x0
        MOV     R3,#0x0
`??new CLSPI_2`:
        POP     ?V0 + 1
          CFI V1 SameValue
          CFI CFA_SP SP+-3
        POP     ?V0 + 0
          CFI V0 SameValue
          CFI CFA_SP SP+-2
        RET
          CFI EndBlock cfiBlock0

        RSEG NEAR_CODE:CODE:NOROOT(0)
// __near_func __xdata_reentrant void CLSPI::delete ~CLSPI(CLSPI *)
`??delete ~CLSPI`:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function `??delete ~CLSPI`
        CODE
        FUNCALL `??delete ~CLSPI`, `?~CLSPI`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL `??delete ~CLSPI`, `??operator delete`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x8
        LCALL   ?FUNC_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 8)
        ; Saved register size: 8
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     A,R6
        ORL     A,R7
        JZ      `??delete ~CLSPI_1`
        ; Setup parameters for call to function CLSPI::~CLSPI()
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `?~CLSPI`
        ; Setup parameters for call to function operator delete(void *)
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??operator delete`
`??delete ~CLSPI_1`:
        MOV     R7,#0x1
        LJMP    ?FUNC_LEAVE_XDATA
          CFI EndBlock cfiBlock1
//   15 #include "CLSPI.h"
//   16 
//   17 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//   18 CLSPI :: CLSPI(void)
??CLSPI:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function ??CLSPI
        CODE
//   19 {
        ; Saved register size: 0
        ; Auto size: 0
//   20 
//   21 
//   22 
//   23 
//   24 
//   25 }
        RET
          CFI EndBlock cfiBlock2
//   26     
//   27 
//   28 
//   29 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//   30  CLSPI :: ~CLSPI(void)
`?~CLSPI`:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function `?~CLSPI`
        CODE
//   31 {
        ; Saved register size: 0
        ; Auto size: 0
//   32 
//   33 
//   34 
//   35 
//   36 }
        RET
          CFI EndBlock cfiBlock3
//   37    
//   38 
//   39 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//   40 UC CLSPI :: ucSPITransfert( UC ucMode, UC ucByte)
??ucSPITransfert:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function ??ucSPITransfert
        CODE
//   41 {
        ; Saved register size: 0
        ; Auto size: 0
        MOV     A,R1
        MOV     R2,A
        MOV     A,R4
        MOV     R1,A
//   42 
//   43   switch(ucMode)
        MOV     A,R2
        JZ      ??ucSPITransfert_1
        DEC     A
        JZ      ??ucSPITransfert_2
        DEC     A
        JZ      ??ucSPITransfert_3
        DEC     A
        JZ      ??ucSPITransfert_4
        RET
//   44   {
//   45     unsigned char SPI_count; 
//   46   
//   47     
//   48     
//   49         
//   50   case 0x00:
//   51     for (SPI_count = 8; SPI_count > 0; SPI_count--) // single byte SPI loop
??ucSPITransfert_1:
        MOV     R0,#0x8
        SJMP    ??ucSPITransfert_5
//   52      {
//   53       
//   54     
//   55        if(ucByte & 0x80)
//   56        {
//   57          MOSI = 1;
//   58        }
//   59        else
//   60        {
//   61          MOSI = 0;
??ucSPITransfert_6:
        CLR     0x90.5
//   62        }
//   63        
//   64        ucByte = ucByte << 1; // shift next bit into MSB
??ucSPITransfert_7:
        MOV     A,R1
        CLR     C
        RLC     A
        MOV     R1,A
//   65        SCK = 0x01; // set SCK high
        SETB    0x90.6
//   66        
//   67        
//   68      
//   69        ucByte |= MISO; // capture current bit on MISO
        MOV     C,0x90.4
        CLR     A
        RLC     A
        XCH     A,R1
        ORL     A,R1
        MOV     R1,A
//   70        
//   71        
//   72        SCK = 0x00; // set SCK low
        CLR     0x90.6
        DEC     R0
??ucSPITransfert_5:
        MOV     A,R0
        CLR     C
        SUBB    A,#0x1
        JC      ??ucSPITransfert_8
        MOV     A,R1
        MOV     C,0xE0 /* A   */.7
        JNC     ??ucSPITransfert_6
        SETB    0x90.5
        SJMP    ??ucSPITransfert_7
//   73      }
//   74     break;
//   75     
//   76   case 0x01:
//   77  
//   78     for (SPI_count = 8; SPI_count > 0; SPI_count--) // single byte SPI loop
??ucSPITransfert_2:
        MOV     R0,#0x8
        SJMP    ??ucSPITransfert_9
//   79      {
//   80         SCK = 0x01;
//   81       if(ucByte & 0x80)
//   82        {
//   83          MOSI = 1;
//   84        }
//   85        else
//   86        {
//   87          MOSI = 0;
??ucSPITransfert_10:
        CLR     0x90.5
//   88        }   // put current outgoing bit on MOSI
//   89         ucByte = ucByte << 1; // shift next bit into MSB
??ucSPITransfert_11:
        MOV     A,R1
        CLR     C
        RLC     A
        MOV     R1,A
//   90         SCK = 0x00;            // set SCK low
        CLR     0x90.6
//   91         ucByte |= MISO;        // capture current bit on MISO
        MOV     C,0x90.4
        CLR     A
        RLC     A
        XCH     A,R1
        ORL     A,R1
        MOV     R1,A
        DEC     R0
??ucSPITransfert_9:
        MOV     A,R0
        CLR     C
        SUBB    A,#0x1
        JC      ??ucSPITransfert_8
        SETB    0x90.6
        MOV     A,R1
        MOV     C,0xE0 /* A   */.7
        JNC     ??ucSPITransfert_10
        SETB    0x90.5
        SJMP    ??ucSPITransfert_11
//   92      }
//   93   break;
//   94    
//   95   case 0x02:
//   96    for (SPI_count = 8; SPI_count > 0; SPI_count--) // single byte SPI loop
??ucSPITransfert_3:
        MOV     R0,#0x8
        SJMP    ??ucSPITransfert_12
//   97     {
//   98             if(ucByte & 0x80)
//   99        {
//  100          MOSI = 1;
//  101        }
//  102        else
//  103        {
//  104          MOSI = 0;
??ucSPITransfert_13:
        CLR     0x90.5
//  105        } // put current outgoing bit on MOSI
//  106       ucByte = ucByte << 1; // shift next bit into MSB
??ucSPITransfert_14:
        MOV     A,R1
        CLR     C
        RLC     A
        MOV     R1,A
//  107      SCK = 0x00; // set SCK low
        CLR     0x90.6
//  108      ucByte |= MISO; // capture current bit on MISO
        MOV     C,0x90.4
        CLR     A
        RLC     A
        XCH     A,R1
        ORL     A,R1
        MOV     R1,A
//  109      SCK = 0x01; // set SCK high
        SETB    0x90.6
        DEC     R0
??ucSPITransfert_12:
        MOV     A,R0
        CLR     C
        SUBB    A,#0x1
        JC      ??ucSPITransfert_8
        MOV     A,R1
        MOV     C,0xE0 /* A   */.7
        JNC     ??ucSPITransfert_13
        SETB    0x90.5
        SJMP    ??ucSPITransfert_14
//  110     }
//  111   break;
//  112     
//  113   case 0x03:
//  114     
//  115   for (SPI_count = 8; SPI_count > 0; SPI_count--) // single byte SPI loop
??ucSPITransfert_4:
        MOV     R0,#0x8
        SJMP    ??ucSPITransfert_15
//  116    {
//  117      SCK = 0x00; // set SCK low
//  118             if(ucByte & 0x80)
//  119        {
//  120          MOSI = 1;
//  121        }
//  122        else
//  123        {
//  124          MOSI = 0;
??ucSPITransfert_16:
        CLR     0x90.5
//  125        }// put current outgoing bit on MOSI
//  126      ucByte = ucByte << 1; // shift next bit into MSB
??ucSPITransfert_17:
        MOV     A,R1
        CLR     C
        RLC     A
        MOV     R1,A
//  127      SCK = 0x01; // set SCK high
        SETB    0x90.6
//  128      ucByte |= MISO; // capture current bit on MISO
        MOV     C,0x90.4
        CLR     A
        RLC     A
        XCH     A,R1
        ORL     A,R1
        MOV     R1,A
        DEC     R0
??ucSPITransfert_15:
        MOV     A,R0
        CLR     C
        SUBB    A,#0x1
        JC      ??ucSPITransfert_8
        CLR     0x90.6
        MOV     A,R1
        MOV     C,0xE0 /* A   */.7
        JNC     ??ucSPITransfert_16
        SETB    0x90.5
        SJMP    ??ucSPITransfert_17
//  129    }
//  130    
//  131   break;
//  132     
//  133   
//  134 
//  135     
//  136   }
//  137 
//  138   
//  139   
//  140   
//  141    return(ucByte);
??ucSPITransfert_8:
        RET
          CFI EndBlock cfiBlock4
        REQUIRE _A_P1
//  142   
//  143 
//  144 
//  145 }

        END
// 
// 249 bytes in segment NEAR_CODE
//   1 byte  in segment SFR_AN
// 
// 249 bytes of CODE memory
//   0 bytes of DATA memory (+ 1 byte shared)
//
//Errors: none
//Warnings: none
