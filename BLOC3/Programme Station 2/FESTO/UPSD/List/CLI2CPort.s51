///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.20.2.41139 for 8051            19/Nov/2014  10:59:16 /
// Copyright 2004-2013 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  near                                              /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data                                              /
//    Dptr setup         =  1,16                                              /
//                                                                            /
//    Source file        =  J:\Projet_Session5_LNAH\S2_18Nov2014\Programme    /
//                          Station 2\FESTO\Libraire\CLI2CPort.cpp            /
//    Command line       =  "J:\Projet_Session5_LNAH\S2_18Nov2014\Programme   /
//                          Station 2\FESTO\Libraire\CLI2CPort.cpp" -D        /
//                          UPSD3254A --preprocess=cl                         /
//                          "J:\Projet_Session5_LNAH\S2_18Nov2014\Programme   /
//                          Station 2\FESTO\UPSD\List\" -lC                   /
//                          "J:\Projet_Session5_LNAH\S2_18Nov2014\Programme   /
//                          Station 2\FESTO\UPSD\List\" -lA                   /
//                          "J:\Projet_Session5_LNAH\S2_18Nov2014\Programme   /
//                          Station 2\FESTO\UPSD\List\" -o                    /
//                          "J:\Projet_Session5_LNAH\S2_18Nov2014\Programme   /
//                          Station 2\FESTO\UPSD\Obj\" -e --no_cse            /
//                          --no_unroll --no_inline --no_code_motion          /
//                          --no_tbaa --debug --core=plain --dptr=16,1        /
//                          --data_model=large --code_model=near              /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data --nr_virtual_regs 8        /
//                          --dlib_config "C:\Program Files\IAR               /
//                          Systems\Embedded Workbench                        /
//                          6.4\8051\LIB\DLIB\dl8051Normal.h" -I              /
//                          "J:\Projet_Session5_LNAH\S2_18Nov2014\Programme   /
//                          Station 2\FESTO\Libraire\" -Ol --eec++            /
//    List file          =  J:\Projet_Session5_LNAH\S2_18Nov2014\Programme    /
//                          Station 2\FESTO\UPSD\List\CLI2CPort.s51           /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME CLI2CPort

        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "near"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        ERROR
//NOTE: This module defines or uses C++ features that are not
//      accessible from assembler code. Assembling this file will
//      not produce an equivalent object file to the one produced
//      by the C++ compiler.

        EXTERN ?FUNC_ENTER_XDATA
        EXTERN ?FUNC_LEAVE_XDATA
        EXTERN ?V0
        EXTERN ?XSTACK_DISP0_8

        PUBLIC ??CLI2CPort
        FUNCTION ??CLI2CPort,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC `??delete ~CLI2CPort`
        FUNCTION `??delete ~CLI2CPort`,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        PUBLIC `??new CLI2CPort`
        FUNCTION `??new CLI2CPort`,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ??ucI2CLireDonnee
        FUNCTION ??ucI2CLireDonnee,021203H
        ARGFRAME XSTACK, 1, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC ??vI2CEcrireDonnee
        FUNCTION ??vI2CEcrireDonnee,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC `?~CLI2CPort`
        FUNCTION `?~CLI2CPort`,021203H
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:16, ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        EXTERN ??CLI2CBase
        FUNCTION ??CLI2CBase,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN `??operator delete`
        FUNCTION `??operator delete`,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN `??operator new`
        FUNCTION `??operator new`,010202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??ucI2CEcrireOctet
        FUNCTION ??ucI2CEcrireOctet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??ucI2CLireOctet
        FUNCTION ??ucI2CLireOctet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??vI2CStart
        FUNCTION ??vI2CStart,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??vI2CStop
        FUNCTION ??vI2CStop,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN `?~CLI2CBase`
        FUNCTION `?~CLI2CBase`,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC


        RSEG NEAR_CODE:CODE:NOROOT(0)
// __near_func __xdata_reentrant CLI2CPort &CLI2CPort::new CLI2CPort()
`??new CLI2CPort`:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function `??new CLI2CPort`
        CODE
        FUNCALL `??new CLI2CPort`, `??operator new`
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL `??new CLI2CPort`, ??CLI2CPort
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    ?V0 + 0
          CFI V0 Frame(CFA_SP, 3)
          CFI CFA_SP SP+-3
        PUSH    ?V0 + 1
          CFI V1 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
        ; Setup parameters for call to function operator new(unsigned int)
        MOV     R2,#0x1
        MOV     R3,#0x0
        LCALL   `??operator new`
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R0
        ORL     A,R1
        JZ      `??new CLI2CPort_1`
        ; Setup parameters for call to function CLI2CPort::CLI2CPort()
        LCALL   ??CLI2CPort
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        SJMP    `??new CLI2CPort_2`
`??new CLI2CPort_1`:
        MOV     R2,#0x0
        MOV     R3,#0x0
`??new CLI2CPort_2`:
        POP     ?V0 + 1
          CFI V1 SameValue
          CFI CFA_SP SP+-3
        POP     ?V0 + 0
          CFI V0 SameValue
          CFI CFA_SP SP+-2
        RET
          CFI EndBlock cfiBlock0

        RSEG NEAR_CODE:CODE:NOROOT(0)
// __near_func __xdata_reentrant void CLI2CPort::delete ~CLI2CPort(CLI2CPort *)
`??delete ~CLI2CPort`:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function `??delete ~CLI2CPort`
        CODE
        FUNCALL `??delete ~CLI2CPort`, `?~CLI2CPort`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL `??delete ~CLI2CPort`, `??operator delete`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x8
        LCALL   ?FUNC_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 8)
        ; Saved register size: 8
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     A,R6
        ORL     A,R7
        JZ      `??delete ~CLI2CPort_1`
        ; Setup parameters for call to function CLI2CPort::~CLI2CPort()
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `?~CLI2CPort`
        ; Setup parameters for call to function operator delete(void *)
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??operator delete`
`??delete ~CLI2CPort_1`:
        MOV     R7,#0x1
        LJMP    ?FUNC_LEAVE_XDATA
          CFI EndBlock cfiBlock1
// J:\Projet_Session5_LNAH\S2_18Nov2014\Programme Station 2\FESTO\Libraire\CLI2CPort.cpp
//    1 // ***************** FICHIER:CLI2CPort.cpp
//    2 //
//    3 //  Description:Contient les fonctions haut niveau pour communiquer avec 
//    4 //              l I2C.
//    5 //             
//    6 //
//    7 //  Application realisee avec IAR
//    8 //
//    9 //  AUTEUR : Gabriel Fortin-Belanger
//   10 //  DATE CREATION :    2014-02-07		 VERSION: 1.0
//   11 //  DATE MODIFICATION: ****-**-**
//   12 //
//   13 //******************************************************************************
//   14 #include "CLInOutBase.h"
//   15 #include "_DeclarationGenerale.h"
//   16 #include "CLI2CPort.h"
//   17 
//   18 
//   19 //*******************************Constantes************************************
//   20 #define PASADRESSE 0
//   21 #define ADR8BIT    1
//   22 #define ADR16BIT   2
//   23 //******************************************************************************
//   24 
//   25 //***********************CLI2CPort(void)
//   26 //
//   27 //Description:Ce constructeur par defaut est appeler lors de la creation 
//   28 // d un objet 
//   29 //
//   30 // Nom:CLPiece :: CLPiece(void)
//   31 //           et ne fais rien
//   32 // PARAMETRE D'ENTREE: -
//   33 //                  
//   34 // 
//   35 //
//   36 // PARAMETRE DE SORTIE: -             
//   37 //
//   38 //    
//   39 // Membre utilise: 
//   40 //
//   41 //
//   42 // DATE DE CREATION: 10 octobre 2013    AUTEUR: Gabriel Fortin-B
//   43 // DATE DE MODIFICATION:	
//   44 //*****************************************************************************

        RSEG NEAR_CODE:CODE:NOROOT(0)
//   45 CLI2CPort:: CLI2CPort(void)   //Constructeur defaut
??CLI2CPort:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function ??CLI2CPort
        CODE
        FUNCALL ??CLI2CPort, ??CLI2CBase
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 3)
          CFI CFA_SP SP+-3
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        ; Saved register size: 2
        ; Auto size: 0
        MOV     DPL,R2
        MOV     DPH,R3
//   46 {
        ; Setup parameters for call to function CLI2CBase::CLI2CBase()
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??CLI2CBase
//   47   
//   48 }
        MOV     R2,DPL
        MOV     R3,DPH
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-2
        RET
          CFI EndBlock cfiBlock2
//   49 
//   50 //***********************~CLI2CPort(void) 
//   51 //
//   52 //Description:Destructeur de CLI2cPort. Ne fais rien
//   53 //          
//   54 //
//   55 // Nom:CLPiece :: ~CLI2CPort(void)
//   56 //           
//   57 // PARAMETRE D'ENTREE:  -
//   58 //                        
//   59 //                  
//   60 // 
//   61 //
//   62 // PARAMETRE DE SORTIE: -             
//   63 //
//   64 //    
//   65 // Membre utilise: 
//   66 //
//   67 //
//   68 // DATE DE CREATION: 10 octobre 2013    AUTEUR: Gabriel Fortin-B
//   69 // DATE DE MODIFICATION:	
//   70 //*****************************************************************************

        RSEG NEAR_CODE:CODE:NOROOT(0)
//   71 CLI2CPort :: ~CLI2CPort(void)   
`?~CLI2CPort`:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function `?~CLI2CPort`
        CODE
//   72 {
        FUNCALL `?~CLI2CPort`, `?~CLI2CBase`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        ; Saved register size: 0
        ; Auto size: 0
//   73  
//   74   
//   75 }
        ; Setup parameters for call to function CLI2CBase::~CLI2CBase()
        LJMP    `?~CLI2CBase`
          CFI EndBlock cfiBlock3
//   76 
//   77 
//   78 //***********************Fonction:ucI2CEcrireDonnee
//   79 //
//   80 //Description:Cette fonction permet d'ecrire une donnee a une adresse 
//   81 //            precise dans un slave precis en choisisant le type d'addresse
//   82 //
//   83 // NOM:void CLI2CPort :: vI2CEcrireDonnee(UC ucAdrChip,US usiAdrDepart,
//   84 //                                        UC ucTypeAdr,UC ucDonnee)
//   85 //
//   86 // 
//   87 // PARAMETRE D'ENTREE:ucAdrChip:Adresse du slave
//   88 //                    usiAdrDepart:Adresse de la case memoire a ecrire 
//   89 //                    ucDonnee:Donnee a ecrire
//   90 //                    ucTypeAdr: type d'addrese peut prendre 3 valeur
//   91 //                                Pas addresse, 8 bit ,16 bit
//   92 // PARAMETRE DE SORTIE:Aucun              
//   93 //
//   94 // PROCEDURES APPELEES: ucI2CEcrireDonneeType()
//   95 //
//   96 // DATE DE CREATION: 3 septembre 2013    AUTEUR: Gabriel Fortin-B
//   97 // DATE DE MODIFICATION:	
//   98 //***************************************************************************** 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//   99 void CLI2CPort :: vI2CEcrireDonnee(UC ucAdrChip,US usiAdrDepart,UC ucTypeAdr,
??vI2CEcrireDonnee:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function ??vI2CEcrireDonnee
        CODE
//  100                                    UC ucDonnee)
//  101 {
        FUNCALL ??vI2CEcrireDonnee, ??vI2CStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??vI2CEcrireDonnee, ??ucI2CEcrireOctet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??vI2CEcrireDonnee, ??ucI2CEcrireOctet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??vI2CEcrireDonnee, ??ucI2CEcrireOctet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??vI2CEcrireDonnee, ??ucI2CEcrireOctet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??vI2CEcrireDonnee, ??ucI2CEcrireOctet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??vI2CEcrireDonnee, ??vI2CStop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?FUNC_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 4,R1
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
//  102 
//  103    unsigned char ucAdrHaute;
//  104    unsigned char ucAdrBas;
//  105 	    
//  106    vI2CStart();                         //Start la communication i2c
        ; Setup parameters for call to function CLI2CBase::vI2CStart()
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??vI2CStart
//  107    UC ucAck =  ucI2CEcrireOctet(ucAdrChip);//Ecrit l'adresse du chip en write
        ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
        MOV     R1,?V0 + 4
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??ucI2CEcrireOctet
        MOV     A,R1
        MOV     R0,A
//  108    //while(ucAck == 1)
//  109    // {
//  110    //   vI2CStart();
//  111    //   ucAck = ucI2CEcrireOctet(ucAdrChip);//adresse chip en write,verifier Ack
//  112    // }
//  113 
//  114    switch(ucTypeAdr)
        MOV     A,?V0 + 3
        JZ      ??vI2CEcrireDonnee_1
        DEC     A
        JZ      ??vI2CEcrireDonnee_2
        DEC     A
        JZ      ??vI2CEcrireDonnee_3
        SJMP    ??vI2CEcrireDonnee_1
//  115     {
//  116     
//  117        case PASADRESSE:
//  118           break;
//  119        
//  120        case ADR8BIT:
//  121          ucAdrBas = usiAdrDepart & 0x00FF; //Isole la partie Basse de l adresse
??vI2CEcrireDonnee_2:
        MOV     A,R6
        MOV     R1,A
//  122          ucI2CEcrireOctet(ucAdrBas);//Ecrit L'adresse Basse de case memoire 0x10
        ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??ucI2CEcrireOctet
        MOV     A,R1
//  123          break;
        SJMP    ??vI2CEcrireDonnee_1
//  124        
//  125        case ADR16BIT:
//  126          ucAdrHaute = usiAdrDepart & 0xFF00; //Isole la partie haute de l adresse
??vI2CEcrireDonnee_3:
        MOV     R1,#0x0
//  127          ucI2CEcrireOctet(ucAdrHaute);//Ecrit Adreese haute de case memoire 0x00
        ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??ucI2CEcrireOctet
        MOV     A,R1
//  128          ucAdrBas = usiAdrDepart & 0x00FF; //Isole la partie Basse de l adresse
        MOV     A,R6
        MOV     R1,A
//  129          ucI2CEcrireOctet(ucAdrBas);//Ecrit L'adresse Basse de case memoire 0x10
        ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??ucI2CEcrireOctet
        MOV     A,R1
//  130          break;
//  131  
//  132     }
//  133    ucI2CEcrireOctet(ucDonnee);//Ecrit la donnee a memoriser 0x34 verifier Ack
??vI2CEcrireDonnee_1:
        ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
        MOV     R1,?V0 + 2
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??ucI2CEcrireOctet
        MOV     A,R1
//  134    vI2CStop();                //Stop la communication
        ; Setup parameters for call to function CLI2CBase::vI2CStop()
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??vI2CStop
//  135 
//  136 
//  137 }
        MOV     R7,#0x5
        LJMP    ?FUNC_LEAVE_XDATA
          CFI EndBlock cfiBlock4
//  138 
//  139 
//  140 //***********************Fonction:ucI2CLireDonnee
//  141 //
//  142 //Description:Cette fonction permet de Lire une donnee a une adresse
//  143 //            precise dans un slave precis avec un type d'addresse choisit
//  144 //
//  145 //NOM:unsigned char CLI2CPort :: ucI2CLireDonnee(UC ucAdrChip, US usiAdrDepart,
//  146 //                               UC ucTypeAdr)
//  147 
//  148 //
//  149 //           
//  150 // PARAMETRE D'ENTREE:ucAdrChip:Adresse du chip a contacter
//  151 //                    usiAdrDepart:Adresse de la case interne ou il faut lire
//  152 //                    ucTypeAdr: type d'addrese peut prendre 3 valeur
//  153 //                                Pas addresse, 8 bit ,16 bit
//  154 //
//  155 // PARAMETRE DE SORTIE:ucDonnee: Valeur de l'octet lue                
//  156 //
//  157 //
//  158 // PROCEDURES APPELEES:ucI2CLireDonneeType()
//  159 //
//  160 // DATE DE CREATION: 3 septembre 2013    AUTEUR: Gabriel Fortin-B
//  161 // DATE DE MODIFICATION:	
//  162 //*****************************************************************************

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  163 unsigned char CLI2CPort :: ucI2CLireDonnee(UC ucAdrChip, US usiAdrDepart,
??ucI2CLireDonnee:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function ??ucI2CLireDonnee
        CODE
//  164                                            UC ucTypeAdr)
//  165 {
        FUNCALL ??ucI2CLireDonnee, ??vI2CStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??ucI2CLireDonnee, ??ucI2CEcrireOctet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??ucI2CLireDonnee, ??ucI2CEcrireOctet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??ucI2CLireDonnee, ??ucI2CEcrireOctet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??ucI2CLireDonnee, ??ucI2CEcrireOctet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??ucI2CLireDonnee, ??vI2CStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??ucI2CLireDonnee, ??ucI2CEcrireOctet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??ucI2CLireDonnee, ??ucI2CLireOctet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ??ucI2CLireDonnee, ??vI2CStop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?FUNC_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R1
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
//  166    unsigned char ucAdrHaute;
//  167    unsigned char ucAdrBas;
//  168    unsigned char ucDonnee;
//  169 		 
//  170    vI2CStart();                 //Start la communication i2C
        ; Setup parameters for call to function CLI2CBase::vI2CStart()
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??vI2CStart
//  171    ucI2CEcrireOctet(ucAdrChip); //Ecrit l'adresse du chip en write
        ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
        MOV     R1,?V0 + 2
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??ucI2CEcrireOctet
        MOV     A,R1
//  172    switch(ucTypeAdr)
        MOV     A,?V0 + 3
        JZ      ??ucI2CLireDonnee_1
        DEC     A
        JZ      ??ucI2CLireDonnee_2
        DEC     A
        JZ      ??ucI2CLireDonnee_3
        SJMP    ??ucI2CLireDonnee_1
//  173     {
//  174        case PASADRESSE:
//  175           break;
//  176        
//  177        case ADR8BIT:
//  178          ucAdrBas = usiAdrDepart & 0x00FF; //Isole la partie Basse de l adresse
??ucI2CLireDonnee_2:
        MOV     A,R6
        MOV     R1,A
//  179          ucI2CEcrireOctet(ucAdrBas);//Ecrit L'adresse Basse de case memoire 0x10
        ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??ucI2CEcrireOctet
        MOV     A,R1
//  180          break;
        SJMP    ??ucI2CLireDonnee_1
//  181        
//  182        case ADR16BIT:
//  183          ucAdrHaute = usiAdrDepart & 0xFF00; //Isole la partie haute de l adresse
??ucI2CLireDonnee_3:
        MOV     R1,#0x0
//  184          ucI2CEcrireOctet(ucAdrHaute);//Ecrit Adreese haute de case memoire 0x00
        ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??ucI2CEcrireOctet
        MOV     A,R1
//  185          ucAdrBas = usiAdrDepart & 0x00FF; //Isole la partie Basse de l adresse
        MOV     A,R6
        MOV     R1,A
//  186          ucI2CEcrireOctet(ucAdrBas);//Ecrit L'adresse Basse de case memoire 0x10
        ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??ucI2CEcrireOctet
        MOV     A,R1
//  187          break;
//  188  
//  189     }
//  190 	                             //
//  191    vI2CStart();                 //Start la communication i2C
??ucI2CLireDonnee_1:
        ; Setup parameters for call to function CLI2CBase::vI2CStart()
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??vI2CStart
//  192    ucI2CEcrireOctet(ucAdrChip + 1 ); //Ecrit l'adresse du chip mode read
        ; Setup parameters for call to function CLI2CBase::ucI2CEcrireOctet(UC)
        MOV     A,#0x1
        ADD     A,?V0 + 2
        MOV     R1,A
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??ucI2CEcrireOctet
        MOV     A,R1
//  193    ucDonnee = ucI2CLireOctet(0);//Lit la donnee et stocke dans cVar1
        ; Setup parameters for call to function CLI2CBase::ucI2CLireOctet(UC)
        MOV     R1,#0x0
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??ucI2CLireOctet
        MOV     A,R1
        MOV     R6,A
//  194    vI2CStop();
        ; Setup parameters for call to function CLI2CBase::vI2CStop()
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??vI2CStop
//  195    
//  196    return(ucDonnee);       //retourne la donnee lu
        MOV     A,R6
        MOV     R1,A
        MOV     R7,#0x4
        LJMP    ?FUNC_LEAVE_XDATA
          CFI EndBlock cfiBlock5
//  197 
//  198 
//  199 
//  200 
//  201 }

        END
//  202 
//  203 //@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
// 
// 352 bytes in segment NEAR_CODE
// 
// 352 bytes of CODE memory
//
//Errors: none
//Warnings: none
