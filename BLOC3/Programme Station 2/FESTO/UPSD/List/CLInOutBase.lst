###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             19/Nov/2014  10:59:19 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  near                                               #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data                                               #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  J:\Projet_Session5_LNAH\S2_18Nov2014\Programme     #
#                          Station 2\FESTO\Libraire\CLInOutBase.cpp           #
#    Command line       =  "J:\Projet_Session5_LNAH\S2_18Nov2014\Programme    #
#                          Station 2\FESTO\Libraire\CLInOutBase.cpp" -D       #
#                          UPSD3254A --preprocess=cl                          #
#                          "J:\Projet_Session5_LNAH\S2_18Nov2014\Programme    #
#                          Station 2\FESTO\UPSD\List\" -lC                    #
#                          "J:\Projet_Session5_LNAH\S2_18Nov2014\Programme    #
#                          Station 2\FESTO\UPSD\List\" -lA                    #
#                          "J:\Projet_Session5_LNAH\S2_18Nov2014\Programme    #
#                          Station 2\FESTO\UPSD\List\" -o                     #
#                          "J:\Projet_Session5_LNAH\S2_18Nov2014\Programme    #
#                          Station 2\FESTO\UPSD\Obj\" -e --no_cse             #
#                          --no_unroll --no_inline --no_code_motion           #
#                          --no_tbaa --debug --core=plain --dptr=16,1         #
#                          --data_model=large --code_model=near               #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data --nr_virtual_regs 8         #
#                          --dlib_config "C:\Program Files\IAR                #
#                          Systems\Embedded Workbench                         #
#                          6.4\8051\LIB\DLIB\dl8051Normal.h" -I               #
#                          "J:\Projet_Session5_LNAH\S2_18Nov2014\Programme    #
#                          Station 2\FESTO\Libraire\" -Ol --eec++             #
#    List file          =  J:\Projet_Session5_LNAH\S2_18Nov2014\Programme     #
#                          Station 2\FESTO\UPSD\List\CLInOutBase.lst          #
#    Object file        =  J:\Projet_Session5_LNAH\S2_18Nov2014\Programme     #
#                          Station 2\FESTO\UPSD\Obj\CLInOutBase.r51           #
#                                                                             #
#                                                                             #
###############################################################################

J:\Projet_Session5_LNAH\S2_18Nov2014\Programme Station 2\FESTO\Libraire\CLInOutBase.cpp
      1          // ***************** FICHIER:CLInOutBase.cpp
      2          //
      3          //  Application realisee avec IAR C++ 8.1  
      4          //  
      5          // Description: La classe contient des fonctions In et Out qui peuvent 
      6          //              travailler a 8 ou 16 bits.Pour les In et Out 16 Bits il faut
      7          //              fournir un parametre qui donne le type d'acces
      8          //
      9          //
     10          //
     11          //
     12          //
     13          //
     14          //
     15          //  AUTEUR : Gabriel Fortin-Belanger
     16          //  DATE CREATION :    2014-02-07		 VERSION: 1.0
     17          //  DATE MODIFICATION: ****-**-**
     18          //
     19          //******************************************************************************  
     20          
     21          
     22          #include "CLInOutBase.h"
     23          #include "_DeclarationGenerale.h"
     24          
     25          
     26          //*******************************Constantes************************************
     27          #define SAMELSB   0U  //2 acces 8 bits a la meme adresse, LSB en premier. 
     28          #define SAMEMSB   1U  //2 acces 8 bits a la meme adresse, MSB en premier.
     29          #define SUITELSB  2U  //2 acces 8 bits adresses successives, LSB en  premier
     30          #define SUITEMSB  3U  // 2 acces 8 bits adresses successives, MSB en premier  
     31          //******************************************************************************
     32          
     33          
     34          
     35          
     36          //***********************vOut
     37          //
     38          //Description:Cette fonction permet d ecrire en appelant la fonction vOutportb
     39          //            
     40          //           
     41          // Nom:void CLInOutBase :: vOut(unsigned short int usiAdresse, 
     42          //                                      unsigned char ucDonnee) 
     43          //           
     44          // PARAMETRE D'ENTREE:US usiAdresse: Addresse ou on veut ecrire
     45          //                    unsigned char ucDonnee: Donnee a envoyer
     46          // 
     47          //
     48          // PARAMETRE DE SORTIE:              
     49          //
     50          //    
     51          // Methode utilise:
     52          // Fonction: vOutportb();
     53          // 
     54          //
     55          //
     56          // DATE DE CREATION: 10 octobre 2013    AUTEUR: Gabriel Fortin-B
     57          // DATE DE MODIFICATION:	
     58          //*****************************************************************************

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
     59          void CLInOutBase :: vOut(unsigned short int usiAdresse, 
   \                     ??vOut:
     60                              unsigned char ucDonnee) 
     61          {
   \   000000   EE           MOV     A,R6
   \   000001   C0E0         PUSH    A
   \   000003                ; Saved register size: 1
   \   000003                ; Auto size: 0
   \   000003   E9           MOV     A,R1
   \   000004   FE           MOV     R6,A
     62             vOutportb(usiAdresse, ucDonnee); 
   \   000005                ; Setup parameters for call to function CLInOutBase::vOutportb(unsigned short, unsigned char)
   \   000005   F9           MOV     R1,A
   \   000006   12....       LCALL   ??vOutportb
     63          
     64          }
   \   000009   D0E0         POP     A
   \   00000B   FE           MOV     R6,A
   \   00000C   22           RET
     65          
     66          //***********************vOut
     67          //
     68          //Description:Cette fonction permet d ecrire en appelant la fonction vOutportb
     69          //            et permet l ecriture 16 bit  
     70          //           
     71          // Nom:void CLInOutBase :: vOut(unsigned short int usiAdresse ,
     72          //                              unsigned short int usiDonnee,
     73          //                              unsigned char ucTypeTransfert)
     74          //           
     75          // PARAMETRE D'ENTREE:US usiAdresse: Addresse ou on veut ecrire
     76          //                    unsigned char ucDonnee: Donnee a envoyer
     77          //                    unsigned char ucTypeTransfert: type de transfert 
     78          //              SAMELSB: 2 acces 8 bits a la meme adresse, LSB en premier.   
     79          //              SAMEMSB: 2 acces 8 bits a la meme adresse, MSB en premier.  
     80          //              SUITELSB: 2 acces 8 bits adresses successives, LSB en  premier 
     81          //              SUITEMSB:2 acces 8 bits adresses successives, MSB en premier 
     82          //
     83          //
     84          // PARAMETRE DE SORTIE:              
     85          //
     86          //    
     87          // Methode utilise:
     88          // Fonction: vOutportb();
     89          // 
     90          //
     91          //
     92          // DATE DE CREATION: 10 octobre 2013    AUTEUR: Gabriel Fortin-B
     93          // DATE DE MODIFICATION:	
     94          //*****************************************************************************

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
     95          void CLInOutBase :: vOut(unsigned short int usiAdresse ,
   \                     ??vOut_1:
     96                                   unsigned short int usiDonnee,
     97                                   unsigned char ucTypeTransfert)
     98          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
   \   00000D   89..         MOV     ?V0 + 2,R1
   \   00000F   740A         MOV     A,#0xa
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F8           MOV     R0,A
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F9           MOV     R1,A
     99            unMot16bit.uiWord =  usiDonnee;//place la donnee dans la structure 
   \   000019   8E82         MOV     DPL,R6
   \   00001B   8F83         MOV     DPH,R7
   \   00001D   E8           MOV     A,R0
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   A3           INC     DPTR
   \   000020   E9           MOV     A,R1
   \   000021   F0           MOVX    @DPTR,A
    100            
    101            switch(ucTypeTransfert)//choisit le type transfit 
   \   000022   E5..         MOV     A,?V0 + 2
   \   000024   600C         JZ      ??vOut_2
   \   000026   14           DEC     A
   \   000027   602E         JZ      ??vOut_3
   \   000029   14           DEC     A
   \   00002A   6050         JZ      ??vOut_4
   \   00002C   14           DEC     A
   \   00002D   6078         JZ      ??vOut_5
   \   00002F   02....       LJMP    ??vOut_6
    102            {
    103              case SAMELSB://2 acces 8 bits a la meme adresse, LSB en premier. 
    104                vOutportb( usiAdresse,unMot16bit.stOctet16bit.ucBas);  
   \                     ??vOut_2:
   \   000032                ; Setup parameters for call to function CLInOutBase::vOutportb(unsigned short, unsigned char)
   \   000032   8E82         MOV     DPL,R6
   \   000034   8F83         MOV     DPH,R7
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F9           MOV     R1,A
   \   000038   AC..         MOV     R4,?V0 + 0
   \   00003A   AD..         MOV     R5,?V0 + 1
   \   00003C   EE           MOV     A,R6
   \   00003D   FA           MOV     R2,A
   \   00003E   EF           MOV     A,R7
   \   00003F   FB           MOV     R3,A
   \   000040   12....       LCALL   ??vOutportb
    105                vOutportb( usiAdresse,unMot16bit.stOctet16bit.ucHaut);
   \   000043                ; Setup parameters for call to function CLInOutBase::vOutportb(unsigned short, unsigned char)
   \   000043   8E82         MOV     DPL,R6
   \   000045   8F83         MOV     DPH,R7
   \   000047   A3           INC     DPTR
   \   000048   E0           MOVX    A,@DPTR
   \   000049   F9           MOV     R1,A
   \   00004A   AC..         MOV     R4,?V0 + 0
   \   00004C   AD..         MOV     R5,?V0 + 1
   \   00004E   EE           MOV     A,R6
   \   00004F   FA           MOV     R2,A
   \   000050   EF           MOV     A,R7
   \   000051   FB           MOV     R3,A
   \   000052   12....       LCALL   ??vOutportb
    106              
    107              break;
   \   000055   8079         SJMP    ??vOut_6
    108              
    109              case SAMEMSB://2 acces 8 bits a la meme adresse, MSB en premier.
    110               vOutportb(usiAdresse,unMot16bit.stOctet16bit.ucHaut);
   \                     ??vOut_3:
   \   000057                ; Setup parameters for call to function CLInOutBase::vOutportb(unsigned short, unsigned char)
   \   000057   8E82         MOV     DPL,R6
   \   000059   8F83         MOV     DPH,R7
   \   00005B   A3           INC     DPTR
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   F9           MOV     R1,A
   \   00005E   AC..         MOV     R4,?V0 + 0
   \   000060   AD..         MOV     R5,?V0 + 1
   \   000062   EE           MOV     A,R6
   \   000063   FA           MOV     R2,A
   \   000064   EF           MOV     A,R7
   \   000065   FB           MOV     R3,A
   \   000066   12....       LCALL   ??vOutportb
    111              vOutportb(usiAdresse, unMot16bit.stOctet16bit.ucBas);
   \   000069                ; Setup parameters for call to function CLInOutBase::vOutportb(unsigned short, unsigned char)
   \   000069   8E82         MOV     DPL,R6
   \   00006B   8F83         MOV     DPH,R7
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   F9           MOV     R1,A
   \   00006F   AC..         MOV     R4,?V0 + 0
   \   000071   AD..         MOV     R5,?V0 + 1
   \   000073   EE           MOV     A,R6
   \   000074   FA           MOV     R2,A
   \   000075   EF           MOV     A,R7
   \   000076   FB           MOV     R3,A
   \   000077   12....       LCALL   ??vOutportb
    112              break;
   \   00007A   8054         SJMP    ??vOut_6
    113              
    114              case SUITELSB://2 acces 8 bits adresses successives, LSB en  premier
    115                vOutportb(usiAdresse,unMot16bit.stOctet16bit.ucBas);
   \                     ??vOut_4:
   \   00007C                ; Setup parameters for call to function CLInOutBase::vOutportb(unsigned short, unsigned char)
   \   00007C   8E82         MOV     DPL,R6
   \   00007E   8F83         MOV     DPH,R7
   \   000080   E0           MOVX    A,@DPTR
   \   000081   F9           MOV     R1,A
   \   000082   AC..         MOV     R4,?V0 + 0
   \   000084   AD..         MOV     R5,?V0 + 1
   \   000086   EE           MOV     A,R6
   \   000087   FA           MOV     R2,A
   \   000088   EF           MOV     A,R7
   \   000089   FB           MOV     R3,A
   \   00008A   12....       LCALL   ??vOutportb
    116                vOutportb(((usiAdresse)+1), unMot16bit.stOctet16bit.ucHaut);
   \   00008D                ; Setup parameters for call to function CLInOutBase::vOutportb(unsigned short, unsigned char)
   \   00008D   8E82         MOV     DPL,R6
   \   00008F   8F83         MOV     DPH,R7
   \   000091   A3           INC     DPTR
   \   000092   E0           MOVX    A,@DPTR
   \   000093   F9           MOV     R1,A
   \   000094   E5..         MOV     A,?V0 + 0
   \   000096   2401         ADD     A,#0x1
   \   000098   FC           MOV     R4,A
   \   000099   E5..         MOV     A,?V0 + 1
   \   00009B   3400         ADDC    A,#0x0
   \   00009D   FD           MOV     R5,A
   \   00009E   EE           MOV     A,R6
   \   00009F   FA           MOV     R2,A
   \   0000A0   EF           MOV     A,R7
   \   0000A1   FB           MOV     R3,A
   \   0000A2   12....       LCALL   ??vOutportb
    117              break;
   \   0000A5   8029         SJMP    ??vOut_6
    118              
    119              case SUITEMSB://2 acces 8 bits adresses successives, MSB en premier 
    120                  vOutportb(usiAdresse, unMot16bit.stOctet16bit.ucHaut);
   \                     ??vOut_5:
   \   0000A7                ; Setup parameters for call to function CLInOutBase::vOutportb(unsigned short, unsigned char)
   \   0000A7   8E82         MOV     DPL,R6
   \   0000A9   8F83         MOV     DPH,R7
   \   0000AB   A3           INC     DPTR
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   F9           MOV     R1,A
   \   0000AE   AC..         MOV     R4,?V0 + 0
   \   0000B0   AD..         MOV     R5,?V0 + 1
   \   0000B2   EE           MOV     A,R6
   \   0000B3   FA           MOV     R2,A
   \   0000B4   EF           MOV     A,R7
   \   0000B5   FB           MOV     R3,A
   \   0000B6   12....       LCALL   ??vOutportb
    121                  vOutportb(((usiAdresse)+1), unMot16bit.stOctet16bit.ucBas);
   \   0000B9                ; Setup parameters for call to function CLInOutBase::vOutportb(unsigned short, unsigned char)
   \   0000B9   8E82         MOV     DPL,R6
   \   0000BB   8F83         MOV     DPH,R7
   \   0000BD   E0           MOVX    A,@DPTR
   \   0000BE   F9           MOV     R1,A
   \   0000BF   E5..         MOV     A,?V0 + 0
   \   0000C1   2401         ADD     A,#0x1
   \   0000C3   FC           MOV     R4,A
   \   0000C4   E5..         MOV     A,?V0 + 1
   \   0000C6   3400         ADDC    A,#0x0
   \   0000C8   FD           MOV     R5,A
   \   0000C9   EE           MOV     A,R6
   \   0000CA   FA           MOV     R2,A
   \   0000CB   EF           MOV     A,R7
   \   0000CC   FB           MOV     R3,A
   \   0000CD   12....       LCALL   ??vOutportb
    122              break;
    123              
    124              
    125            }
    126          
    127          
    128          }
   \                     ??vOut_6:
   \   0000D0   7F03         MOV     R7,#0x3
   \   0000D2   02....       LJMP    ?FUNC_LEAVE_XDATA
    129          
    130          //***********************ucIn
    131          //
    132          //Description:Cette fonction permet de lire en appelant la fonction ucInportb
    133          //            
    134          //           
    135          // Nom:UC CLInOutBase :: ucIn(unsigned short int usiAdresse) 
    136          //           
    137          // PARAMETRE D'ENTREE:US usiAdresse: Addresse ou on veut lire
    138          //                   
    139          // 
    140          //
    141          // PARAMETRE DE SORTIE: unsigned char ucDonnee: Donnee lu            
    142          //
    143          //    
    144          // Methode utilise:
    145          // Fonction: ucInportb();
    146          // 
    147          //
    148          //
    149          // DATE DE CREATION: 10 octobre 2013    AUTEUR: Gabriel Fortin-B
    150          // DATE DE MODIFICATION:	
    151          //*****************************************************************************

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    152          UC CLInOutBase :: ucIn(unsigned short int usiAdresse)
   \                     ??ucIn:
    153          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    154            return ucInportb(usiAdresse);
   \   000000                ; Setup parameters for call to function CLInOutBase::ucInportb(unsigned short)
   \   000000   02....       LJMP    ??ucInportb
    155          }
    156          
    157          
    158          //***********************usiIn
    159          //
    160          //Description:Cette fonction permet de lire en appelant la fonction ucInportb
    161          //            et permet la lecture 16 bit
    162          //           
    163          // Nom:UC CLInOutBase :: ucIn(unsigned short int usiAdresse) 
    164          //           
    165          // PARAMETRE D'ENTREE:US usiAdresse: Addresse ou on veut lire
    166          //                    UC ucTypeTransfert:type de transfert
    167          //              SAMELSB: 2 acces 8 bits a la meme adresse, LSB en premier.   
    168          //              SAMEMSB: 2 acces 8 bits a la meme adresse, MSB en premier.  
    169          //              SUITELSB: 2 acces 8 bits adresses successives, LSB en  premier 
    170          //              SUITEMSB:2 acces 8 bits adresses successives, MSB en premier 
    171          // 
    172          //
    173          // PARAMETRE DE SORTIE: unsigned char ucDonnee: Donnee lu            
    174          //
    175          //    
    176          // Methode utilise:
    177          // Fonction: ucInportb();
    178          // 
    179          //
    180          //
    181          // DATE DE CREATION: 10 octobre 2013    AUTEUR: Gabriel Fortin-B
    182          // DATE DE MODIFICATION:	
    183          //*****************************************************************************
    184          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    185          UINT16 CLInOutBase :: usiIn( unsigned short int usiAdresse,UC ucTypeTransfert)
   \                     ??usiIn:
    186          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
   \   00000D   89..         MOV     ?V0 + 2,R1
    187          switch(ucTypeTransfert)//choisit le type transfit 
   \   00000F   E5..         MOV     A,?V0 + 2
   \   000011   600C         JZ      ??usiIn_1
   \   000013   14           DEC     A
   \   000014   602E         JZ      ??usiIn_2
   \   000016   14           DEC     A
   \   000017   6050         JZ      ??usiIn_3
   \   000019   14           DEC     A
   \   00001A   6078         JZ      ??usiIn_4
   \   00001C   02....       LJMP    ??usiIn_5
    188            {
    189              case SAMELSB://2 acces 8 bits a la meme adresse, LSB en premier.
    190               unMot16bit.stOctet16bit.ucBas = ucInportb(usiAdresse);
   \                     ??usiIn_1:
   \   00001F                ; Setup parameters for call to function CLInOutBase::ucInportb(unsigned short)
   \   00001F   AC..         MOV     R4,?V0 + 0
   \   000021   AD..         MOV     R5,?V0 + 1
   \   000023   EE           MOV     A,R6
   \   000024   FA           MOV     R2,A
   \   000025   EF           MOV     A,R7
   \   000026   FB           MOV     R3,A
   \   000027   12....       LCALL   ??ucInportb
   \   00002A   E9           MOV     A,R1
   \   00002B   8E82         MOV     DPL,R6
   \   00002D   8F83         MOV     DPH,R7
   \   00002F   F0           MOVX    @DPTR,A
    191               unMot16bit.stOctet16bit.ucHaut = ucInportb(usiAdresse);
   \   000030                ; Setup parameters for call to function CLInOutBase::ucInportb(unsigned short)
   \   000030   AC..         MOV     R4,?V0 + 0
   \   000032   AD..         MOV     R5,?V0 + 1
   \   000034   EE           MOV     A,R6
   \   000035   FA           MOV     R2,A
   \   000036   EF           MOV     A,R7
   \   000037   FB           MOV     R3,A
   \   000038   12....       LCALL   ??ucInportb
   \   00003B   E9           MOV     A,R1
   \   00003C   8E82         MOV     DPL,R6
   \   00003E   8F83         MOV     DPH,R7
   \   000040   A3           INC     DPTR
   \   000041   F0           MOVX    @DPTR,A
    192               
    193              break;
   \   000042   8079         SJMP    ??usiIn_5
    194              
    195              case SAMEMSB://2 acces 8 bits a la meme adresse, MSB en premier.
    196               unMot16bit.stOctet16bit.ucHaut = ucInportb(usiAdresse);
   \                     ??usiIn_2:
   \   000044                ; Setup parameters for call to function CLInOutBase::ucInportb(unsigned short)
   \   000044   AC..         MOV     R4,?V0 + 0
   \   000046   AD..         MOV     R5,?V0 + 1
   \   000048   EE           MOV     A,R6
   \   000049   FA           MOV     R2,A
   \   00004A   EF           MOV     A,R7
   \   00004B   FB           MOV     R3,A
   \   00004C   12....       LCALL   ??ucInportb
   \   00004F   E9           MOV     A,R1
   \   000050   8E82         MOV     DPL,R6
   \   000052   8F83         MOV     DPH,R7
   \   000054   A3           INC     DPTR
   \   000055   F0           MOVX    @DPTR,A
    197               unMot16bit.stOctet16bit.ucBas = ucInportb(usiAdresse);
   \   000056                ; Setup parameters for call to function CLInOutBase::ucInportb(unsigned short)
   \   000056   AC..         MOV     R4,?V0 + 0
   \   000058   AD..         MOV     R5,?V0 + 1
   \   00005A   EE           MOV     A,R6
   \   00005B   FA           MOV     R2,A
   \   00005C   EF           MOV     A,R7
   \   00005D   FB           MOV     R3,A
   \   00005E   12....       LCALL   ??ucInportb
   \   000061   E9           MOV     A,R1
   \   000062   8E82         MOV     DPL,R6
   \   000064   8F83         MOV     DPH,R7
   \   000066   F0           MOVX    @DPTR,A
    198              break;
   \   000067   8054         SJMP    ??usiIn_5
    199              
    200              case SUITELSB://2 acces 8 bits adresses successives, LSB en  premier
    201               unMot16bit.stOctet16bit.ucBas = ucInportb(usiAdresse);
   \                     ??usiIn_3:
   \   000069                ; Setup parameters for call to function CLInOutBase::ucInportb(unsigned short)
   \   000069   AC..         MOV     R4,?V0 + 0
   \   00006B   AD..         MOV     R5,?V0 + 1
   \   00006D   EE           MOV     A,R6
   \   00006E   FA           MOV     R2,A
   \   00006F   EF           MOV     A,R7
   \   000070   FB           MOV     R3,A
   \   000071   12....       LCALL   ??ucInportb
   \   000074   E9           MOV     A,R1
   \   000075   8E82         MOV     DPL,R6
   \   000077   8F83         MOV     DPH,R7
   \   000079   F0           MOVX    @DPTR,A
    202             unMot16bit.stOctet16bit.ucHaut = ucInportb(usiAdresse +1);
   \   00007A                ; Setup parameters for call to function CLInOutBase::ucInportb(unsigned short)
   \   00007A   E5..         MOV     A,?V0 + 0
   \   00007C   2401         ADD     A,#0x1
   \   00007E   FC           MOV     R4,A
   \   00007F   E5..         MOV     A,?V0 + 1
   \   000081   3400         ADDC    A,#0x0
   \   000083   FD           MOV     R5,A
   \   000084   EE           MOV     A,R6
   \   000085   FA           MOV     R2,A
   \   000086   EF           MOV     A,R7
   \   000087   FB           MOV     R3,A
   \   000088   12....       LCALL   ??ucInportb
   \   00008B   E9           MOV     A,R1
   \   00008C   8E82         MOV     DPL,R6
   \   00008E   8F83         MOV     DPH,R7
   \   000090   A3           INC     DPTR
   \   000091   F0           MOVX    @DPTR,A
    203              break;
   \   000092   8029         SJMP    ??usiIn_5
    204              
    205              case SUITEMSB://2 acces 8 bits adresses successives, MSB en premier
    206               unMot16bit.stOctet16bit.ucBas = ucInportb(usiAdresse);
   \                     ??usiIn_4:
   \   000094                ; Setup parameters for call to function CLInOutBase::ucInportb(unsigned short)
   \   000094   AC..         MOV     R4,?V0 + 0
   \   000096   AD..         MOV     R5,?V0 + 1
   \   000098   EE           MOV     A,R6
   \   000099   FA           MOV     R2,A
   \   00009A   EF           MOV     A,R7
   \   00009B   FB           MOV     R3,A
   \   00009C   12....       LCALL   ??ucInportb
   \   00009F   E9           MOV     A,R1
   \   0000A0   8E82         MOV     DPL,R6
   \   0000A2   8F83         MOV     DPH,R7
   \   0000A4   F0           MOVX    @DPTR,A
    207               unMot16bit.stOctet16bit.ucHaut = ucInportb(usiAdresse +1);
   \   0000A5                ; Setup parameters for call to function CLInOutBase::ucInportb(unsigned short)
   \   0000A5   E5..         MOV     A,?V0 + 0
   \   0000A7   2401         ADD     A,#0x1
   \   0000A9   FC           MOV     R4,A
   \   0000AA   E5..         MOV     A,?V0 + 1
   \   0000AC   3400         ADDC    A,#0x0
   \   0000AE   FD           MOV     R5,A
   \   0000AF   EE           MOV     A,R6
   \   0000B0   FA           MOV     R2,A
   \   0000B1   EF           MOV     A,R7
   \   0000B2   FB           MOV     R3,A
   \   0000B3   12....       LCALL   ??ucInportb
   \   0000B6   E9           MOV     A,R1
   \   0000B7   8E82         MOV     DPL,R6
   \   0000B9   8F83         MOV     DPH,R7
   \   0000BB   A3           INC     DPTR
   \   0000BC   F0           MOVX    @DPTR,A
    208              break;
    209              
    210              
    211            }
    212          return unMot16bit.uiWord;//retourne la donnee lu 
   \                     ??usiIn_5:
   \   0000BD   8E82         MOV     DPL,R6
   \   0000BF   8F83         MOV     DPH,R7
   \   0000C1   E0           MOVX    A,@DPTR
   \   0000C2   FA           MOV     R2,A
   \   0000C3   A3           INC     DPTR
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   FB           MOV     R3,A
   \   0000C6   7F03         MOV     R7,#0x3
   \   0000C8   02....       LJMP    ?FUNC_LEAVE_XDATA
    213          
    214          }
    215          
    216          
    217          
    218          //***********************ucInPortb
    219          //
    220          //Description:Cette fonction permet de lire un dispositif I/O relier au bus
    221          //           
    222          // Nom:UC CLInOutBase :: ucInportb(unsigned short int usiAdresse)
    223          //           
    224          // PARAMETRE D'ENTREE:US usiAdresse: Addresse ou on veut lire
    225          //                  
    226          // 
    227          //
    228          // PARAMETRE DE SORTIE: UC ucDonnee: retourne la donnee lue              
    229          //
    230          //    
    231          // Methode utilise:
    232          //
    233          // DATE DE CREATION: 10 octobre 2013    AUTEUR: Gabriel Fortin-B
    234          // DATE DE MODIFICATION:	
    235          //*****************************************************************************

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    236          UC CLInOutBase :: ucInportb(unsigned short int usiAdresse)
   \                     ??ucInportb:
    237          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    238             UC ucDonnee;
    239             ucpAdresse = (UC xdata *) usiAdresse; //Affecte l'adresse du peripherique 
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   EC           MOV     A,R4
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   A3           INC     DPTR
   \   00000D   ED           MOV     A,R5
   \   00000E   F0           MOVX    @DPTR,A
    240                                                   //au pointeur 
    241             ucDonnee = *ucpAdresse;               // Lit la donnee presente a l'adresse
   \   00000F   8A82         MOV     DPL,R2
   \   000011   8B83         MOV     DPH,R3
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F8           MOV     R0,A
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F583         MOV     DPH,A
   \   00001B   8882         MOV     DPL,R0
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F9           MOV     R1,A
    242             return(ucDonnee);                     //retourne la donnee
   \   00001F   D083         POP     DPH
   \   000021   D082         POP     DPL
   \   000023   22           RET
    243          
    244          }
    245          
    246          
    247          //***********************vOutportb
    248          //
    249          //Description:Cette fonction permet D'ecrire un dispositif I/O relier au bus
    250          //           
    251          // Nom:void  CLInOutBase :: vOutportb(unsigned short int usiAdresse, 
    252          //                                            unsigned char ucDonnee)
    253          //           
    254          // PARAMETRE D'ENTREE:US usiAdresse: Addresse ou on veut lire
    255          //                    UC ucDonnee: Donnee a ecrire
    256          // 
    257          //
    258          // PARAMETRE DE SORTIE: Aucun              
    259          //
    260          //    
    261          // Methode utilise:
    262          //
    263          // DATE DE CREATION: 10 octobre 2013    AUTEUR: Gabriel Fortin-B
    264          // DATE DE MODIFICATION:	
    265          //*****************************************************************************

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    266          void  CLInOutBase :: vOutportb(unsigned short int usiAdresse, 
   \                     ??vOutportb:
    267                                                 unsigned char ucDonnee)
    268          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    269             ucpAdresse = (UC xdata *) usiAdresse;//Affecte l'addresse du peripherique 
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   EC           MOV     A,R4
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   A3           INC     DPTR
   \   00000D   ED           MOV     A,R5
   \   00000E   F0           MOVX    @DPTR,A
    270                                                  //au pointeur 
    271             *ucpAdresse = ucDonnee;              //Ecrit  la donnee a l'adresse
   \   00000F   E9           MOV     A,R1
   \   000010   C0E0         PUSH    A
   \   000012   8A82         MOV     DPL,R2
   \   000014   8B83         MOV     DPH,R3
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F8           MOV     R0,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F583         MOV     DPH,A
   \   00001E   8882         MOV     DPL,R0
   \   000020   D0E0         POP     A
   \   000022   F0           MOVX    @DPTR,A
    272          
    273          }
   \   000023   D083         POP     DPH
   \   000025   D082         POP     DPL
   \   000027   22           RET
    274          
    275          //@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       0      0      0  CLInOutBase::ucIn(unsigned short)
                          0 0  0 -> CLInOutBase::ucInportb(unsigned short)
       2      0     10  CLInOutBase::ucInportb(unsigned short)
       1      0     10  CLInOutBase::usiIn(unsigned short, UC)
                          0 0 10 -> CLInOutBase::ucInportb(unsigned short)
       1      0      0  CLInOutBase::vOut(unsigned short, unsigned char)
                          1 0  0 -> CLInOutBase::vOutportb(unsigned short, unsigned char)
       0      0     12  CLInOutBase::vOut(unsigned short, unsigned short, unsigned char)
                          0 0 10 -> CLInOutBase::vOutportb(unsigned short, unsigned char)
       3      0     10  CLInOutBase::vOutportb(unsigned short, unsigned char)


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       3  CLInOutBase::ucIn(unsigned short)
      36  CLInOutBase::ucInportb(unsigned short)
     203  CLInOutBase::usiIn(unsigned short, UC)
      13  CLInOutBase::vOut(unsigned short, unsigned char)
     213  CLInOutBase::vOut(unsigned short, unsigned short, unsigned char)
      40  CLInOutBase::vOutportb(unsigned short, unsigned char)

 
 508 bytes in segment NEAR_CODE
 
 508 bytes of CODE memory

Errors: none
Warnings: none
