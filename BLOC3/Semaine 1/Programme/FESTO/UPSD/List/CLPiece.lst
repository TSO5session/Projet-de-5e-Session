###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             11/Nov/2014  11:41:10 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  near                                               #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data                                               #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  C:\Users\1230838\Desktop\PROJETSESSION5\BLOC3\Prog #
#                          ramme\FESTO\Libraire\CLPiece.cpp                   #
#    Command line       =  C:\Users\1230838\Desktop\PROJETSESSION5\BLOC3\Prog #
#                          ramme\FESTO\Libraire\CLPiece.cpp -D UPSD3254A      #
#                          --preprocess=cl C:\Users\1230838\Desktop\PROJETSES #
#                          SION5\BLOC3\Programme\FESTO\UPSD\List\ -lC         #
#                          C:\Users\1230838\Desktop\PROJETSESSION5\BLOC3\Prog #
#                          ramme\FESTO\UPSD\List\ -lA                         #
#                          C:\Users\1230838\Desktop\PROJETSESSION5\BLOC3\Prog #
#                          ramme\FESTO\UPSD\List\ -o                          #
#                          C:\Users\1230838\Desktop\PROJETSESSION5\BLOC3\Prog #
#                          ramme\FESTO\UPSD\Obj\ -e --no_cse --no_unroll      #
#                          --no_inline --no_code_motion --no_tbaa --debug     #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=near --calling_convention=xdata_reent #
#                          rant --place_constants=data --nr_virtual_regs 8    #
#                          --dlib_config "C:\Program Files\IAR                #
#                          Systems\Embedded Workbench                         #
#                          6.4\8051\LIB\DLIB\dl8051Normal.h" -Ol --eec++      #
#    List file          =  C:\Users\1230838\Desktop\PROJETSESSION5\BLOC3\Prog #
#                          ramme\FESTO\UPSD\List\CLPiece.lst                  #
#    Object file        =  C:\Users\1230838\Desktop\PROJETSESSION5\BLOC3\Prog #
#                          ramme\FESTO\UPSD\Obj\CLPiece.r51                   #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\1230838\Desktop\PROJETSESSION5\BLOC3\Programme\FESTO\Libraire\CLPiece.cpp
      1          // ***************** FICHIER:CLPiece.cpp
      2          //
      3          //  Description:Ce fichier contient la definition des differentes fonction 
      4          //              pour controler les pieces
      5          //
      6          //  Application realisee avec IAR
      7          //
      8          //  AUTEUR : Gabriel Fortin-Belanger
      9          //  DATE CREATION :    2014-02-07		 VERSION: 1.0
     10          //  DATE MODIFICATION: ****-**-**
     11          //
     12          //******************************************************************************
     13          #include "CLInOutBase.h"
     14          #include "_DeclarationGenerale.h"
     15          #include "CLPiece.h"
     16          
     17          
     18          
     19          //***********************CLPiece(void)
     20          //
     21          //Description:Ce constructeur met l addresse de la piece a 0xFA00 par defaut
     22          //            lors de la creation d un objet 
     23          //
     24          // Nom:CLPiece :: CLPiece(void)
     25          //           
     26          // PARAMETRE D'ENTREE: -
     27          //                  
     28          // 
     29          //
     30          // PARAMETRE DE SORTIE: -             
     31          //
     32          //    
     33          // Membre utilise: usiAdresseMaison
     34          //
     35          //
     36          // DATE DE CREATION: 10 octobre 2013    AUTEUR: Gabriel Fortin-B
     37          // DATE DE MODIFICATION:	
     38          //*****************************************************************************

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
     39          CLPiece :: CLPiece(void)   //Constructeur defaut
   \                     ??CLPiece:
     40          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     41            usiAdresseMaison = 0xFA00;//Adresse par defaut 
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   7400         MOV     A,#0x0
   \   00000E   F0           MOVX    @DPTR,A
   \   00000F   A3           INC     DPTR
   \   000010   74FA         MOV     A,#-0x6
   \   000012   F0           MOVX    @DPTR,A
     42          }
   \   000013   D083         POP     DPH
   \   000015   D082         POP     DPL
   \   000017   22           RET
     43          
     44          //***********************CLPiece(USI usiAddresse
     45          //
     46          //Description:Ce constructeur met l addresse de la piece a l adresse passer
     47          //            en parametre.
     48          //
     49          // Nom:CLPiece :: CLPiece(USI usiAddresse
     50          //           
     51          // PARAMETRE D'ENTREE: usiAddresse : Adresse choisit en fonction du systeme
     52          //                                   utiliser avec le simulateur de maison.
     53          //                  
     54          // 
     55          //
     56          // PARAMETRE DE SORTIE: -             
     57          //
     58          //    
     59          // Membre utilise: usiAdresseMaison
     60          //
     61          //
     62          // DATE DE CREATION: 10 octobre 2013    AUTEUR: Gabriel Fortin-B
     63          // DATE DE MODIFICATION:	
     64          //*****************************************************************************

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
     65          CLPiece :: CLPiece(USI usiAddresse)//Constructeur initialisateur
   \                     ??CLPiece_1:
     66          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     67           usiAdresseMaison = usiAddresse;//Adresse de la piece est celle que l on choisit
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   EC           MOV     A,R4
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   A3           INC     DPTR
   \   00000F   ED           MOV     A,R5
   \   000010   F0           MOVX    @DPTR,A
     68          }
   \   000011   D083         POP     DPH
   \   000013   D082         POP     DPL
   \   000015   22           RET
     69          
     70          //***********************~CLPiece(void)
     71          //
     72          //Description:Ce constructeur met l addresse de la piece a l adresse passer
     73          //            en parametre.
     74          //
     75          // Nom:CLPiece :: ~CLPiece(void)
     76          //           
     77          // PARAMETRE D'ENTREE:  -
     78          //                        
     79          //                  
     80          // 
     81          //
     82          // PARAMETRE DE SORTIE: -             
     83          //
     84          //    
     85          // Membre utilise: vSetLumiere();
     86          //
     87          //
     88          // DATE DE CREATION: 10 octobre 2013    AUTEUR: Gabriel Fortin-B
     89          // DATE DE MODIFICATION:	
     90          //*****************************************************************************

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
     91          CLPiece :: ~CLPiece(void)//destructeur qui reinitialise la piece
   \                     `?~CLPiece`:
     92          {
   \   000000   74F8         MOV     A,#-0x8
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 8
   \   000005                ; Auto size: 0
     93            vSetLumiere(0 , 0xFA00,0x00);
   \   000005                ; Setup parameters for call to function CLPiece::vSetLumiere(UC, USI, UC)
   \   000005   75..00       MOV     ?V0 + 0,#0x0
   \   000008   78..         MOV     R0,#?V0 + 0
   \   00000A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00000D   7C00         MOV     R4,#0x0
   \   00000F   7DFA         MOV     R5,#-0x6
   \   000011   7900         MOV     R1,#0x0
   \   000013   12....       LCALL   ??vSetLumiere
   \   000016   7401         MOV     A,#0x1
   \   000018   12....       LCALL   ?DEALLOC_XSTACK8
     94          }
   \   00001B   7F01         MOV     R7,#0x1
   \   00001D   02....       LJMP    ?FUNC_LEAVE_XDATA
     95          
     96          
     97          //***********************fEtatTemperature
     98          //
     99          //Description:Cette fonction permet de lire la temperature de la piece.
    100          //            
    101          //
    102          // Nom:CLPiece :: fEtatTemperature(void)
    103          //           
    104          // PARAMETRE D'ENTREE: -
    105          //                        
    106          //                  
    107          // 
    108          //
    109          // PARAMETRE DE SORTIE: fTemperature             
    110          //
    111          //    
    112          // Membre utilise: vLirePiece();
    113          //                 unPiece.stPiece.ucTemperature;
    114          //                 unPiece.stPiece.ucTemperaturePrecis
    115          //
    116          //
    117          //
    118          // DATE DE CREATION: 10 octobre 2013    AUTEUR: Gabriel Fortin-B
    119          // DATE DE MODIFICATION:	
    120          //*****************************************************************************

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    121          float CLPiece :: fEtatTemperature(void)
   \                     ??fEtatTemperature:
    122          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    123            float fTemperature; 
    124            
    125            vLirePiece(usiAdresseMaison);//Lit A l adresse de la piece
   \   000009                ; Setup parameters for call to function CLPiece::vLirePiece(USI)
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   FC           MOV     R4,A
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   FD           MOV     R5,A
   \   000016   EE           MOV     A,R6
   \   000017   FA           MOV     R2,A
   \   000018   EF           MOV     A,R7
   \   000019   FB           MOV     R3,A
   \   00001A   12....       LCALL   ??vLirePiece
    126            fTemperature = (float)unPiece.stPiece.ucTemperature;//Temperature lu
   \   00001D   8E82         MOV     DPL,R6
   \   00001F   8F83         MOV     DPH,R7
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   C3           CLR     C
   \   000029   13           RRC     A
   \   00002A   541F         ANL     A,#0x1f
   \   00002C   F5..         MOV     ?V0 + 0,A
   \   00002E   E4           CLR     A
   \   00002F   F5..         MOV     ?V0 + 1,A
   \   000031   F5..         MOV     ?V0 + 2,A
   \   000033   F5..         MOV     ?V0 + 3,A
   \   000035   78..         MOV     R0,#?V0 + 0
   \   000037   12....       LCALL   ?UL_TO_FLT
    127            if(unPiece.stPiece.ucTemperaturePrecis == 1)// Si LSB a 1
   \   00003A   8E82         MOV     DPL,R6
   \   00003C   8F83         MOV     DPH,R7
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \   000045   A2E0         MOV     C,0xE0 /* A   */.0
    128            {
    129              fTemperature = fTemperature + 0,5;       //Ajoute 0,5 pour plus de pecision
    130            }
    131            else
    132            {
    133              fTemperature = fTemperature + 0,0;       //Sinon ajoute rien
    134            }
    135            return(fTemperature + 15);                // plus 15 car c est la reference
   \   000047   90....       MOV     DPTR,#__Constant_41700000
   \   00004A   78..         MOV     R0,#?V0 + 4
   \   00004C   12....       LCALL   ?L_MOV_X
   \   00004F   78..         MOV     R0,#?V0 + 0
   \   000051   79..         MOV     R1,#?V0 + 4
   \   000053   12....       LCALL   ?FLT_ADD
   \   000056   AA..         MOV     R2,?V0 + 0
   \   000058   AB..         MOV     R3,?V0 + 1
   \   00005A   AC..         MOV     R4,?V0 + 2
   \   00005C   AD..         MOV     R5,?V0 + 3
   \   00005E   7F08         MOV     R7,#0x8
   \   000060   02....       LJMP    ?FUNC_LEAVE_XDATA
    136          }
    137          
    138          
    139          //***********************ucEtatChauffage
    140          //
    141          //Description:Cette fonction permet de lire l etat ON ou OFF du chauffage dans
    142          //            une des pieces de la maison
    143          //
    144          // Nom:CLPiece :: ucEtatChauffage(void)
    145          //           
    146          // PARAMETRE D'ENTREE:  -
    147          //                        
    148          //                  
    149          // 
    150          //
    151          // PARAMETRE DE SORTIE: unPiece.stPiece.ucEtatChauffage            
    152          //
    153          //    
    154          // Membre utilise: vLirePiece(usiAdresseMaison)
    155          //                 unPiece.stPiece.ucEtatChauffage
    156          //
    157          //
    158          // DATE DE CREATION: 10 octobre 2013    AUTEUR: Gabriel Fortin-B
    159          // DATE DE MODIFICATION:	
    160          //*****************************************************************************

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    161          UC CLPiece :: ucEtatChauffage(void)
   \                     ??ucEtatChauffage:
    162          {
   \   000000   74F8         MOV     A,#-0x8
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 8
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    163            vLirePiece(usiAdresseMaison);
   \   000009                ; Setup parameters for call to function CLPiece::vLirePiece(USI)
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   FC           MOV     R4,A
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   FD           MOV     R5,A
   \   000016   EE           MOV     A,R6
   \   000017   FA           MOV     R2,A
   \   000018   EF           MOV     A,R7
   \   000019   FB           MOV     R3,A
   \   00001A   12....       LCALL   ??vLirePiece
    164            return(unPiece.stPiece.ucEtatChauffage);
   \   00001D   8E82         MOV     DPL,R6
   \   00001F   8F83         MOV     DPH,R7
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   A2E6         MOV     C,0xE0 /* A   */.6
   \   00002A   E4           CLR     A
   \   00002B   33           RLC     A
   \   00002C   F9           MOV     R1,A
   \   00002D   7F01         MOV     R7,#0x1
   \   00002F   02....       LJMP    ?FUNC_LEAVE_XDATA
    165          }
    166          
    167          
    168          
    169          //***********************ucEtatLumiere
    170          //
    171          //Description:Cette fonction permet de lire l etat ON ou OFF de la lumiere dans
    172          //            une des pieces de la maison
    173          //
    174          // Nom:CLPiece :: ucEtatLumiere(void)
    175          //           
    176          // PARAMETRE D'ENTREE: -
    177          //                        
    178          //                  
    179          // 
    180          //
    181          // PARAMETRE DE SORTIE: unPiece.stPiece.ucEtatLumiere            
    182          //
    183          //    
    184          // Membre utilise: vLirePiece(usiAdresseMaison)
    185          //                 unPiece.stPiece.ucEtatLumiere
    186          //
    187          //
    188          // DATE DE CREATION: 10 octobre 2013    AUTEUR: Gabriel Fortin-B
    189          // DATE DE MODIFICATION:	
    190          //*****************************************************************************

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    191          UC CLPiece :: ucEtatLumiere(void)
   \                     ??ucEtatLumiere:
    192          {
   \   000000   74F8         MOV     A,#-0x8
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 8
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    193            vLirePiece(usiAdresseMaison);
   \   000009                ; Setup parameters for call to function CLPiece::vLirePiece(USI)
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   FC           MOV     R4,A
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   FD           MOV     R5,A
   \   000016   EE           MOV     A,R6
   \   000017   FA           MOV     R2,A
   \   000018   EF           MOV     A,R7
   \   000019   FB           MOV     R3,A
   \   00001A   12....       LCALL   ??vLirePiece
    194            return(unPiece.stPiece.ucEtatLumiere);
   \   00001D   8E82         MOV     DPL,R6
   \   00001F   8F83         MOV     DPH,R7
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   A2E7         MOV     C,0xE0 /* A   */.7
   \   00002A   E4           CLR     A
   \   00002B   33           RLC     A
   \   00002C   F9           MOV     R1,A
   \   00002D   7F01         MOV     R7,#0x1
   \   00002F   02....       LJMP    ?FUNC_LEAVE_XDATA
    195          }
    196          
    197          
    198          //***********************vSetLumiere
    199          //
    200          //Description:Cette fonction permet d allumer ou d eteindre les lumieres sans
    201          //            toucher au chauffage.
    202          //
    203          // Nom:CLPiece :: vSetLumiere(UC ucLumiere,USI usiAdresseConsigne, UC ucPiece)
    204          //           
    205          // PARAMETRE D'ENTREE: ucLumiere: Etat ON ou OFF
    206          //                     usiAdresseConsigne: adresseou se situe la consigne 
    207          //                     ucPiece:0x00 = Piece 1
    208          //                             0x01 = Piece 2
    209          //                             0x10 = Piece 3
    210          //                             0x11 = Piece 4
    211          // 
    212          //
    213          // PARAMETRE DE SORTIE: -             
    214          //
    215          //    
    216          // Membre utilise: fGetTemperatureConsigne(usiAdresseConsigne,ucPiece)
    217          //                 Va lire la temperature de consigne
    218          //
    219          //                 unPiece.stPiece.ucEtatChauffage
    220          //                 unPiece.stPiece.ucEtatLumiere
    221          //                 unPiece.stPiece.ucTemperaturePrecis
    222          //                 unPiece.stPiece.ucTemperature
    223          //                 ucTemperatureHexa
    224          //                 vEcrirePiece(usiAdresseMaison);
    225          //
    226          //
    227          // DATE DE CREATION: 10 octobre 2013    AUTEUR: Gabriel Fortin-B
    228          // DATE DE MODIFICATION:	
    229          //*****************************************************************************

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    230          void CLPiece :: vSetLumiere(UC ucLumiere,USI usiAdresseConsigne, UC ucPiece)
   \                     ??vSetLumiere:
    231          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V0 + 0,R1
   \   00000B   7409         MOV     A,#0x9
   \   00000D   12....       LCALL   ?XSTACK_DISP0_8
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F9           MOV     R1,A
    232            
    233            fGetTemperatureConsigne(usiAdresseConsigne,ucPiece);
   \   000012                ; Setup parameters for call to function CLPiece::fGetTemperatureConsigne(USI, UC)
   \   000012   EE           MOV     A,R6
   \   000013   FA           MOV     R2,A
   \   000014   EF           MOV     A,R7
   \   000015   FB           MOV     R3,A
   \   000016   12....       LCALL   ??fGetTemperatureConsigne
    234            unPiece.stPiece.ucEtatChauffage = 0;
   \   000019   8E82         MOV     DPL,R6
   \   00001B   8F83         MOV     DPH,R7
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   E0           MOVX    A,@DPTR
   \   000024   C2E6         CLR     0xE0 /* A   */.6
   \   000026   F0           MOVX    @DPTR,A
    235            unPiece.stPiece.ucEtatLumiere = ucLumiere;
   \   000027   85....       MOV     ?V0 + 1,?V0 + 0
   \   00002A   8E82         MOV     DPL,R6
   \   00002C   8F83         MOV     DPH,R7
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   E5..         MOV     A,?V0 + 0
   \   000036   A2E0         MOV     C,0xE0 /* A   */.0
   \   000038   E0           MOVX    A,@DPTR
   \   000039   92E7         MOV     0xE0 /* A   */.7,C
   \   00003B   F0           MOVX    @DPTR,A
    236            unPiece.stPiece.ucTemperaturePrecis = ucTemperatureHexa & 0x01;
   \   00003C   8E82         MOV     DPL,R6
   \   00003E   8F83         MOV     DPH,R7
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   A2E0         MOV     C,0xE0 /* A   */.0
   \   00004A   E4           CLR     A
   \   00004B   33           RLC     A
   \   00004C   F8           MOV     R0,A
   \   00004D   8E82         MOV     DPL,R6
   \   00004F   8F83         MOV     DPH,R7
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   A2E0         MOV     C,0xE0 /* A   */.0
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   92E0         MOV     0xE0 /* A   */.0,C
   \   00005C   F0           MOVX    @DPTR,A
    237            unPiece.stPiece.ucTemperature = ucTemperatureHexa & 0x3C;
   \   00005D   8E82         MOV     DPL,R6
   \   00005F   8F83         MOV     DPH,R7
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   A3           INC     DPTR
   \   000065   A3           INC     DPTR
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   E0           MOVX    A,@DPTR
   \   000069   543C         ANL     A,#0x3c
   \   00006B   C3           CLR     C
   \   00006C   33           RLC     A
   \   00006D   543E         ANL     A,#0x3e
   \   00006F   F8           MOV     R0,A
   \   000070   8E82         MOV     DPL,R6
   \   000072   8F83         MOV     DPH,R7
   \   000074   A3           INC     DPTR
   \   000075   A3           INC     DPTR
   \   000076   A3           INC     DPTR
   \   000077   A3           INC     DPTR
   \   000078   A3           INC     DPTR
   \   000079   A3           INC     DPTR
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   54C1         ANL     A,#0xc1
   \   00007D   48           ORL     A,R0
   \   00007E   8E82         MOV     DPL,R6
   \   000080   8F83         MOV     DPH,R7
   \   000082   A3           INC     DPTR
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   A3           INC     DPTR
   \   000088   F0           MOVX    @DPTR,A
    238            vEcrirePiece(usiAdresseMaison);
   \   000089                ; Setup parameters for call to function CLPiece::vEcrirePiece(USI)
   \   000089   8E82         MOV     DPL,R6
   \   00008B   8F83         MOV     DPH,R7
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   E0           MOVX    A,@DPTR
   \   000092   FC           MOV     R4,A
   \   000093   A3           INC     DPTR
   \   000094   E0           MOVX    A,@DPTR
   \   000095   FD           MOV     R5,A
   \   000096   EE           MOV     A,R6
   \   000097   FA           MOV     R2,A
   \   000098   EF           MOV     A,R7
   \   000099   FB           MOV     R3,A
   \   00009A   12....       LCALL   ??vEcrirePiece
    239          
    240          }
   \   00009D   7F02         MOV     R7,#0x2
   \   00009F   02....       LJMP    ?FUNC_LEAVE_XDATA
    241          
    242          //***********************fGetTemperatureConsigne
    243          //
    244          //Description:Cette fonction permet de lire la temperature de consigne
    245          //            
    246          //
    247          // Nom:CLPiece :: fGetTemperatureConsigne(USI usiAdresseConsigne, UC ucPiece)
    248          //           
    249          // PARAMETRE D'ENTREE: usiAdresseConsigne: adresse ou se situe la consigne 
    250          //                     ucPiece:0x00 = Piece 1
    251          //                             0x01 = Piece 2
    252          //                             0x10 = Piece 3
    253          //                             0x11 = Piece 4
    254          // 
    255          //
    256          // PARAMETRE DE SORTIE: fTemperature             
    257          //
    258          //    
    259          // Membre utilise: unPiece.stPiece.ucEtatChauffage
    260          //                 unPiece.stPiece.ucEtatLumiere
    261          //                 vEcrirePiece( usiAdresseConsigne)
    262          //                 ucTemperatureHexa
    263          //                 vLirePiece(usiAdresseConsigne)
    264          //                 unPiece.stPiece.ucTemperature
    265          //                 unPiece.stPiece.ucTemperaturePrecis
    266          //
    267          //
    268          // DATE DE CREATION: 10 octobre 2013    AUTEUR: Gabriel Fortin-B
    269          // DATE DE MODIFICATION:	
    270          //*****************************************************************************

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    271          float CLPiece :: fGetTemperatureConsigne(USI usiAdresseConsigne, UC ucPiece)
   \                     ??fGetTemperatureConsigne:
    272          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   EA           MOV     A,R2
   \   000013   FE           MOV     R6,A
   \   000014   EB           MOV     A,R3
   \   000015   FF           MOV     R7,A
   \   000016   8C..         MOV     ?V0 + 0,R4
   \   000018   8D..         MOV     ?V0 + 1,R5
    273            float fTemperature;
    274            
    275            unPiece.stPiece.ucEtatChauffage = ucPiece & 0x01; 
   \   00001A   85..82       MOV     DPL,?XSP + 0
   \   00001D   85..83       MOV     DPH,?XSP + 1
   \   000020   E0           MOVX    A,@DPTR
   \   000021   A2E0         MOV     C,0xE0 /* A   */.0
   \   000023   E4           CLR     A
   \   000024   33           RLC     A
   \   000025   F5..         MOV     ?V0 + 5,A
   \   000027   8E82         MOV     DPL,R6
   \   000029   8F83         MOV     DPH,R7
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   C082         PUSH    DPL
   \   000033   C083         PUSH    DPH
   \   000035   85..82       MOV     DPL,?XSP + 0
   \   000038   85..83       MOV     DPH,?XSP + 1
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   A2E0         MOV     C,0xE0 /* A   */.0
   \   00003E   D083         POP     DPH
   \   000040   D082         POP     DPL
   \   000042   E0           MOVX    A,@DPTR
   \   000043   92E6         MOV     0xE0 /* A   */.6,C
   \   000045   F0           MOVX    @DPTR,A
    276            unPiece.stPiece.ucEtatLumiere = ucPiece & 0x10;
   \   000046   85..82       MOV     DPL,?XSP + 0
   \   000049   85..83       MOV     DPH,?XSP + 1
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   5410         ANL     A,#0x10
   \   00004F   F5..         MOV     ?V0 + 4,A
   \   000051   8E82         MOV     DPL,R6
   \   000053   8F83         MOV     DPH,R7
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   C2E7         CLR     0xE0 /* A   */.7
   \   00005E   F0           MOVX    @DPTR,A
    277            vEcrirePiece( usiAdresseConsigne);
   \   00005F                ; Setup parameters for call to function CLPiece::vEcrirePiece(USI)
   \   00005F   AC..         MOV     R4,?V0 + 0
   \   000061   AD..         MOV     R5,?V0 + 1
   \   000063   EE           MOV     A,R6
   \   000064   FA           MOV     R2,A
   \   000065   EF           MOV     A,R7
   \   000066   FB           MOV     R3,A
   \   000067   12....       LCALL   ??vEcrirePiece
    278            
    279            
    280            vLirePiece(usiAdresseConsigne);
   \   00006A                ; Setup parameters for call to function CLPiece::vLirePiece(USI)
   \   00006A   AC..         MOV     R4,?V0 + 0
   \   00006C   AD..         MOV     R5,?V0 + 1
   \   00006E   EE           MOV     A,R6
   \   00006F   FA           MOV     R2,A
   \   000070   EF           MOV     A,R7
   \   000071   FB           MOV     R3,A
   \   000072   12....       LCALL   ??vLirePiece
    281            ucTemperatureHexa = (unPiece.stPiece.ucTemperature << 1) + 
    282                                (unPiece.stPiece.ucTemperaturePrecis);
   \   000075   8E82         MOV     DPL,R6
   \   000077   8F83         MOV     DPH,R7
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   A3           INC     DPTR
   \   00007E   A3           INC     DPTR
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   A2E0         MOV     C,0xE0 /* A   */.0
   \   000082   E4           CLR     A
   \   000083   33           RLC     A
   \   000084   F8           MOV     R0,A
   \   000085   8E82         MOV     DPL,R6
   \   000087   8F83         MOV     DPH,R7
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   A3           INC     DPTR
   \   00008C   A3           INC     DPTR
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   C3           CLR     C
   \   000091   13           RRC     A
   \   000092   541F         ANL     A,#0x1f
   \   000094   C3           CLR     C
   \   000095   33           RLC     A
   \   000096   28           ADD     A,R0
   \   000097   8E82         MOV     DPL,R6
   \   000099   8F83         MOV     DPH,R7
   \   00009B   A3           INC     DPTR
   \   00009C   A3           INC     DPTR
   \   00009D   A3           INC     DPTR
   \   00009E   A3           INC     DPTR
   \   00009F   A3           INC     DPTR
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   F0           MOVX    @DPTR,A
    283            
    284            fTemperature = (float)unPiece.stPiece.ucTemperature;
   \   0000A3   8E82         MOV     DPL,R6
   \   0000A5   8F83         MOV     DPH,R7
   \   0000A7   A3           INC     DPTR
   \   0000A8   A3           INC     DPTR
   \   0000A9   A3           INC     DPTR
   \   0000AA   A3           INC     DPTR
   \   0000AB   A3           INC     DPTR
   \   0000AC   A3           INC     DPTR
   \   0000AD   E0           MOVX    A,@DPTR
   \   0000AE   C3           CLR     C
   \   0000AF   13           RRC     A
   \   0000B0   541F         ANL     A,#0x1f
   \   0000B2   F5..         MOV     ?V0 + 0,A
   \   0000B4   E4           CLR     A
   \   0000B5   F5..         MOV     ?V0 + 1,A
   \   0000B7   F5..         MOV     ?V0 + 2,A
   \   0000B9   F5..         MOV     ?V0 + 3,A
   \   0000BB   78..         MOV     R0,#?V0 + 0
   \   0000BD   12....       LCALL   ?UL_TO_FLT
    285            if(unPiece.stPiece.ucTemperaturePrecis == 1)
   \   0000C0   8E82         MOV     DPL,R6
   \   0000C2   8F83         MOV     DPH,R7
   \   0000C4   A3           INC     DPTR
   \   0000C5   A3           INC     DPTR
   \   0000C6   A3           INC     DPTR
   \   0000C7   A3           INC     DPTR
   \   0000C8   A3           INC     DPTR
   \   0000C9   A3           INC     DPTR
   \   0000CA   E0           MOVX    A,@DPTR
   \   0000CB   A2E0         MOV     C,0xE0 /* A   */.0
    286            {
    287              fTemperature = fTemperature + 0,5;
    288            }
    289            else
    290            {
    291              fTemperature = fTemperature + 0,0;
    292            }
    293            return(fTemperature + 15);
   \   0000CD   90....       MOV     DPTR,#__Constant_41700000
   \   0000D0   78..         MOV     R0,#?V0 + 4
   \   0000D2   12....       LCALL   ?L_MOV_X
   \   0000D5   78..         MOV     R0,#?V0 + 0
   \   0000D7   79..         MOV     R1,#?V0 + 4
   \   0000D9   12....       LCALL   ?FLT_ADD
   \   0000DC   AA..         MOV     R2,?V0 + 0
   \   0000DE   AB..         MOV     R3,?V0 + 1
   \   0000E0   AC..         MOV     R4,?V0 + 2
   \   0000E2   AD..         MOV     R5,?V0 + 3
   \   0000E4   7401         MOV     A,#0x1
   \   0000E6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E9   7F08         MOV     R7,#0x8
   \   0000EB   02....       LJMP    ?FUNC_LEAVE_XDATA
    294          
    295          }
    296          
    297          
    298          //***********************vLirePiece
    299          //
    300          //Description:Cette fonction permet de lire l etat de la piece
    301          //            
    302          //
    303          // Nom:CLPiece :: vLirePiece(USI usiAdresse)
    304          //           
    305          // PARAMETRE D'ENTREE: usiAddresse
    306          //                        
    307          //                  
    308          // 
    309          //
    310          // PARAMETRE DE SORTIE: -             
    311          //
    312          //    
    313          // Membre utilise: ucIn(usiAdresse)
    314          //                 unPiece.ucPiece
    315          //                 
    316          //
    317          //
    318          // DATE DE CREATION: 10 octobre 2013    AUTEUR: Gabriel Fortin-B
    319          // DATE DE MODIFICATION:	
    320          //*****************************************************************************

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    321          void CLPiece :: vLirePiece(USI usiAdresse)
   \                     ??vLirePiece:
    322          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
    323          
    324            unPiece.ucPiece = ucIn(usiAdresse); // Lecture direct sur le materiel
   \   000008                ; Setup parameters for call to function CLInOutBase::ucIn(unsigned short)
   \   000008   AA82         MOV     R2,DPL
   \   00000A   AB83         MOV     R3,DPH
   \   00000C   12....       LCALL   ??ucIn
   \   00000F   E9           MOV     A,R1
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   F0           MOVX    @DPTR,A
    325            for(unsigned int i = 0; i<60000;i++);
   \   000017   7800         MOV     R0,#0x0
   \   000019   7900         MOV     R1,#0x0
   \   00001B   8008         SJMP    ??vLirePiece_1
   \                     ??vLirePiece_2:
   \   00001D   E8           MOV     A,R0
   \   00001E   2401         ADD     A,#0x1
   \   000020   F8           MOV     R0,A
   \   000021   E9           MOV     A,R1
   \   000022   3400         ADDC    A,#0x0
   \   000024   F9           MOV     R1,A
   \                     ??vLirePiece_1:
   \   000025   C3           CLR     C
   \   000026   E8           MOV     A,R0
   \   000027   9460         SUBB    A,#0x60
   \   000029   E9           MOV     A,R1
   \   00002A   94EA         SUBB    A,#-0x16
   \   00002C   40EF         JC      ??vLirePiece_2
    326          
    327          }
   \   00002E   D083         POP     DPH
   \   000030   D082         POP     DPL
   \   000032   22           RET
    328          
    329          
    330          //***********************vEcrirePiece
    331          //
    332          //Description:Cette fonction permet d ecrire l etat de la piece.
    333          //            
    334          //
    335          // Nom:CLPiece :: vEcrirePiece(USI usiAdresse)
    336          //           
    337          // PARAMETRE D'ENTREE: usiAddresse
    338          //                        
    339          //                  
    340          // 
    341          //
    342          // PARAMETRE DE SORTIE: -             
    343          //
    344          //    
    345          // Membre utilise: vOut();
    346          //                 unPiece.ucPiece
    347          //                 
    348          //
    349          //
    350          // DATE DE CREATION: 10 octobre 2013    AUTEUR: Gabriel Fortin-B
    351          // DATE DE MODIFICATION:	
    352          //*****************************************************************************

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    353          void CLPiece :: vEcrirePiece(USI usiAdresse)
   \                     ??vEcrirePiece:
    354          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    355            vOut(usiAdresse,unPiece.ucPiece);// Ecriture direct sur le materiel
   \   000004                ; Setup parameters for call to function CLInOutBase::vOut(unsigned short, unsigned char)
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F9           MOV     R1,A
   \   000010   12....       LCALL   ??vOut
    356            for(unsigned int i = 0; i<60000;i++);
   \   000013   7800         MOV     R0,#0x0
   \   000015   7900         MOV     R1,#0x0
   \   000017   8008         SJMP    ??vEcrirePiece_1
   \                     ??vEcrirePiece_2:
   \   000019   E8           MOV     A,R0
   \   00001A   2401         ADD     A,#0x1
   \   00001C   F8           MOV     R0,A
   \   00001D   E9           MOV     A,R1
   \   00001E   3400         ADDC    A,#0x0
   \   000020   F9           MOV     R1,A
   \                     ??vEcrirePiece_1:
   \   000021   C3           CLR     C
   \   000022   E8           MOV     A,R0
   \   000023   9460         SUBB    A,#0x60
   \   000025   E9           MOV     A,R1
   \   000026   94EA         SUBB    A,#-0x16
   \   000028   40EF         JC      ??vEcrirePiece_2
    357          
    358          }
   \   00002A   D083         POP     DPH
   \   00002C   D082         POP     DPL
   \   00002E   22           RET

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     __Constant_41700000:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for __Constant_41700000>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for __Constant_41700000>`:
   \   000000   00007041     DD 41700000H

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \   __near_func __xdata_reentrant CLPiece &CLPiece::new CLPiece()
   \                     `??new CLPiece`:
   \   000000   C0..         PUSH    ?V0 + 0
   \   000002   C0..         PUSH    ?V0 + 1
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004                ; Setup parameters for call to function operator new(unsigned int)
   \   000004   7A08         MOV     R2,#0x8
   \   000006   7B00         MOV     R3,#0x0
   \   000008   12....       LCALL   `??operator new`
   \   00000B   8A..         MOV     ?V0 + 0,R2
   \   00000D   8B..         MOV     ?V0 + 1,R3
   \   00000F   A8..         MOV     R0,?V0 + 0
   \   000011   A9..         MOV     R1,?V0 + 1
   \   000013   E8           MOV     A,R0
   \   000014   FA           MOV     R2,A
   \   000015   E9           MOV     A,R1
   \   000016   FB           MOV     R3,A
   \   000017   E8           MOV     A,R0
   \   000018   49           ORL     A,R1
   \   000019   600D         JZ      `??new CLPiece_2`
   \   00001B                ; Setup parameters for call to function CLPiece::CLPiece()
   \   00001B   12....       LCALL   ??CLPiece
   \   00001E   8A..         MOV     ?V0 + 0,R2
   \   000020   8B..         MOV     ?V0 + 1,R3
   \   000022   AA..         MOV     R2,?V0 + 0
   \   000024   AB..         MOV     R3,?V0 + 1
   \   000026   8004         SJMP    `??new CLPiece_3`
   \                     `??new CLPiece_2`:
   \   000028   7A00         MOV     R2,#0x0
   \   00002A   7B00         MOV     R3,#0x0
   \                     `??new CLPiece_3`:
   \   00002C   D0..         POP     ?V0 + 1
   \   00002E   D0..         POP     ?V0 + 0
   \   000030   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \   __near_func __xdata_reentrant CLPiece &CLPiece::new CLPiece(USI)
   \                     `??new CLPiece_1`:
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009                ; Setup parameters for call to function operator new(unsigned int)
   \   000009   7A08         MOV     R2,#0x8
   \   00000B   7B00         MOV     R3,#0x0
   \   00000D   12....       LCALL   `??operator new`
   \   000010   8A..         MOV     ?V0 + 0,R2
   \   000012   8B..         MOV     ?V0 + 1,R3
   \   000014   A8..         MOV     R0,?V0 + 0
   \   000016   A9..         MOV     R1,?V0 + 1
   \   000018   E8           MOV     A,R0
   \   000019   FA           MOV     R2,A
   \   00001A   E9           MOV     A,R1
   \   00001B   FB           MOV     R3,A
   \   00001C   E8           MOV     A,R0
   \   00001D   49           ORL     A,R1
   \   00001E   6011         JZ      `??new CLPiece_4`
   \   000020                ; Setup parameters for call to function CLPiece::CLPiece(USI)
   \   000020   EE           MOV     A,R6
   \   000021   FC           MOV     R4,A
   \   000022   EF           MOV     A,R7
   \   000023   FD           MOV     R5,A
   \   000024   12....       LCALL   ??CLPiece_1
   \   000027   8A..         MOV     ?V0 + 0,R2
   \   000029   8B..         MOV     ?V0 + 1,R3
   \   00002B   AA..         MOV     R2,?V0 + 0
   \   00002D   AB..         MOV     R3,?V0 + 1
   \   00002F   8004         SJMP    `??new CLPiece_5`
   \                     `??new CLPiece_4`:
   \   000031   7A00         MOV     R2,#0x0
   \   000033   7B00         MOV     R3,#0x0
   \                     `??new CLPiece_5`:
   \   000035   7F02         MOV     R7,#0x2
   \   000037   02....       LJMP    ?FUNC_LEAVE_XDATA

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \   __near_func __xdata_reentrant void CLPiece::delete ~CLPiece(CLPiece *)
   \                     `??delete ~CLPiece`:
   \   000000   74F8         MOV     A,#-0x8
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 8
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   EE           MOV     A,R6
   \   00000A   4F           ORL     A,R7
   \   00000B   600E         JZ      `??delete ~CLPiece_1`
   \   00000D                ; Setup parameters for call to function CLPiece::~CLPiece()
   \   00000D   EE           MOV     A,R6
   \   00000E   FA           MOV     R2,A
   \   00000F   EF           MOV     A,R7
   \   000010   FB           MOV     R3,A
   \   000011   12....       LCALL   `?~CLPiece`
   \   000014                ; Setup parameters for call to function operator delete(void *)
   \   000014   EE           MOV     A,R6
   \   000015   FA           MOV     R2,A
   \   000016   EF           MOV     A,R7
   \   000017   FB           MOV     R3,A
   \   000018   12....       LCALL   `??operator delete`
   \                     `??delete ~CLPiece_1`:
   \   00001B   7F01         MOV     R7,#0x1
   \   00001D   02....       LJMP    ?FUNC_LEAVE_XDATA
    359          
    360          //@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       2      0      0  CLPiece::CLPiece()
       2      0      9  CLPiece::CLPiece(USI)
       0      0      8  CLPiece::delete ~CLPiece(CLPiece *)
                          0 0  8 -> CLPiece::~CLPiece()
                          0 0  8 -> operator delete(void *)
       0      0     15  CLPiece::fEtatTemperature()
                          0 0 15 -> CLPiece::vLirePiece(USI)
       2      0     25  CLPiece::fGetTemperatureConsigne(USI, UC)
                          0 0 16 -> CLPiece::vEcrirePiece(USI)
                          0 0 16 -> CLPiece::vLirePiece(USI)
       2      0      0  CLPiece::new CLPiece()
                          2 0  0 -> CLPiece::CLPiece()
                          2 0  0 -> operator new(unsigned int)
       0      0      9  CLPiece::new CLPiece(USI)
                          0 0  9 -> CLPiece::CLPiece(USI)
                          0 0  9 -> operator new(unsigned int)
       0      0      8  CLPiece::ucEtatChauffage()
                          0 0  8 -> CLPiece::vLirePiece(USI)
       0      0      8  CLPiece::ucEtatLumiere()
                          0 0  8 -> CLPiece::vLirePiece(USI)
       2      0     16  CLPiece::vEcrirePiece(USI)
                          2 0  0 -> CLInOutBase::vOut(unsigned short, unsigned char)
       3      0     16  CLPiece::vLirePiece(USI)
                          2 0  0 -> CLInOutBase::ucIn(unsigned short)
       1      0     18  CLPiece::vSetLumiere(UC, USI, UC)
                          0 0  9 -> CLPiece::fGetTemperatureConsigne(USI, UC)
                          0 0  9 -> CLPiece::vEcrirePiece(USI)
       0      0     17  CLPiece::~CLPiece()
                          0 0  9 -> CLPiece::vSetLumiere(UC, USI, UC)


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?<Initializer for __Constant_41700000>
      24  CLPiece::CLPiece()
      22  CLPiece::CLPiece(USI)
      32  CLPiece::delete ~CLPiece(CLPiece *)
      99  CLPiece::fEtatTemperature()
     238  CLPiece::fGetTemperatureConsigne(USI, UC)
      49  CLPiece::new CLPiece()
      58  CLPiece::new CLPiece(USI)
      50  CLPiece::ucEtatChauffage()
      50  CLPiece::ucEtatLumiere()
      47  CLPiece::vEcrirePiece(USI)
      51  CLPiece::vLirePiece(USI)
     162  CLPiece::vSetLumiere(UC, USI, UC)
      32  CLPiece::~CLPiece()
       4  __Constant_41700000

 
 914 bytes in segment NEAR_CODE
   4 bytes in segment XDATA_I
   4 bytes in segment XDATA_ID
 
 914 bytes of CODE  memory (+ 4 bytes shared)
   0 bytes of XDATA memory (+ 4 bytes shared)

Errors: none
Warnings: none
