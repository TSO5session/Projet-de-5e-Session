###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             11/Nov/2014  11:41:09 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  near                                               #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data                                               #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  C:\Users\1230838\Desktop\PROJETSESSION5\BLOC3\Prog #
#                          ramme\FESTO\Libraire\CLCommunic.cpp                #
#    Command line       =  C:\Users\1230838\Desktop\PROJETSESSION5\BLOC3\Prog #
#                          ramme\FESTO\Libraire\CLCommunic.cpp -D UPSD3254A   #
#                          --preprocess=cl C:\Users\1230838\Desktop\PROJETSES #
#                          SION5\BLOC3\Programme\FESTO\UPSD\List\ -lC         #
#                          C:\Users\1230838\Desktop\PROJETSESSION5\BLOC3\Prog #
#                          ramme\FESTO\UPSD\List\ -lA                         #
#                          C:\Users\1230838\Desktop\PROJETSESSION5\BLOC3\Prog #
#                          ramme\FESTO\UPSD\List\ -o                          #
#                          C:\Users\1230838\Desktop\PROJETSESSION5\BLOC3\Prog #
#                          ramme\FESTO\UPSD\Obj\ -e --no_cse --no_unroll      #
#                          --no_inline --no_code_motion --no_tbaa --debug     #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=near --calling_convention=xdata_reent #
#                          rant --place_constants=data --nr_virtual_regs 8    #
#                          --dlib_config "C:\Program Files\IAR                #
#                          Systems\Embedded Workbench                         #
#                          6.4\8051\LIB\DLIB\dl8051Normal.h" -Ol --eec++      #
#    List file          =  C:\Users\1230838\Desktop\PROJETSESSION5\BLOC3\Prog #
#                          ramme\FESTO\UPSD\List\CLCommunic.lst               #
#    Object file        =  C:\Users\1230838\Desktop\PROJETSESSION5\BLOC3\Prog #
#                          ramme\FESTO\UPSD\Obj\CLCommunic.r51                #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\1230838\Desktop\PROJETSESSION5\BLOC3\Programme\FESTO\Libraire\CLCommunic.cpp
      1          // ********************** FICHIER: CLCommunic.cpp ******************************
      2          // Descrtiption : La classe contient des fonctions pour controler le port
      3          //                serie du uPSD ou du DALLAS.
      4          //
      5          // Fonctions    : ucInitLongTrame -- Initialise longueur trame
      6          //                vTransCaractere -- Envoie caractere sur port
      7          //                vTransChaine    -- Envoie chaine sur port
      8          //                *ucpLireTrame   -- Pointeur sur la trame
      9          //                ucLireNbCaract  -- Retourne nombre caract recu
     10          //                ucLireEtatTrame -- Retourne etat reception trame
     11          //                vInitBaudRate   -- Initialise Baud
     12          //                ucValideTrame   -- Retourne etat trame valide
     13          //                __interrupt void CLCommunic :: vInterruptSerial (void)
     14          //                
     15          //                
     16          //                
     17          //
     18          //  AUTEUR :Gabriel Fortin-Belanger
     19          //  DATE CREATION :    27/03/2014		 VERSION: 1.0
     20          //
     21          // ****************************************************************************
     22          #include "CLInOutBase.h"

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IE
   \                     _A_IE:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x99
   \   unsigned char volatile __sfr SBUF
   \                     SBUF:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x98
   \   union <unnamed> volatile __sfr _A_SCON
   \                     _A_SCON:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x87
   \   union <unnamed> volatile __sfr _A_PCON
   \                     _A_PCON:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x88
   \   union <unnamed> volatile __sfr _A_TCON
   \                     _A_TCON:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x8d
   \   unsigned char volatile __sfr TH1
   \                     TH1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x89
   \   union <unnamed> volatile __sfr _A_TMOD
   \                     _A_TMOD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x8b
   \   unsigned char volatile __sfr TL1
   \                     TL1:
   \   000000                DS 1
     23          #include "_DeclarationGenerale.h"
     24          #include "CLCommunic.h"
     25          
     26          
     27          
     28          //***********************************Constante**********************************
     29          #define LONGEURTRAME  7
     30          #define LONGEURBUFFER 8
     31          //******************************************************************************
     32          
     33          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     34           UC * CLCommunic::ucpDebutTampon = 0;
   \                     ??ucpDebutTampon:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     35           UC * CLCommunic::ucpFinTampon = 0;
   \                     ??ucpFinTampon:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     36           UC * CLCommunic::ucpEcritureTampon = 0;
   \                     ??ucpEcritureTampon:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     37           UC * CLCommunic::ucpLireTampon = 0;
   \                     ??ucpLireTampon:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     38           UC   CLCommunic::ucLongeurTampon = 0;
   \                     ??ucLongeurTampon:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     39           UC   CLCommunic::ucLongeurTrame = 0;
   \                     ??ucLongeurTrame:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     40           UC   CLCommunic::ucCompteurCarac = 0;
   \                     ??ucCompteurCarac:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     41           UC   CLCommunic::ucTrameRecu = 0;
   \                     ??ucTrameRecu:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     42          
     43          
     44          
     45          //***********************CLCommunic(void)
     46          //
     47          //Description:Constructeur par defaut initialise la longeur du buffer, de la 
     48          //            trame et positionne les pointeur  de la memoire allouer.
     49          //           
     50          //           
     51          // NOM: CLCommunic::CLCommunic(void)
     52          //           
     53          // PARAMETRE D'ENTREE: Aucun
     54          //                   
     55          // 
     56          //
     57          // PARAMETRE DE SORTIE: Aucun              
     58          //
     59          //    
     60          //
     61          // DATE DE CREATION: 10 octobre 2013    AUTEUR: Gabriel Fortin-B
     62          // DATE DE MODIFICATION:	
     63          //*****************************************************************************

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
     64          CLCommunic::CLCommunic(void)
   \                     ??CLCommunic:
     65          {
   \   000000   74F8         MOV     A,#-0x8
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 8
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
     66            ucInitLongTrame(LONGEURTRAME);
   \   000009                ; Setup parameters for call to function CLCommunic::ucInitLongTrame(UC)
   \   000009   7907         MOV     R1,#0x7
   \   00000B   EE           MOV     A,R6
   \   00000C   FA           MOV     R2,A
   \   00000D   EF           MOV     A,R7
   \   00000E   FB           MOV     R3,A
   \   00000F   12....       LCALL   ??ucInitLongTrame
   \   000012   E9           MOV     A,R1
     67            
     68            ucLongeurTampon = LONGEURBUFFER;
   \   000013   90....       MOV     DPTR,#??ucLongeurTampon
   \   000016   7408         MOV     A,#0x8
   \   000018   F0           MOVX    @DPTR,A
     69            ucpDebutTampon = new(UC[LONGEURBUFFER]);
   \   000019                ; Setup parameters for call to function operator new[](unsigned int)
   \   000019   7A08         MOV     R2,#0x8
   \   00001B   7B00         MOV     R3,#0x0
   \   00001D   12....       LCALL   `??operator new[]`
   \   000020   90....       MOV     DPTR,#??ucpDebutTampon
   \   000023   EA           MOV     A,R2
   \   000024   F0           MOVX    @DPTR,A
   \   000025   A3           INC     DPTR
   \   000026   EB           MOV     A,R3
   \   000027   F0           MOVX    @DPTR,A
     70            ucpFinTampon = ucLongeurTrame + ucpDebutTampon;
   \   000028   90....       MOV     DPTR,#??ucLongeurTrame
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F8           MOV     R0,A
   \   00002D   7900         MOV     R1,#0x0
   \   00002F   90....       MOV     DPTR,#??ucpDebutTampon
   \   000032   E0           MOVX    A,@DPTR
   \   000033   28           ADD     A,R0
   \   000034   F8           MOV     R0,A
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   39           ADDC    A,R1
   \   000038   F9           MOV     R1,A
   \   000039   90....       MOV     DPTR,#??ucpFinTampon
   \   00003C   E8           MOV     A,R0
   \   00003D   F0           MOVX    @DPTR,A
   \   00003E   A3           INC     DPTR
   \   00003F   E9           MOV     A,R1
   \   000040   F0           MOVX    @DPTR,A
     71            ucpEcritureTampon = ucpDebutTampon;
   \   000041   90....       MOV     DPTR,#??ucpDebutTampon
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F8           MOV     R0,A
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F9           MOV     R1,A
   \   000049   90....       MOV     DPTR,#??ucpEcritureTampon
   \   00004C   E8           MOV     A,R0
   \   00004D   F0           MOVX    @DPTR,A
   \   00004E   A3           INC     DPTR
   \   00004F   E9           MOV     A,R1
   \   000050   F0           MOVX    @DPTR,A
     72            ucpLireTampon  = ucpDebutTampon;
   \   000051   90....       MOV     DPTR,#??ucpDebutTampon
   \   000054   E0           MOVX    A,@DPTR
   \   000055   F8           MOV     R0,A
   \   000056   A3           INC     DPTR
   \   000057   E0           MOVX    A,@DPTR
   \   000058   F9           MOV     R1,A
   \   000059   90....       MOV     DPTR,#??ucpLireTampon
   \   00005C   E8           MOV     A,R0
   \   00005D   F0           MOVX    @DPTR,A
   \   00005E   A3           INC     DPTR
   \   00005F   E9           MOV     A,R1
   \   000060   F0           MOVX    @DPTR,A
     73           
     74            vInitBaudRate(19200);
   \   000061                ; Setup parameters for call to function CLCommunic::vInitBaudRate(UINT)
   \   000061   7C00         MOV     R4,#0x0
   \   000063   7D4B         MOV     R5,#0x4b
   \   000065   EE           MOV     A,R6
   \   000066   FA           MOV     R2,A
   \   000067   EF           MOV     A,R7
   \   000068   FB           MOV     R3,A
   \   000069   12....       LCALL   ??vInitBaudRate
     75          
     76          }
   \   00006C   EE           MOV     A,R6
   \   00006D   FA           MOV     R2,A
   \   00006E   EF           MOV     A,R7
   \   00006F   FB           MOV     R3,A
   \   000070   7F01         MOV     R7,#0x1
   \   000072   02....       LJMP    ?FUNC_LEAVE_XDATA
     77          
     78          //***********************CLCommunic(UC ucLongBuf, UC ucLongTrame,UINT uiBaud)
     79          //
     80          //Description:Constructeur par defaut initialise la longeur du buffer, de la 
     81          //            trame et positionne les pointeur  de la memoire allouer.
     82          //           
     83          //           
     84          // NOM: CLCommunic::CLCommunic(UC ucLongBuf, UC ucLongTrame,UINT uiBaud)
     85          //           
     86          // PARAMETRE D'ENTREE: Aucun
     87          //                   
     88          // 
     89          //
     90          // PARAMETRE DE SORTIE: Aucun              
     91          //
     92          //    
     93          //
     94          // DATE DE CREATION: 10 octobre 2013    AUTEUR: Gabriel Fortin-B
     95          // DATE DE MODIFICATION:	
     96          //*****************************************************************************
     97          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
     98          CLCommunic::CLCommunic(UC ucLongBuf, UC ucLongTrame,UINT uiBaud)
   \                     ??CLCommunic_1:
     99          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   89..         MOV     ?V0 + 3,R1
   \   00000B   8C..         MOV     ?V0 + 2,R4
   \   00000D   740B         MOV     A,#0xb
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   E0           MOVX    A,@DPTR
   \   000013   FE           MOV     R6,A
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FF           MOV     R7,A
    100            ucLongeurTampon = ucLongBuf;
   \   000017   E5..         MOV     A,?V0 + 3
   \   000019   90....       MOV     DPTR,#??ucLongeurTampon
   \   00001C   F0           MOVX    @DPTR,A
    101            ucInitLongTrame(ucLongTrame);
   \   00001D                ; Setup parameters for call to function CLCommunic::ucInitLongTrame(UC)
   \   00001D   A9..         MOV     R1,?V0 + 2
   \   00001F   AA..         MOV     R2,?V0 + 0
   \   000021   AB..         MOV     R3,?V0 + 1
   \   000023   12....       LCALL   ??ucInitLongTrame
   \   000026   E9           MOV     A,R1
    102            
    103            ucpDebutTampon = new(UC[ucLongeurTampon]);
   \   000027                ; Setup parameters for call to function operator new[](unsigned int)
   \   000027   90....       MOV     DPTR,#??ucLongeurTampon
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   FA           MOV     R2,A
   \   00002C   7B00         MOV     R3,#0x0
   \   00002E   12....       LCALL   `??operator new[]`
   \   000031   90....       MOV     DPTR,#??ucpDebutTampon
   \   000034   EA           MOV     A,R2
   \   000035   F0           MOVX    @DPTR,A
   \   000036   A3           INC     DPTR
   \   000037   EB           MOV     A,R3
   \   000038   F0           MOVX    @DPTR,A
    104            ucpFinTampon = (ucLongeurTampon + ucpDebutTampon) ;
   \   000039   90....       MOV     DPTR,#??ucLongeurTampon
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   F8           MOV     R0,A
   \   00003E   7900         MOV     R1,#0x0
   \   000040   90....       MOV     DPTR,#??ucpDebutTampon
   \   000043   E0           MOVX    A,@DPTR
   \   000044   28           ADD     A,R0
   \   000045   F8           MOV     R0,A
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   39           ADDC    A,R1
   \   000049   F9           MOV     R1,A
   \   00004A   90....       MOV     DPTR,#??ucpFinTampon
   \   00004D   E8           MOV     A,R0
   \   00004E   F0           MOVX    @DPTR,A
   \   00004F   A3           INC     DPTR
   \   000050   E9           MOV     A,R1
   \   000051   F0           MOVX    @DPTR,A
    105            ucpEcritureTampon = ucpDebutTampon;
   \   000052   90....       MOV     DPTR,#??ucpDebutTampon
   \   000055   E0           MOVX    A,@DPTR
   \   000056   F8           MOV     R0,A
   \   000057   A3           INC     DPTR
   \   000058   E0           MOVX    A,@DPTR
   \   000059   F9           MOV     R1,A
   \   00005A   90....       MOV     DPTR,#??ucpEcritureTampon
   \   00005D   E8           MOV     A,R0
   \   00005E   F0           MOVX    @DPTR,A
   \   00005F   A3           INC     DPTR
   \   000060   E9           MOV     A,R1
   \   000061   F0           MOVX    @DPTR,A
    106            ucpLireTampon  = ucpDebutTampon;
   \   000062   90....       MOV     DPTR,#??ucpDebutTampon
   \   000065   E0           MOVX    A,@DPTR
   \   000066   F8           MOV     R0,A
   \   000067   A3           INC     DPTR
   \   000068   E0           MOVX    A,@DPTR
   \   000069   F9           MOV     R1,A
   \   00006A   90....       MOV     DPTR,#??ucpLireTampon
   \   00006D   E8           MOV     A,R0
   \   00006E   F0           MOVX    @DPTR,A
   \   00006F   A3           INC     DPTR
   \   000070   E9           MOV     A,R1
   \   000071   F0           MOVX    @DPTR,A
    107            vInitBaudRate(uiBaud);
   \   000072                ; Setup parameters for call to function CLCommunic::vInitBaudRate(UINT)
   \   000072   EE           MOV     A,R6
   \   000073   FC           MOV     R4,A
   \   000074   EF           MOV     A,R7
   \   000075   FD           MOV     R5,A
   \   000076   AA..         MOV     R2,?V0 + 0
   \   000078   AB..         MOV     R3,?V0 + 1
   \   00007A   12....       LCALL   ??vInitBaudRate
    108          
    109          }
   \   00007D   AA..         MOV     R2,?V0 + 0
   \   00007F   AB..         MOV     R3,?V0 + 1
   \   000081   7F04         MOV     R7,#0x4
   \   000083   02....       LJMP    ?FUNC_LEAVE_XDATA
    110          
    111          //***********************~CLCommunic(void)
    112          //
    113          //Description:Destructeur qui desalloue lA MEMOIRE
    114          //           
    115          //           
    116          // NOM: CLCommunic::~CLCommunic(void)
    117          //           
    118          // PARAMETRE D'ENTREE: Aucun
    119          //                   
    120          // 
    121          //
    122          // PARAMETRE DE SORTIE: Aucun              
    123          //
    124          //    
    125          //
    126          // DATE DE CREATION: 10 octobre 2013    AUTEUR: Gabriel Fortin-B
    127          // DATE DE MODIFICATION:	
    128          //***************************************************************************** 
    129          
    130          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    131          CLCommunic::~CLCommunic(void)
   \                     `?~CLCommunic`:
    132          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    133            delete[] ucpDebutTampon; 
   \   000004                ; Setup parameters for call to function operator delete[](void *)
   \   000004   90....       MOV     DPTR,#??ucpDebutTampon
   \   000007   E0           MOVX    A,@DPTR
   \   000008   FA           MOV     R2,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   FB           MOV     R3,A
   \   00000C   12....       LCALL   `??operator delete[]`
    134          
    135          }
   \   00000F   D083         POP     DPH
   \   000011   D082         POP     DPL
   \   000013   22           RET
    136          
    137          
    138          //***********************Fonction:ucInitLongTrame**************************
    139          //
    140          // Description:     Cette fonction initialise 
    141          //
    142          // Prototype: UC CLCommunic :: ucInitLongTrame(UC ucLong)
    143          // 
    144          // PARAMETRE D'ENTREE:Aucun
    145          //
    146          // PARAMETRE DE SORTIE:true or False            
    147          //
    148          //
    149          //
    150          // DATE DE CREATION: 26 septembre 2013    AUTEUR: Gabriel Fortin-B
    151          // DATE DE MODIFICATION:	
    152          //***************************************************************************** 

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    153          UC CLCommunic :: ucInitLongTrame(UC ucLong)
   \                     ??ucInitLongTrame:
    154          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   FA           MOV     R2,A
    155            if(ucLong < ucLongeurTampon)
   \   000006   90....       MOV     DPTR,#??ucLongeurTampon
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   F8           MOV     R0,A
   \   00000B   EA           MOV     A,R2
   \   00000C   C3           CLR     C
   \   00000D   98           SUBB    A,R0
   \   00000E   5009         JNC     ??ucInitLongTrame_1
    156            {
    157              ucLongeurTrame = ucLong;
   \   000010   EA           MOV     A,R2
   \   000011   90....       MOV     DPTR,#??ucLongeurTrame
   \   000014   F0           MOVX    @DPTR,A
    158              return(1);    
   \   000015   7901         MOV     R1,#0x1
   \   000017   8002         SJMP    ??ucInitLongTrame_2
    159            }
    160            else
    161            {
    162             
    163            return(0);
   \                     ??ucInitLongTrame_1:
   \   000019   7900         MOV     R1,#0x0
   \                     ??ucInitLongTrame_2:
   \   00001B   D083         POP     DPH
   \   00001D   D082         POP     DPL
   \   00001F   22           RET
    164            }
    165          
    166          }
    167          
    168          
    169          //***********************Fonction:ucLireNbCaractRecu**************************
    170          //
    171          // Description:     Cette fonction retourne le nombre de caractere recu
    172          //
    173          // Prototype: UC ucLireNbCaractRecu(void);
    174          // 
    175          // PARAMETRE D'ENTREE:Aucun
    176          //
    177          // PARAMETRE DE SORTIE: ucNbCarctRecu              
    178          //
    179          //
    180          //
    181          // DATE DE CREATION: 26 septembre 2013    AUTEUR: Gabriel Fortin-B
    182          // DATE DE MODIFICATION:	
    183          //***************************************************************************** 
    184          
    185          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    186          UC CLCommunic :: ucLireNbCaractRecu(void)
   \                     ??ucLireNbCaractRecu:
    187          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    188          
    189            return(ucCompteurCarac);
   \   000004   90....       MOV     DPTR,#??ucCompteurCarac
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F9           MOV     R1,A
   \   000009   D083         POP     DPH
   \   00000B   D082         POP     DPL
   \   00000D   22           RET
    190          
    191          }
    192          
    193          
    194          //***********************Fonction:ucLireEtatTrame******************************
    195          //
    196          // Description: Cette fonction retourne une variable contenant l'etat 
    197          //              de trame qui indique si elle est recu         
    198          //
    199          // Prototype:UC CLCommunic :: ucLireEtatTrame(void);
    200          // 
    201          // PARAMETRE D'ENTREE:Aucun
    202          //
    203          // PARAMETRE DE SORTIE: ucTrameComplete              
    204          //
    205          //
    206          //
    207          // DATE DE CREATION: 26 septembre 2013    AUTEUR: Gabriel Fortin-B
    208          // DATE DE MODIFICATION:	
    209          //*****************************************************************************  
    210          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    211          UC CLCommunic :: ucLireEtatTrame(void)
   \                     ??ucLireEtatTrame:
    212          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    213            return(ucTrameRecu);
   \   000004   90....       MOV     DPTR,#??ucTrameRecu
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F9           MOV     R1,A
   \   000009   D083         POP     DPH
   \   00000B   D082         POP     DPL
   \   00000D   22           RET
    214          
    215          }
    216          
    217          
    218          //***********************Fonction:*ucpLireTrame********************************
    219          //
    220          // Description:     Cette fonction retourne un pointeur sur le debut d'une 
    221          //                  trame recu
    222          //
    223          // Prototype: UC * CLCommunic :: ucpLireTrame(void)
    224          // 
    225          // PARAMETRE D'ENTREE:Aucun
    226          //
    227          // PARAMETRE DE SORTIE: ucTampon              
    228          //
    229          //
    230          //
    231          // DATE DE CREATION: 26 septembre 2013    AUTEUR: Gabriel Fortin-B
    232          // DATE DE MODIFICATION:	
    233          //*****************************************************************************

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    234          UC * CLCommunic :: ucpLireTrame(void)
   \                     ??ucpLireTrame:
    235          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    236            
    237             ucTrameRecu = INCOMPLETE;
   \   000004   90....       MOV     DPTR,#??ucTrameRecu
   \   000007   7400         MOV     A,#0x0
   \   000009   F0           MOVX    @DPTR,A
    238            //if(ucValideTrame())
    239            //{
    240              return(ucpDebutTampon);
   \   00000A   90....       MOV     DPTR,#??ucpDebutTampon
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   FA           MOV     R2,A
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   FB           MOV     R3,A
   \   000012   D083         POP     DPH
   \   000014   D082         POP     DPL
   \   000016   22           RET
    241            //}
    242            //else
    243            //{
    244            //  return(NULL);
    245            
    246            //}
    247          
    248          }
    249          
    250          
    251          //***********************Fonction:vTransCaractere******************************
    252          //
    253          // Description:     Cette fonction permet D'envoyer un caractere sur le 
    254          //                  port serie
    255          //
    256          // Prototype:void CLCommunic :: vTransCaractere(UC ucCar)
    257          // 
    258          // PARAMETRE D'ENTREE:ucCar 
    259          //
    260          // PARAMETRE DE SORTIE:Aucun              
    261          //
    262          //
    263          // PROCEDURES APPELEES: vTransCaractere(ucCar);
    264          //
    265          // DATE DE CREATION: 26 septembre 2013    AUTEUR: Gabriel Fortin-B
    266          // DATE DE MODIFICATION:	
    267          //*****************************************************************************
    268          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    269          void CLCommunic :: vTransCaractere(UC ucCar)
   \                     ??vTransCaractere:
    270          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    271          
    272             SBUF = ucCar;	   //place le caractere dans le buffer
   \   000000   8999         MOV     0x99,R1
    273             while(TI_0 == 0);  //Polling du flag de transmission
   \                     ??vTransCaractere_1:
   \   000002   A299         MOV     C,0x98.1
   \   000004   50FC         JNC     ??vTransCaractere_1
    274             TI_0 = 0;		   //Remise Flag a 0;
   \   000006   C299         CLR     0x98.1
    275             
    276             
    277          }
   \   000008   22           RET
   \   000009                REQUIRE SBUF
   \   000009                REQUIRE _A_SCON
    278          
    279          
    280          
    281          //***********************Fonction:vTransCaractere******************************
    282          //
    283          // Description:     Cette fonction permet D'envoyer une chaine sur le 
    284          //                  port serie
    285          //
    286          // 
    287          // Prototype:void CLCommunic :: vTransCaractere(UC ucCar)
    288          // 
    289          // PARAMETRE D'ENTREE:char const * ucChaine)
    290          //
    291          // PARAMETRE DE SORTIE:Aucun              
    292          //
    293          //
    294          //
    295          // DATE DE CREATION: 26 septembre 2013    AUTEUR: Gabriel Fortin-B
    296          // DATE DE MODIFICATION:	
    297          //*****************************************************************************
    298          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    299          void CLCommunic :: vTransString(char const * ucChaine)
   \                     ??vTransString:
    300          {
   \   000000   74F8         MOV     A,#-0x8
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 8
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C82         MOV     DPL,R4
   \   00000B   8D83         MOV     DPH,R5
   \   00000D   800A         SJMP    ??vTransString_1
    301          
    302            while(*ucChaine != 0)
    303            {
    304              vTransCaractere(*ucChaine);
   \                     ??vTransString_2:
   \   00000F                ; Setup parameters for call to function CLCommunic::vTransCaractere(UC)
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F9           MOV     R1,A
   \   000011   EE           MOV     A,R6
   \   000012   FA           MOV     R2,A
   \   000013   EF           MOV     A,R7
   \   000014   FB           MOV     R3,A
   \   000015   12....       LCALL   ??vTransCaractere
    305              ucChaine ++; 
   \   000018   A3           INC     DPTR
    306            
    307            }
   \                     ??vTransString_1:
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   70F3         JNZ     ??vTransString_2
    308          
    309          }
   \   00001C   7F01         MOV     R7,#0x1
   \   00001E   02....       LJMP    ?FUNC_LEAVE_XDATA
    310          
    311          /*
    312          ***********************Fonction:vInteruptSerial()****************************
    313          //
    314          // Description: Cette fonction permet de traiter une interuption serie
    315          //
    316          // NOM:__interrupt void  CLCommunic :: vInteruptSerial(void) 
    317          // 
    318          // PARAMETRE D'ENTREE:Aucun 
    319          //
    320          // PARAMETRE DE SORTIE:Aucun              
    321          //
    322          // DATE DE CREATION: 26 septembre 2013    AUTEUR: Gabriel Fortin-B
    323          // DATE DE MODIFICATION:	
    324          *****************************************************************************
    325          
    326          #pragma vector = 0x23
    327           __interrupt void  CLCommunic :: vInteruptSerial(void)
    328           {
    329              EA = 0;        //Desactive les interuptions
    330             
    331             if(RI_0)       //Si Reception
    332              {  
    333                 
    334                if(ucpEcritureTampon == ucpFinTampon ) //Si Tampon est plein
    335                 {                                     //
    336                   ucpEcritureTampon = ucpDebutTampon; //Repartir a 0
    337                 }
    338                
    339                *ucpEcritureTampon = SBUF0; //Stocke le caractere recu dans tampon
    340                ucpEcritureTampon = ucpEcritureTampon + 1;// increment une position dans tampon
    341                if(ucCompteurCarac < (ucLongeurTampon-1)) //Si nombre caract recu est 
    342                 {                                   //inferieur a Trame
    343                    ucCompteurCarac = ucCompteurCarac +1;  //incremente le caractere
    344                    ucTrameRecu = INCOMPLETE;
    345                 }
    346                else                                 //sinon
    347                 {
    348                  ucCompteurCarac = 0;          //Remettre caractere a 0
    349                  ucTrameRecu = COMPLETE;       //Trame complete vaut vrai
    350                  ucpEcritureTampon = ucpDebutTampon;
    351                  ucpLireTampon  = ucpDebutTampon;
    352                  //ucpLireTampon = ucpEcritureTampon - ucLongeurTrame;
    353                 }
    354          
    355          
    356               
    357              }
    358               RI_0 = 0;                           //reinitialise flag reception
    359               EA   = 1;                           // re initialise les interuptions
    360               
    361           
    362           
    363           }
    364          
    365          */
    366          //***********************Fonction:vInitBaudRate********************************
    367          //
    368          // Description:     Cette fonction permet de d'initialiser le Baud rate aux  
    369          //                  vitesse: 2400,488,9600,19200,28800,57600
    370          //
    371          //
    372          // NOM:void CLCommunic :: vInitBaudRate(UINT uiBaud)
    373          // 
    374          // PARAMETRE D'ENTREE:UINT uiBaud
    375          //
    376          // PARAMETRE DE SORTIE:Aucun              
    377          //
    378          //
    379          //
    380          //
    381          // DATE DE CREATION: 26 septembre 2013    AUTEUR: Gabriel Fortin-B
    382          // DATE DE MODIFICATION:	
    383          //*****************************************************************************

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    384          void CLCommunic :: vInitBaudRate(UINT uiBaud)
   \                     ??vInitBaudRate:
    385          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    386           
    387             SCON = 0x50;            // Met le registre SCON0 a 00
   \   000005   759850       MOV     0x98,#0x50
    388             SM1_0 = 1;               //Mode asynchrone, generateur baud rate           
   \   000008   D29E         SETB    0x98.6
    389             REN_0 = 1;               //Active la reception
   \   00000A   D29C         SETB    0x98.4
    390             TMOD= TMOD | 0x20;      //Timer 1 en 8 bit auto-relod
   \   00000C   438920       ORL     0x89,#0x20
    391             PCON = PCON| 0x80;      //vitesse doubler pour serie
   \   00000F   438780       ORL     0x87,#0x80
    392             TR1   = 1;               // Active timer 1 pour fonctionner le port serie
   \   000012   D28E         SETB    0x88.6
    393             TI_0  = 1;               // TI a 1  transmet un premier charactere
   \   000014   D299         SETB    0x98.1
    394             EA = 1;                  //Active les interuptions 
   \   000016   D2AF         SETB    0xa8.7
    395             RI_0 = 0;                  //initialise Reception
   \   000018   C298         CLR     0x98.0
    396             ES0 = 1;                 //Active interuption serie
   \   00001A   D2AC         SETB    0xa8.4
    397             ET1 = 0;                 //Desactive timer 1
   \   00001C   C2AB         CLR     0xa8.3
    398          
    399             switch(uiBaud)             //Condtion pour selectionner choix utilisateur
   \   00001E   8C..         MOV     ?V0 + 0,R4
   \   000020   8D..         MOV     ?V0 + 1,R5
   \   000022   78..         MOV     R0,#?V0 + 0
   \   000024   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for vInitBaudRate>_0`:
   \   000027   0000         DW        0
   \   000029   0600         DW        6
   \   00002B   6009         DW        2400
   \   00002D   ....         DW        ??vInitBaudRate_1
   \   00002F   C012         DW        4800
   \   000031   ....         DW        ??vInitBaudRate_2
   \   000033   8025         DW        9600
   \   000035   ....         DW        ??vInitBaudRate_3
   \   000037   004B         DW        19200
   \   000039   ....         DW        ??vInitBaudRate_4
   \   00003B   8070         DW        28800
   \   00003D   ....         DW        ??vInitBaudRate_5
   \   00003F   00E1         DW        57600
   \   000041   ....         DW        ??vInitBaudRate_6
   \   000043   ....         DW        ??vInitBaudRate_7
    400              { 
    401                case 2400: TH1 = 0xE8;      // Baud rate 2400
   \                     ??vInitBaudRate_1:
   \   000045   758DE8       MOV     0x8d,#-0x18
    402                           TL1 = 0xE8;      //
   \   000048   758BE8       MOV     0x8b,#-0x18
    403                           break;           //
   \   00004B   8026         SJMP    ??vInitBaudRate_7
    404                case 4800: TH1 = 0xF4;      // Baud rate 4800
   \                     ??vInitBaudRate_2:
   \   00004D   758DF4       MOV     0x8d,#-0xc
    405                           TL1 = 0xF4;      //
   \   000050   758BF4       MOV     0x8b,#-0xc
    406                           break;           //
   \   000053   801E         SJMP    ??vInitBaudRate_7
    407                case 9600: TH1 = 0xFA;      // Baud rate 9600
   \                     ??vInitBaudRate_3:
   \   000055   758DFA       MOV     0x8d,#-0x6
    408                           TL1 = 0xFA;      //
   \   000058   758BFA       MOV     0x8b,#-0x6
    409                           break;           //
   \   00005B   8016         SJMP    ??vInitBaudRate_7
    410                case 19200:TH1 = 0xFD;      // Baud rate 19200
   \                     ??vInitBaudRate_4:
   \   00005D   758DFD       MOV     0x8d,#-0x3
    411                           TL1 = 0xFD;      //
   \   000060   758BFD       MOV     0x8b,#-0x3
    412                           break;           //
   \   000063   800E         SJMP    ??vInitBaudRate_7
    413                case 28800:TH1 = 0xFE;      // Baud rate 28800
   \                     ??vInitBaudRate_5:
   \   000065   758DFE       MOV     0x8d,#-0x2
    414                           TL1 = 0xFE;       //
   \   000068   758BFE       MOV     0x8b,#-0x2
    415                           break;           //
   \   00006B   8006         SJMP    ??vInitBaudRate_7
    416                case 57600:TH1 = 0xFF;      // Baud rate 57600
   \                     ??vInitBaudRate_6:
   \   00006D   758DFF       MOV     0x8d,#-0x1
    417                           TL1 = 0xFF;      //
   \   000070   758BFF       MOV     0x8b,#-0x1
    418                           break;           //
    419          
    420               
    421             }
    422          
    423          
    424          }
   \                     ??vInitBaudRate_7:
   \   000073   7F02         MOV     R7,#0x2
   \   000075   02....       LJMP    ?FUNC_LEAVE_XDATA
   \   000078                REQUIRE _A_SCON
   \   000078                REQUIRE _A_TMOD
   \   000078                REQUIRE _A_PCON
   \   000078                REQUIRE _A_TCON
   \   000078                REQUIRE _A_IE
   \   000078                REQUIRE TH1
   \   000078                REQUIRE TL1
    425          
    426          
    427          
    428          //***********************Fonction:ucValideTrame********************************
    429          //
    430          // Description: Cette fonction permet de verifier qu'une trame valide est recu
    431          //
    432          //
    433          // NOM:void CLCommunic :: vInitBaudRate(UINT uiBaud)
    434          // 
    435          // PARAMETRE D'ENTREE:-
    436          //
    437          // PARAMETRE DE SORTIE:Aucun              
    438          //
    439          //
    440          //
    441          //
    442          // DATE DE CREATION: 26 septembre 2013    AUTEUR: Gabriel Fortin-B
    443          // DATE DE MODIFICATION:	
    444          //*****************************************************************************
    445          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    446          UC CLCommunic :: ucValideTrame(void)
   \                     ??ucValideTrame:
    447          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   8022         SJMP    ??ucValideTrame_1
    448            UC ucConte;
    449            while(ucpLireTampon < ucpFinTampon )
    450            {
    451              ucConte = ucConte + *ucpLireTampon;
   \                     ??ucValideTrame_2:
   \   000006   90....       MOV     DPTR,#??ucpLireTampon
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   F8           MOV     R0,A
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F583         MOV     DPH,A
   \   00000F   8882         MOV     DPL,R0
   \   000011   E0           MOVX    A,@DPTR
   \   000012   2A           ADD     A,R2
   \   000013   FA           MOV     R2,A
    452              ucpLireTampon ++;
   \   000014   90....       MOV     DPTR,#??ucpLireTampon
   \   000017   E0           MOVX    A,@DPTR
   \   000018   2401         ADD     A,#0x1
   \   00001A   F8           MOV     R0,A
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   3400         ADDC    A,#0x0
   \   00001F   F9           MOV     R1,A
   \   000020   90....       MOV     DPTR,#??ucpLireTampon
   \   000023   E8           MOV     A,R0
   \   000024   F0           MOVX    @DPTR,A
   \   000025   A3           INC     DPTR
   \   000026   E9           MOV     A,R1
   \   000027   F0           MOVX    @DPTR,A
    453            } 
   \                     ??ucValideTrame_1:
   \   000028   90....       MOV     DPTR,#??ucpLireTampon
   \   00002B   C082         PUSH    DPL
   \   00002D   C083         PUSH    DPH
   \   00002F   90....       MOV     DPTR,#??ucpFinTampon
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F8           MOV     R0,A
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   F9           MOV     R1,A
   \   000037   D083         POP     DPH
   \   000039   D082         POP     DPL
   \   00003B   C3           CLR     C
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   98           SUBB    A,R0
   \   00003E   A3           INC     DPTR
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   99           SUBB    A,R1
   \   000041   40C3         JC      ??ucValideTrame_2
    454            
    455            if( ucConte == *ucpFinTampon)
   \   000043   90....       MOV     DPTR,#??ucpFinTampon
   \   000046   E0           MOVX    A,@DPTR
   \   000047   F8           MOV     R0,A
   \   000048   A3           INC     DPTR
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   F583         MOV     DPH,A
   \   00004C   8882         MOV     DPL,R0
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   6A           XRL     A,R2
   \   000050   7004         JNZ     ??ucValideTrame_3
    456            {
    457              return(1);
   \   000052   7901         MOV     R1,#0x1
   \   000054   8002         SJMP    ??ucValideTrame_4
    458            
    459            }
    460          else
    461            {
    462              return(0);
   \                     ??ucValideTrame_3:
   \   000056   7900         MOV     R1,#0x0
   \                     ??ucValideTrame_4:
   \   000058   D083         POP     DPH
   \   00005A   D082         POP     DPL
   \   00005C   22           RET
    463            }
    464          
    465          
    466          }

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \   __near_func __xdata_reentrant CLCommunic &CLCommunic::new CLCommunic()
   \                     `??new CLCommunic`:
   \   000000   C0..         PUSH    ?V0 + 0
   \   000002   C0..         PUSH    ?V0 + 1
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004                ; Setup parameters for call to function operator new(unsigned int)
   \   000004   7A01         MOV     R2,#0x1
   \   000006   7B00         MOV     R3,#0x0
   \   000008   12....       LCALL   `??operator new`
   \   00000B   8A..         MOV     ?V0 + 0,R2
   \   00000D   8B..         MOV     ?V0 + 1,R3
   \   00000F   A8..         MOV     R0,?V0 + 0
   \   000011   A9..         MOV     R1,?V0 + 1
   \   000013   E8           MOV     A,R0
   \   000014   FA           MOV     R2,A
   \   000015   E9           MOV     A,R1
   \   000016   FB           MOV     R3,A
   \   000017   E8           MOV     A,R0
   \   000018   49           ORL     A,R1
   \   000019   600D         JZ      `??new CLCommunic_2`
   \   00001B                ; Setup parameters for call to function CLCommunic::CLCommunic()
   \   00001B   12....       LCALL   ??CLCommunic
   \   00001E   8A..         MOV     ?V0 + 0,R2
   \   000020   8B..         MOV     ?V0 + 1,R3
   \   000022   AA..         MOV     R2,?V0 + 0
   \   000024   AB..         MOV     R3,?V0 + 1
   \   000026   8004         SJMP    `??new CLCommunic_3`
   \                     `??new CLCommunic_2`:
   \   000028   7A00         MOV     R2,#0x0
   \   00002A   7B00         MOV     R3,#0x0
   \                     `??new CLCommunic_3`:
   \   00002C   D0..         POP     ?V0 + 1
   \   00002E   D0..         POP     ?V0 + 0
   \   000030   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \   __near_func __xdata_reentrant CLCommunic &CLCommunic::new CLCommunic(UC, UC, UINT)
   \                     `??new CLCommunic_1`:
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
   \   00000D                ; Setup parameters for call to function operator new(unsigned int)
   \   00000D   7A01         MOV     R2,#0x1
   \   00000F   7B00         MOV     R3,#0x0
   \   000011   12....       LCALL   `??operator new`
   \   000014   8A..         MOV     ?V0 + 2,R2
   \   000016   8B..         MOV     ?V0 + 3,R3
   \   000018   A8..         MOV     R0,?V0 + 2
   \   00001A   A9..         MOV     R1,?V0 + 3
   \   00001C   E8           MOV     A,R0
   \   00001D   FA           MOV     R2,A
   \   00001E   E9           MOV     A,R1
   \   00001F   FB           MOV     R3,A
   \   000020   E8           MOV     A,R0
   \   000021   49           ORL     A,R1
   \   000022   601B         JZ      `??new CLCommunic_4`
   \   000024                ; Setup parameters for call to function CLCommunic::CLCommunic(UC, UC, UINT)
   \   000024   78..         MOV     R0,#?V0 + 0
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000029   EF           MOV     A,R7
   \   00002A   FC           MOV     R4,A
   \   00002B   EE           MOV     A,R6
   \   00002C   F9           MOV     R1,A
   \   00002D   12....       LCALL   ??CLCommunic_1
   \   000030   7402         MOV     A,#0x2
   \   000032   12....       LCALL   ?DEALLOC_XSTACK8
   \   000035   8A..         MOV     ?V0 + 0,R2
   \   000037   8B..         MOV     ?V0 + 1,R3
   \   000039   AA..         MOV     R2,?V0 + 0
   \   00003B   AB..         MOV     R3,?V0 + 1
   \   00003D   8004         SJMP    `??new CLCommunic_5`
   \                     `??new CLCommunic_4`:
   \   00003F   7A00         MOV     R2,#0x0
   \   000041   7B00         MOV     R3,#0x0
   \                     `??new CLCommunic_5`:
   \   000043   7F04         MOV     R7,#0x4
   \   000045   02....       LJMP    ?FUNC_LEAVE_XDATA

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \   __near_func __xdata_reentrant void CLCommunic::delete ~CLCommunic(CLCommunic *)
   \                     `??delete ~CLCommunic`:
   \   000000   74F8         MOV     A,#-0x8
   \   000002   12....       LCALL   ?FUNC_ENTER_XDATA
   \   000005                ; Saved register size: 8
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   EE           MOV     A,R6
   \   00000A   4F           ORL     A,R7
   \   00000B   600E         JZ      `??delete ~CLCommunic_1`
   \   00000D                ; Setup parameters for call to function CLCommunic::~CLCommunic()
   \   00000D   EE           MOV     A,R6
   \   00000E   FA           MOV     R2,A
   \   00000F   EF           MOV     A,R7
   \   000010   FB           MOV     R3,A
   \   000011   12....       LCALL   `?~CLCommunic`
   \   000014                ; Setup parameters for call to function operator delete(void *)
   \   000014   EE           MOV     A,R6
   \   000015   FA           MOV     R2,A
   \   000016   EF           MOV     A,R7
   \   000017   FB           MOV     R3,A
   \   000018   12....       LCALL   `??operator delete`
   \                     `??delete ~CLCommunic_1`:
   \   00001B   7F01         MOV     R7,#0x1
   \   00001D   02....       LJMP    ?FUNC_LEAVE_XDATA
    467          
    468          //@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       0      0      8  CLCommunic::CLCommunic()
                          0 0  8 -> CLCommunic::ucInitLongTrame(UC)
                          0 0  8 -> CLCommunic::vInitBaudRate(UINT)
                          0 0  8 -> operator new[](unsigned int)
       0      0     24  CLCommunic::CLCommunic(UC, UC, UINT)
                          0 0 11 -> CLCommunic::ucInitLongTrame(UC)
                          0 0 11 -> CLCommunic::vInitBaudRate(UINT)
                          0 0 11 -> operator new[](unsigned int)
       0      0      8  CLCommunic::delete ~CLCommunic(CLCommunic *)
                          0 0  8 -> CLCommunic::~CLCommunic()
                          0 0  8 -> operator delete(void *)
       2      0      0  CLCommunic::new CLCommunic()
                          2 0  0 -> CLCommunic::CLCommunic()
                          2 0  0 -> operator new(unsigned int)
       0      0     13  CLCommunic::new CLCommunic(UC, UC, UINT)
                          0 0 13 -> CLCommunic::CLCommunic(UC, UC, UINT)
                          0 0 11 -> operator new(unsigned int)
       2      0     11  CLCommunic::ucInitLongTrame(UC)
       2      0      0  CLCommunic::ucLireEtatTrame()
       2      0      0  CLCommunic::ucLireNbCaractRecu()
       4      0      0  CLCommunic::ucValideTrame()
       2      0      0  CLCommunic::ucpLireTrame()
       0      0     20  CLCommunic::vInitBaudRate(UINT)
       0      0      8  CLCommunic::vTransCaractere(UC)
       0      0      8  CLCommunic::vTransString(char const *)
                          0 0  8 -> CLCommunic::vTransCaractere(UC)
       2      0      8  CLCommunic::~CLCommunic()
                          2 0  0 -> operator delete[](void *)


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
     117  CLCommunic::CLCommunic()
     134  CLCommunic::CLCommunic(UC, UC, UINT)
      32  CLCommunic::delete ~CLCommunic(CLCommunic *)
      49  CLCommunic::new CLCommunic()
      72  CLCommunic::new CLCommunic(UC, UC, UINT)
       1  CLCommunic::ucCompteurCarac
      32  CLCommunic::ucInitLongTrame(UC)
      14  CLCommunic::ucLireEtatTrame()
      14  CLCommunic::ucLireNbCaractRecu()
       1  CLCommunic::ucLongeurTampon
       1  CLCommunic::ucLongeurTrame
       1  CLCommunic::ucTrameRecu
      93  CLCommunic::ucValideTrame()
       2  CLCommunic::ucpDebutTampon
       2  CLCommunic::ucpEcritureTampon
       2  CLCommunic::ucpFinTampon
       2  CLCommunic::ucpLireTampon
      23  CLCommunic::ucpLireTrame()
     120  CLCommunic::vInitBaudRate(UINT)
       9  CLCommunic::vTransCaractere(UC)
      33  CLCommunic::vTransString(char const *)
      20  CLCommunic::~CLCommunic()
       1  SBUF
       1  TH1
       1  TL1
       1  _A_IE
       1  _A_PCON
       1  _A_SCON
       1  _A_TCON
       1  _A_TMOD

 
 762 bytes in segment NEAR_CODE
   8 bytes in segment SFR_AN
  12 bytes in segment XDATA_Z
 
 762 bytes of CODE  memory
   0 bytes of DATA  memory (+ 8 bytes shared)
  12 bytes of XDATA memory

Errors: none
Warnings: none
